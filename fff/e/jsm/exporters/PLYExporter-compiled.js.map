{"version":3,"sources":["PLYExporter.js"],"names":[],"mappings":"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","file":"PLYExporter-compiled.js","sourcesContent":["/**\n * @author Garrett Johnson / http://gkjohnson.github.io/\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  var exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ] });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nimport {\n\tBufferGeometry,\n\tMatrix3,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar PLYExporter = function () {};\n\nPLYExporter.prototype = {\n\n\tconstructor: PLYExporter,\n\n\tparse: function ( object, onDone, options ) {\n\n\t\tif ( onDone && typeof onDone === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.' );\n\t\t\toptions = onDone;\n\t\t\tonDone = undefined;\n\n\t\t}\n\n\t\t// Iterate over the valid meshes in the object\n\t\tfunction traverseMeshes( cb ) {\n\n\t\t\tobject.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh === true ) {\n\n\t\t\t\t\tvar mesh = child;\n\t\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tgeometry = geomToBufferGeom.get( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tif ( geometry.getAttribute( 'position' ) !== undefined ) {\n\n\t\t\t\t\t\t\tcb( mesh, geometry );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\t// Default options\n\t\tvar defaultOptions = {\n\t\t\tbinary: false,\n\t\t\texcludeAttributes: [] // normal, uv, color, index\n\t\t};\n\n\t\toptions = Object.assign( defaultOptions, options );\n\n\t\tvar excludeAttributes = options.excludeAttributes;\n\t\tvar geomToBufferGeom = new WeakMap();\n\t\tvar includeNormals = false;\n\t\tvar includeColors = false;\n\t\tvar includeUVs = false;\n\n\t\t// count the vertices, check which properties are used,\n\t\t// and cache the BufferGeometry\n\t\tvar vertexCount = 0;\n\t\tvar faceCount = 0;\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh === true ) {\n\n\t\t\t\tvar mesh = child;\n\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\t\t\tvar bufferGeometry = geomToBufferGeom.get( geometry ) || new BufferGeometry().setFromObject( mesh );\n\t\t\t\t\tgeomToBufferGeom.set( geometry, bufferGeometry );\n\t\t\t\t\tgeometry = bufferGeometry;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\tif ( vertices === undefined ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvertexCount += vertices.count;\n\t\t\t\t\tfaceCount += indices ? indices.count / 3 : vertices.count / 3;\n\n\t\t\t\t\tif ( normals !== undefined ) includeNormals = true;\n\n\t\t\t\t\tif ( uvs !== undefined ) includeUVs = true;\n\n\t\t\t\t\tif ( colors !== undefined ) includeColors = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tvar includeIndices = excludeAttributes.indexOf( 'index' ) === - 1;\n\t\tincludeNormals = includeNormals && excludeAttributes.indexOf( 'normal' ) === - 1;\n\t\tincludeColors = includeColors && excludeAttributes.indexOf( 'color' ) === - 1;\n\t\tincludeUVs = includeUVs && excludeAttributes.indexOf( 'uv' ) === - 1;\n\n\n\t\tif ( includeIndices && faceCount !== Math.floor( faceCount ) ) {\n\n\t\t\t// point cloud meshes will not have an index array and may not have a\n\t\t\t// number of vertices that is divisble by 3 (and therefore representable\n\t\t\t// as triangles)\n\t\t\tconsole.error(\n\n\t\t\t\t'PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' +\n\t\t\t\t'number of indices is not divisible by 3.'\n\n\t\t\t);\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// get how many bytes will be needed to save out the faces\n\t\t// so we can use a minimal amount of memory / data\n\t\tvar indexByteCount = 1;\n\n\t\tif ( vertexCount > 256 ) { // 2^8 bits\n\n\t\t\tindexByteCount = 2;\n\n\t\t}\n\n\t\tif ( vertexCount > 65536 ) { // 2^16 bits\n\n\t\t\tindexByteCount = 4;\n\n\t\t}\n\n\n\t\tvar header =\n\t\t\t'ply\\n' +\n\t\t\t`format ${ options.binary ? 'binary_big_endian' : 'ascii' } 1.0\\n` +\n\t\t\t`element vertex ${vertexCount}\\n` +\n\n\t\t\t// position\n\t\t\t'property float x\\n' +\n\t\t\t'property float y\\n' +\n\t\t\t'property float z\\n';\n\n\t\tif ( includeNormals === true ) {\n\n\t\t\t// normal\n\t\t\theader +=\n\t\t\t\t'property float nx\\n' +\n\t\t\t\t'property float ny\\n' +\n\t\t\t\t'property float nz\\n';\n\n\t\t}\n\n\t\tif ( includeUVs === true ) {\n\n\t\t\t// uvs\n\t\t\theader +=\n\t\t\t\t'property float s\\n' +\n\t\t\t\t'property float t\\n';\n\n\t\t}\n\n\t\tif ( includeColors === true ) {\n\n\t\t\t// colors\n\t\t\theader +=\n\t\t\t\t'property uchar red\\n' +\n\t\t\t\t'property uchar green\\n' +\n\t\t\t\t'property uchar blue\\n';\n\n\t\t}\n\n\t\tif ( includeIndices === true ) {\n\n\t\t\t// faces\n\t\t\theader +=\n\t\t\t\t`element face ${faceCount}\\n` +\n\t\t\t\t`property list uchar uint${ indexByteCount * 8 } vertex_index\\n`;\n\n\t\t}\n\n\t\theader += 'end_header\\n';\n\n\n\t\t// Generate attribute data\n\t\tvar vertex = new Vector3();\n\t\tvar normalMatrixWorld = new Matrix3();\n\t\tvar result = null;\n\n\t\tif ( options.binary === true ) {\n\n\t\t\t// Binary File Generation\n\t\t\tvar headerBin = new TextEncoder().encode( header );\n\n\t\t\t// 3 position values at 4 bytes\n\t\t\t// 3 normal values at 4 bytes\n\t\t\t// 3 color channels with 1 byte\n\t\t\t// 2 uv values at 4 bytes\n\t\t\tvar vertexListLength = vertexCount * ( 4 * 3 + ( includeNormals ? 4 * 3 : 0 ) + ( includeColors ? 3 : 0 ) + ( includeUVs ? 4 * 2 : 0 ) );\n\n\t\t\t// 1 byte shape desciptor\n\t\t\t// 3 vertex indices at ${indexByteCount} bytes\n\t\t\tvar faceListLength = includeIndices ? faceCount * ( indexByteCount * 3 + 1 ) : 0;\n\t\t\tvar output = new DataView( new ArrayBuffer( headerBin.length + vertexListLength + faceListLength ) );\n\t\t\tnew Uint8Array( output.buffer ).set( headerBin, 0 );\n\n\n\t\t\tvar vOffset = headerBin.length;\n\t\t\tvar fOffset = headerBin.length + vertexListLength;\n\t\t\tvar writtenVertices = 0;\n\t\t\ttraverseMeshes( function ( mesh, geometry ) {\n\n\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i ++ ) {\n\n\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\n\t\t\t\t\t// Position information\n\t\t\t\t\toutput.setFloat32( vOffset, vertex.x );\n\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\toutput.setFloat32( vOffset, vertex.y );\n\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\toutput.setFloat32( vOffset, vertex.z );\n\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t// Normal information\n\t\t\t\t\tif ( includeNormals === true ) {\n\n\t\t\t\t\t\tif ( normals != null ) {\n\n\t\t\t\t\t\t\tvertex.x = normals.getX( i );\n\t\t\t\t\t\t\tvertex.y = normals.getY( i );\n\t\t\t\t\t\t\tvertex.z = normals.getZ( i );\n\n\t\t\t\t\t\t\tvertex.applyMatrix3( normalMatrixWorld );\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.x );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.y );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.z );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0 );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0 );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0 );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// UV information\n\t\t\t\t\tif ( includeUVs === true ) {\n\n\t\t\t\t\t\tif ( uvs != null ) {\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, uvs.getX( i ) );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, uvs.getY( i ) );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t} else if ( includeUVs !== false ) {\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0 );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0 );\n\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Color information\n\t\t\t\t\tif ( includeColors === true ) {\n\n\t\t\t\t\t\tif ( colors != null ) {\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getX( i ) * 255 ) );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getY( i ) * 255 ) );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getZ( i ) * 255 ) );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( includeIndices === true ) {\n\n\t\t\t\t\t// Create the face list\n\t\t\t\t\tvar faceIndexFunc = `setUint${indexByteCount * 8}`;\n\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\toutput.setUint8( fOffset, 3 );\n\t\t\t\t\t\t\tfOffset += 1;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, indices.getX( i + 0 ) + writtenVertices );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, indices.getX( i + 1 ) + writtenVertices );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, indices.getX( i + 2 ) + writtenVertices );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\toutput.setUint8( fOffset, 3 );\n\t\t\t\t\t\t\tfOffset += 1;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, writtenVertices + i );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, writtenVertices + i + 1 );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\toutput[ faceIndexFunc ]( fOffset, writtenVertices + i + 2 );\n\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t// Save the amount of verts we've already written so we can offset\n\t\t\t\t// the face index on the next mesh\n\t\t\t\twrittenVertices += vertices.count;\n\n\t\t\t} );\n\n\t\t\tresult = output.buffer;\n\n\t\t} else {\n\n\t\t\t// Ascii File Generation\n\t\t\t// count the number of vertices\n\t\t\tvar writtenVertices = 0;\n\t\t\tvar vertexList = '';\n\t\t\tvar faceList = '';\n\n\t\t\ttraverseMeshes( function ( mesh, geometry ) {\n\n\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\t// form each line\n\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i ++ ) {\n\n\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\n\t\t\t\t\t// Position information\n\t\t\t\t\tvar line =\n\t\t\t\t\t\tvertex.x + ' ' +\n\t\t\t\t\t\tvertex.y + ' ' +\n\t\t\t\t\t\tvertex.z;\n\n\t\t\t\t\t// Normal information\n\t\t\t\t\tif ( includeNormals === true ) {\n\n\t\t\t\t\t\tif ( normals != null ) {\n\n\t\t\t\t\t\t\tvertex.x = normals.getX( i );\n\t\t\t\t\t\t\tvertex.y = normals.getY( i );\n\t\t\t\t\t\t\tvertex.z = normals.getZ( i );\n\n\t\t\t\t\t\t\tvertex.applyMatrix3( normalMatrixWorld );\n\n\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\tvertex.x + ' ' +\n\t\t\t\t\t\t\t\tvertex.y + ' ' +\n\t\t\t\t\t\t\t\tvertex.z;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tline += ' 0 0 0';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// UV information\n\t\t\t\t\tif ( includeUVs === true ) {\n\n\t\t\t\t\t\tif ( uvs != null ) {\n\n\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\tuvs.getX( i ) + ' ' +\n\t\t\t\t\t\t\t\tuvs.getY( i );\n\n\t\t\t\t\t\t} else if ( includeUVs !== false ) {\n\n\t\t\t\t\t\t\tline += ' 0 0';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Color information\n\t\t\t\t\tif ( includeColors === true ) {\n\n\t\t\t\t\t\tif ( colors != null ) {\n\n\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\tMath.floor( colors.getX( i ) * 255 ) + ' ' +\n\t\t\t\t\t\t\t\tMath.floor( colors.getY( i ) * 255 ) + ' ' +\n\t\t\t\t\t\t\t\tMath.floor( colors.getZ( i ) * 255 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tline += ' 255 255 255';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvertexList += line + '\\n';\n\n\t\t\t\t}\n\n\t\t\t\t// Create the face list\n\t\t\t\tif ( includeIndices === true ) {\n\n\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfaceList += `3 ${ indices.getX( i + 0 ) + writtenVertices }`;\n\t\t\t\t\t\t\tfaceList += ` ${ indices.getX( i + 1 ) + writtenVertices }`;\n\t\t\t\t\t\t\tfaceList += ` ${ indices.getX( i + 2 ) + writtenVertices }\\n`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfaceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCount += indices ? indices.count / 3 : vertices.count / 3;\n\n\t\t\t\t}\n\n\t\t\t\twrittenVertices += vertices.count;\n\n\t\t\t} );\n\n\t\t\tresult = `${ header }${vertexList}\\n${ includeIndices ? `${faceList}\\n` : '' }`;\n\n\t\t}\n\n\t\tif ( typeof onDone === 'function' ) requestAnimationFrame( () => onDone( result ) );\n\t\treturn result;\n\n\t}\n\n};\n\nexport { PLYExporter };\n"]}