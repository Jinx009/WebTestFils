{"version":3,"sources":["STLExporter.js"],"names":[],"mappings":"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","file":"STLExporter-compiled.js","sourcesContent":["/**\n * @author kovacsv / http://kovacsv.hu/\n * @author mrdoob / http://mrdoob.com/\n * @author mudcube / http://mudcu.be/\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Usage:\n *  var exporter = new STLExporter();\n *\n *  // second argument is a list of options\n *  var data = exporter.parse( mesh, { binary: true } );\n *\n */\n\nimport {\n\tGeometry,\n\tMatrix3,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar STLExporter = function () {};\n\nSTLExporter.prototype = {\n\n\tconstructor: STLExporter,\n\n\tparse: ( function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar normalMatrixWorld = new Matrix3();\n\n\t\treturn function parse( scene, options ) {\n\n\t\t\tif ( options === undefined ) options = {};\n\n\t\t\tvar binary = options.binary !== undefined ? options.binary : false;\n\n\t\t\t//\n\n\t\t\tvar objects = [];\n\t\t\tvar triangles = 0;\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isMesh ) {\n\n\t\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tgeometry = new Geometry().fromBufferGeometry( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\ttriangles += geometry.faces.length;\n\n\t\t\t\t\t\tobjects.push( {\n\n\t\t\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\t\t\tmatrixWorld: object.matrixWorld\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( binary ) {\n\n\t\t\t\tvar offset = 80; // skip header\n\t\t\t\tvar bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n\t\t\t\tvar arrayBuffer = new ArrayBuffer( bufferLength );\n\t\t\t\tvar output = new DataView( arrayBuffer );\n\t\t\t\toutput.setUint32( offset, triangles, true ); offset += 4;\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\t\t\t\tvar faces = object.geometry.faces;\n\t\t\t\t\tvar matrixWorld = object.matrixWorld;\n\n\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( matrixWorld );\n\n\t\t\t\t\tfor ( var j = 0, jl = faces.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ j ];\n\n\t\t\t\t\t\tvector.copy( face.normal ).applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\toutput.setFloat32( offset, vector.x, true ); offset += 4; // normal\n\t\t\t\t\t\toutput.setFloat32( offset, vector.y, true ); offset += 4;\n\t\t\t\t\t\toutput.setFloat32( offset, vector.z, true ); offset += 4;\n\n\t\t\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t\t\tfor ( var k = 0; k < 3; k ++ ) {\n\n\t\t\t\t\t\t\tvector.copy( vertices[ indices[ k ] ] ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.x, true ); offset += 4; // vertices\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.y, true ); offset += 4;\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.z, true ); offset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.setUint16( offset, 0, true ); offset += 2; // attribute byte count\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t} else {\n\n\t\t\t\tvar output = '';\n\n\t\t\t\toutput += 'solid exported\\n';\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\t\t\t\tvar faces = object.geometry.faces;\n\t\t\t\t\tvar matrixWorld = object.matrixWorld;\n\n\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( matrixWorld );\n\n\t\t\t\t\tfor ( var j = 0, jl = faces.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ j ];\n\n\t\t\t\t\t\tvector.copy( face.normal ).applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\toutput += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n\t\t\t\t\t\toutput += '\\t\\touter loop\\n';\n\n\t\t\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t\t\tfor ( var k = 0; k < 3; k ++ ) {\n\n\t\t\t\t\t\t\tvector.copy( vertices[ indices[ k ] ] ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\t\toutput += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput += '\\t\\tendloop\\n';\n\t\t\t\t\t\toutput += '\\tendfacet\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toutput += 'endsolid exported\\n';\n\n\t\t\t\treturn output;\n\n\t\t\t}\n\n\t\t};\n\n\t}() )\n\n};\n\nexport { STLExporter };\n"]}