{"version":3,"sources":["PeppersGhostEffect.js"],"names":[],"mappings":"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","file":"PeppersGhostEffect-compiled.js","sourcesContent":["/**\n * Created by tpowellmeto on 29/10/2015.\n *\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nimport {\n\tPerspectiveCamera,\n\tQuaternion,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar PeppersGhostEffect = function ( renderer ) {\n\n\tvar scope = this;\n\n\tscope.cameraDistance = 15;\n\tscope.reflectFromAbove = false;\n\n\t// Internals\n\tvar _halfWidth, _width, _height;\n\n\tvar _cameraF = new PerspectiveCamera(); //front\n\tvar _cameraB = new PerspectiveCamera(); //back\n\tvar _cameraL = new PerspectiveCamera(); //left\n\tvar _cameraR = new PerspectiveCamera(); //right\n\n\tvar _position = new Vector3();\n\tvar _quaternion = new Quaternion();\n\tvar _scale = new Vector3();\n\n\t// Initialization\n\trenderer.autoClear = false;\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_halfWidth = width / 2;\n\t\tif ( width < height ) {\n\n\t\t\t_width = width / 3;\n\t\t\t_height = width / 3;\n\n\t\t} else {\n\n\t\t\t_width = height / 3;\n\t\t\t_height = height / 3;\n\n\t\t}\n\t\trenderer.setSize( width, height );\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tscene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t// front\n\t\t_cameraF.position.copy( _position );\n\t\t_cameraF.quaternion.copy( _quaternion );\n\t\t_cameraF.translateZ( scope.cameraDistance );\n\t\t_cameraF.lookAt( scene.position );\n\n\t\t// back\n\t\t_cameraB.position.copy( _position );\n\t\t_cameraB.quaternion.copy( _quaternion );\n\t\t_cameraB.translateZ( - ( scope.cameraDistance ) );\n\t\t_cameraB.lookAt( scene.position );\n\t\t_cameraB.rotation.z += 180 * ( Math.PI / 180 );\n\n\t\t// left\n\t\t_cameraL.position.copy( _position );\n\t\t_cameraL.quaternion.copy( _quaternion );\n\t\t_cameraL.translateX( - ( scope.cameraDistance ) );\n\t\t_cameraL.lookAt( scene.position );\n\t\t_cameraL.rotation.x += 90 * ( Math.PI / 180 );\n\n\t\t// right\n\t\t_cameraR.position.copy( _position );\n\t\t_cameraR.quaternion.copy( _quaternion );\n\t\t_cameraR.translateX( scope.cameraDistance );\n\t\t_cameraR.lookAt( scene.position );\n\t\t_cameraR.rotation.x += 90 * ( Math.PI / 180 );\n\n\n\t\trenderer.clear();\n\t\trenderer.setScissorTest( true );\n\n\t\trenderer.setScissor( _halfWidth - ( _width / 2 ), ( _height * 2 ), _width, _height );\n\t\trenderer.setViewport( _halfWidth - ( _width / 2 ), ( _height * 2 ), _width, _height );\n\n\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\trenderer.render( scene, _cameraB );\n\n\t\t} else {\n\n\t\t\trenderer.render( scene, _cameraF );\n\n\t\t}\n\n\t\trenderer.setScissor( _halfWidth - ( _width / 2 ), 0, _width, _height );\n\t\trenderer.setViewport( _halfWidth - ( _width / 2 ), 0, _width, _height );\n\n\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\trenderer.render( scene, _cameraF );\n\n\t\t} else {\n\n\t\t\trenderer.render( scene, _cameraB );\n\n\t\t}\n\n\t\trenderer.setScissor( _halfWidth - ( _width / 2 ) - _width, _height, _width, _height );\n\t\trenderer.setViewport( _halfWidth - ( _width / 2 ) - _width, _height, _width, _height );\n\n\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\trenderer.render( scene, _cameraR );\n\n\t\t} else {\n\n\t\t\trenderer.render( scene, _cameraL );\n\n\t\t}\n\n\t\trenderer.setScissor( _halfWidth + ( _width / 2 ), _height, _width, _height );\n\t\trenderer.setViewport( _halfWidth + ( _width / 2 ), _height, _width, _height );\n\n\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\trenderer.render( scene, _cameraL );\n\n\t\t} else {\n\n\t\t\trenderer.render( scene, _cameraR );\n\n\t\t}\n\n\t\trenderer.setScissorTest( false );\n\n\t};\n\n\n};\n\nexport { PeppersGhostEffect };\n"]}