{"version":3,"sources":["ParallaxBarrierEffect.js"],"names":[],"mappings":"AAAA;;;;;;AAMA,SACC,YADD,EAEC,IAFD,EAGC,aAHD,EAIC,kBAJD,EAKC,mBALD,EAMC,UAND,EAOC,KAPD,EAQC,cARD,EASC,YATD,EAUC,iBAVD,QAWO,gCAXP;;AAaA,IAAI,wBAAwB,UAAW,QAAX,EAAsB;;AAEjD,KAAI,UAAU,IAAI,kBAAJ,CAAwB,CAAE,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAE,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAd;;AAEA,KAAI,SAAS,IAAI,KAAJ,EAAb;;AAEA,KAAI,UAAU,IAAI,YAAJ,EAAd;;AAEA,KAAI,UAAU,EAAE,WAAW,YAAb,EAA2B,WAAW,aAAtC,EAAqD,QAAQ,UAA7D,EAAd;;AAEA,KAAI,iBAAiB,IAAI,iBAAJ,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,OAAjC,CAArB;AACA,KAAI,iBAAiB,IAAI,iBAAJ,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,OAAjC,CAArB;;AAEA,KAAI,YAAY,IAAI,cAAJ,CAAoB;;AAEnC,YAAU;;AAET,cAAW,EAAE,OAAO,eAAe,OAAxB,EAFF;AAGT,eAAY,EAAE,OAAO,eAAe,OAAxB;;AAHH,GAFyB;;AASnC,gBAAc,CAEb,mBAFa,EAIb,eAJa,EAMb,4BANa,EAOb,4EAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CATqB;;AAsBnC,kBAAgB,CAEf,4BAFe,EAGf,6BAHe,EAIf,mBAJe,EAMf,eANe,EAQf,iBARe,EAUf,iDAVe,EAYf,4CAZe,EAcf,WAde,EAgBf,6CAhBe,EAkBf,IAlBe,EAoBf,GApBe,EAsBd,IAtBc,CAsBR,IAtBQ;;AAtBmB,EAApB,CAAhB;;AAgDA,KAAI,OAAO,IAAI,IAAJ,CAAU,IAAI,mBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,CAAV,EAA2C,SAA3C,CAAX;AACA,QAAO,GAAP,CAAY,IAAZ;;AAEA,MAAK,OAAL,GAAe,UAAW,KAAX,EAAkB,MAAlB,EAA2B;;AAEzC,WAAS,OAAT,CAAkB,KAAlB,EAAyB,MAAzB;;AAEA,MAAI,aAAa,SAAS,aAAT,EAAjB;;AAEA,iBAAe,OAAf,CAAwB,QAAQ,UAAhC,EAA4C,SAAS,UAArD;AACA,iBAAe,OAAf,CAAwB,QAAQ,UAAhC,EAA4C,SAAS,UAArD;AAEA,EATD;;AAWA,MAAK,MAAL,GAAc,UAAW,KAAX,EAAkB,MAAlB,EAA2B;;AAExC,QAAM,iBAAN;;AAEA,MAAK,OAAO,MAAP,KAAkB,IAAvB,EAA8B,OAAO,iBAAP;;AAE9B,UAAQ,MAAR,CAAgB,MAAhB;;AAEA,WAAS,eAAT,CAA0B,cAA1B;AACA,WAAS,KAAT;AACA,WAAS,MAAT,CAAiB,KAAjB,EAAwB,QAAQ,OAAhC;;AAEA,WAAS,eAAT,CAA0B,cAA1B;AACA,WAAS,KAAT;AACA,WAAS,MAAT,CAAiB,KAAjB,EAAwB,QAAQ,OAAhC;;AAEA,WAAS,eAAT,CAA0B,IAA1B;AACA,WAAS,MAAT,CAAiB,MAAjB,EAAyB,OAAzB;AAEA,EAnBD;AAqBA,CAhGD;;AAkGA,SAAS,qBAAT","file":"ParallaxBarrierEffect-compiled.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author marklundin / http://mark-lundin.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tLinearFilter,\n\tMesh,\n\tNearestFilter,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tScene,\n\tShaderMaterial,\n\tStereoCamera,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\n\nvar ParallaxBarrierEffect = function ( renderer ) {\n\n\tvar _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\tvar _scene = new Scene();\n\n\tvar _stereo = new StereoCamera();\n\n\tvar _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\tvar _renderTargetL = new WebGLRenderTarget( 512, 512, _params );\n\tvar _renderTargetR = new WebGLRenderTarget( 512, 512, _params );\n\n\tvar _material = new ShaderMaterial( {\n\n\t\tuniforms: {\n\n\t\t\t\"mapLeft\": { value: _renderTargetL.texture },\n\t\t\t\"mapRight\": { value: _renderTargetR.texture }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = vec2( uv.x, uv.y );\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D mapLeft;\",\n\t\t\t\"uniform sampler2D mapRight;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 uv = vUv;\",\n\n\t\t\t\"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\",\n\n\t\t\t\"\t\tgl_FragColor = texture2D( mapLeft, uv );\",\n\n\t\t\t\"\t} else {\",\n\n\t\t\t\"\t\tgl_FragColor = texture2D( mapRight, uv );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t} );\n\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), _material );\n\t_scene.add( mesh );\n\n\tthis.setSize = function ( width, height ) {\n\n\t\trenderer.setSize( width, height );\n\n\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tscene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_stereo.update( camera );\n\n\t\trenderer.setRenderTarget( _renderTargetL );\n\t\trenderer.clear();\n\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\trenderer.setRenderTarget( _renderTargetR );\n\t\trenderer.clear();\n\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\trenderer.setRenderTarget( null );\n\t\trenderer.render( _scene, _camera );\n\n\t};\n\n};\n\nexport { ParallaxBarrierEffect };\n"]}