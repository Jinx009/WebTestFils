{"version":3,"sources":["Ocean.js"],"names":[],"mappings":"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","file":"Ocean-compiled.js","sourcesContent":["/*\n\tthree.js Ocean\n*/\n\nimport {\n\tClampToEdgeWrapping,\n\tDataTexture,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tMesh,\n\tNearestFilter,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tRepeatWrapping,\n\tScene,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { OceanShaders } from \"../shaders/OceanShaders.js\";\n\nvar Ocean = function ( renderer, camera, scene, options ) {\n\n\t// flag used to trigger parameter changes\n\tthis.changed = true;\n\tthis.initial = true;\n\n\t// Assign required parameters as object properties\n\tthis.oceanCamera = new OrthographicCamera(); //camera.clone();\n\tthis.oceanCamera.position.z = 1;\n\tthis.renderer = renderer;\n\tthis.renderer.clearColor( 0xffffff );\n\n\tthis.scene = new Scene();\n\n\t// Assign optional parameters as variables and object properties\n\tfunction optionalParameter( value, defaultValue ) {\n\n\t\treturn value !== undefined ? value : defaultValue;\n\n\t}\n\toptions = options || {};\n\tthis.clearColor = optionalParameter( options.CLEAR_COLOR, [ 1.0, 1.0, 1.0, 0.0 ] );\n\tthis.geometryOrigin = optionalParameter( options.GEOMETRY_ORIGIN, [ - 1000.0, - 1000.0 ] );\n\tthis.sunDirectionX = optionalParameter( options.SUN_DIRECTION[ 0 ], - 1.0 );\n\tthis.sunDirectionY = optionalParameter( options.SUN_DIRECTION[ 1 ], 1.0 );\n\tthis.sunDirectionZ = optionalParameter( options.SUN_DIRECTION[ 2 ], 1.0 );\n\tthis.oceanColor = optionalParameter( options.OCEAN_COLOR, new Vector3( 0.004, 0.016, 0.047 ) );\n\tthis.skyColor = optionalParameter( options.SKY_COLOR, new Vector3( 3.2, 9.6, 12.8 ) );\n\tthis.exposure = optionalParameter( options.EXPOSURE, 0.35 );\n\tthis.geometryResolution = optionalParameter( options.GEOMETRY_RESOLUTION, 32 );\n\tthis.geometrySize = optionalParameter( options.GEOMETRY_SIZE, 2000 );\n\tthis.resolution = optionalParameter( options.RESOLUTION, 64 );\n\tthis.floatSize = optionalParameter( options.SIZE_OF_FLOAT, 4 );\n\tthis.windX = optionalParameter( options.INITIAL_WIND[ 0 ], 10.0 );\n\tthis.windY = optionalParameter( options.INITIAL_WIND[ 1 ], 10.0 );\n\tthis.size = optionalParameter( options.INITIAL_SIZE, 250.0 );\n\tthis.choppiness = optionalParameter( options.INITIAL_CHOPPINESS, 1.5 );\n\n\t//\n\tthis.matrixNeedsUpdate = false;\n\n\t// Setup framebuffer pipeline\n\tvar renderTargetType = optionalParameter( options.USE_HALF_FLOAT, false ) ? HalfFloatType : FloatType;\n\tvar LinearClampParams = {\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: LinearFilter,\n\t\twrapS: ClampToEdgeWrapping,\n\t\twrapT: ClampToEdgeWrapping,\n\t\tformat: RGBAFormat,\n\t\tstencilBuffer: false,\n\t\tdepthBuffer: false,\n\t\tpremultiplyAlpha: false,\n\t\ttype: renderTargetType\n\t};\n\tvar NearestClampParams = {\n\t\tminFilter: NearestFilter,\n\t\tmagFilter: NearestFilter,\n\t\twrapS: ClampToEdgeWrapping,\n\t\twrapT: ClampToEdgeWrapping,\n\t\tformat: RGBAFormat,\n\t\tstencilBuffer: false,\n\t\tdepthBuffer: false,\n\t\tpremultiplyAlpha: false,\n\t\ttype: renderTargetType\n\t};\n\tvar NearestRepeatParams = {\n\t\tminFilter: NearestFilter,\n\t\tmagFilter: NearestFilter,\n\t\twrapS: RepeatWrapping,\n\t\twrapT: RepeatWrapping,\n\t\tformat: RGBAFormat,\n\t\tstencilBuffer: false,\n\t\tdepthBuffer: false,\n\t\tpremultiplyAlpha: false,\n\t\ttype: renderTargetType\n\t};\n\tthis.initialSpectrumFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestRepeatParams );\n\tthis.spectrumFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\n\tthis.pingPhaseFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\n\tthis.pongPhaseFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\n\tthis.pingTransformFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\n\tthis.pongTransformFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, NearestClampParams );\n\tthis.displacementMapFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, LinearClampParams );\n\tthis.normalMapFramebuffer = new WebGLRenderTarget( this.resolution, this.resolution, LinearClampParams );\n\n\t// Define shaders and constant uniforms\n\t////////////////////////////////////////\n\n\t// 0 - The vertex shader used in all of the simulation steps\n\tvar fullscreeenVertexShader = OceanShaders[ \"ocean_sim_vertex\" ];\n\n\t// 1 - Horizontal wave vertices used for FFT\n\tvar oceanHorizontalShader = OceanShaders[ \"ocean_subtransform\" ];\n\tvar oceanHorizontalUniforms = UniformsUtils.clone( oceanHorizontalShader.uniforms );\n\tthis.materialOceanHorizontal = new ShaderMaterial( {\n\t\tuniforms: oceanHorizontalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: \"#define HORIZONTAL \\n\" + oceanHorizontalShader.fragmentShader\n\t} );\n\tthis.materialOceanHorizontal.uniforms.u_transformSize = { value: this.resolution };\n\tthis.materialOceanHorizontal.uniforms.u_subtransformSize = { value: null };\n\tthis.materialOceanHorizontal.uniforms.u_input = { value: null };\n\tthis.materialOceanHorizontal.depthTest = false;\n\n\t// 2 - Vertical wave vertices used for FFT\n\tvar oceanVerticalShader = OceanShaders[ \"ocean_subtransform\" ];\n\tvar oceanVerticalUniforms = UniformsUtils.clone( oceanVerticalShader.uniforms );\n\tthis.materialOceanVertical = new ShaderMaterial( {\n\t\tuniforms: oceanVerticalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: oceanVerticalShader.fragmentShader\n\t} );\n\tthis.materialOceanVertical.uniforms.u_transformSize = { value: this.resolution };\n\tthis.materialOceanVertical.uniforms.u_subtransformSize = { value: null };\n\tthis.materialOceanVertical.uniforms.u_input = { value: null };\n\tthis.materialOceanVertical.depthTest = false;\n\n\t// 3 - Initial spectrum used to generate height map\n\tvar initialSpectrumShader = OceanShaders[ \"ocean_initial_spectrum\" ];\n\tvar initialSpectrumUniforms = UniformsUtils.clone( initialSpectrumShader.uniforms );\n\tthis.materialInitialSpectrum = new ShaderMaterial( {\n\t\tuniforms: initialSpectrumUniforms,\n\t\tvertexShader: initialSpectrumShader.vertexShader,\n\t\tfragmentShader: initialSpectrumShader.fragmentShader\n\t} );\n\tthis.materialInitialSpectrum.uniforms.u_wind = { value: new Vector2() };\n\tthis.materialInitialSpectrum.uniforms.u_resolution = { value: this.resolution };\n\tthis.materialInitialSpectrum.depthTest = false;\n\n\t// 4 - Phases used to animate heightmap\n\tvar phaseShader = OceanShaders[ \"ocean_phase\" ];\n\tvar phaseUniforms = UniformsUtils.clone( phaseShader.uniforms );\n\tthis.materialPhase = new ShaderMaterial( {\n\t\tuniforms: phaseUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: phaseShader.fragmentShader\n\t} );\n\tthis.materialPhase.uniforms.u_resolution = { value: this.resolution };\n\tthis.materialPhase.depthTest = false;\n\n\t// 5 - Shader used to update spectrum\n\tvar spectrumShader = OceanShaders[ \"ocean_spectrum\" ];\n\tvar spectrumUniforms = UniformsUtils.clone( spectrumShader.uniforms );\n\tthis.materialSpectrum = new ShaderMaterial( {\n\t\tuniforms: spectrumUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: spectrumShader.fragmentShader\n\t} );\n\tthis.materialSpectrum.uniforms.u_initialSpectrum = { value: null };\n\tthis.materialSpectrum.uniforms.u_resolution = { value: this.resolution };\n\tthis.materialSpectrum.depthTest = false;\n\n\t// 6 - Shader used to update spectrum normals\n\tvar normalShader = OceanShaders[ \"ocean_normals\" ];\n\tvar normalUniforms = UniformsUtils.clone( normalShader.uniforms );\n\tthis.materialNormal = new ShaderMaterial( {\n\t\tuniforms: normalUniforms,\n\t\tvertexShader: fullscreeenVertexShader.vertexShader,\n\t\tfragmentShader: normalShader.fragmentShader\n\t} );\n\tthis.materialNormal.uniforms.u_displacementMap = { value: null };\n\tthis.materialNormal.uniforms.u_resolution = { value: this.resolution };\n\tthis.materialNormal.depthTest = false;\n\n\t// 7 - Shader used to update normals\n\tvar oceanShader = OceanShaders[ \"ocean_main\" ];\n\tvar oceanUniforms = UniformsUtils.clone( oceanShader.uniforms );\n\tthis.materialOcean = new ShaderMaterial( {\n\t\tuniforms: oceanUniforms,\n\t\tvertexShader: oceanShader.vertexShader,\n\t\tfragmentShader: oceanShader.fragmentShader\n\t} );\n\t// this.materialOcean.wireframe = true;\n\tthis.materialOcean.uniforms.u_geometrySize = { value: this.resolution };\n\tthis.materialOcean.uniforms.u_displacementMap = { value: this.displacementMapFramebuffer.texture };\n\tthis.materialOcean.uniforms.u_normalMap = { value: this.normalMapFramebuffer.texture };\n\tthis.materialOcean.uniforms.u_oceanColor = { value: this.oceanColor };\n\tthis.materialOcean.uniforms.u_skyColor = { value: this.skyColor };\n\tthis.materialOcean.uniforms.u_sunDirection = { value: new Vector3( this.sunDirectionX, this.sunDirectionY, this.sunDirectionZ ) };\n\tthis.materialOcean.uniforms.u_exposure = { value: this.exposure };\n\n\t// Disable blending to prevent default premultiplied alpha values\n\tthis.materialOceanHorizontal.blending = 0;\n\tthis.materialOceanVertical.blending = 0;\n\tthis.materialInitialSpectrum.blending = 0;\n\tthis.materialPhase.blending = 0;\n\tthis.materialSpectrum.blending = 0;\n\tthis.materialNormal.blending = 0;\n\tthis.materialOcean.blending = 0;\n\n\t// Create the simulation plane\n\tthis.screenQuad = new Mesh( new PlaneBufferGeometry( 2, 2 ) );\n\tthis.scene.add( this.screenQuad );\n\n\t// Initialise spectrum data\n\tthis.generateSeedPhaseTexture();\n\n\t// Generate the ocean mesh\n\tthis.generateMesh();\n\n};\n\nOcean.prototype.generateMesh = function () {\n\n\tvar geometry = new PlaneBufferGeometry( this.geometrySize, this.geometrySize, this.geometryResolution, this.geometryResolution );\n\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tthis.oceanMesh = new Mesh( geometry, this.materialOcean );\n\n};\n\nOcean.prototype.render = function () {\n\n\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\tthis.scene.overrideMaterial = null;\n\n\tif ( this.changed )\n\t\tthis.renderInitialSpectrum();\n\n\tthis.renderWavePhase();\n\tthis.renderSpectrum();\n\tthis.renderSpectrumFFT();\n\tthis.renderNormalMap();\n\tthis.scene.overrideMaterial = null;\n\n\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n};\n\nOcean.prototype.generateSeedPhaseTexture = function () {\n\n\t// Setup the seed texture\n\tthis.pingPhase = true;\n\tvar phaseArray = new window.Float32Array( this.resolution * this.resolution * 4 );\n\tfor ( var i = 0; i < this.resolution; i ++ ) {\n\n\t\tfor ( var j = 0; j < this.resolution; j ++ ) {\n\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 ] = Math.random() * 2.0 * Math.PI;\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 1 ] = 0.0;\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 2 ] = 0.0;\n\t\t\tphaseArray[ i * this.resolution * 4 + j * 4 + 3 ] = 0.0;\n\n\t\t}\n\n\t}\n\n\tthis.pingPhaseTexture = new DataTexture( phaseArray, this.resolution, this.resolution, RGBAFormat );\n\tthis.pingPhaseTexture.wrapS = ClampToEdgeWrapping;\n\tthis.pingPhaseTexture.wrapT = ClampToEdgeWrapping;\n\tthis.pingPhaseTexture.type = FloatType;\n\n};\n\nOcean.prototype.renderInitialSpectrum = function () {\n\n\tthis.scene.overrideMaterial = this.materialInitialSpectrum;\n\tthis.materialInitialSpectrum.uniforms.u_wind.value.set( this.windX, this.windY );\n\tthis.materialInitialSpectrum.uniforms.u_size.value = this.size;\n\n\tthis.renderer.setRenderTarget( this.initialSpectrumFramebuffer );\n\tthis.renderer.clear();\n\tthis.renderer.render( this.scene, this.oceanCamera );\n\n};\n\nOcean.prototype.renderWavePhase = function () {\n\n\tthis.scene.overrideMaterial = this.materialPhase;\n\tthis.screenQuad.material = this.materialPhase;\n\tif ( this.initial ) {\n\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhaseTexture;\n\t\tthis.initial = false;\n\n\t} else {\n\n\t\tthis.materialPhase.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\n\n\t}\n\tthis.materialPhase.uniforms.u_deltaTime.value = this.deltaTime;\n\tthis.materialPhase.uniforms.u_size.value = this.size;\n\tthis.renderer.setRenderTarget( this.pingPhase ? this.pongPhaseFramebuffer : this.pingPhaseFramebuffer );\n\tthis.renderer.render( this.scene, this.oceanCamera );\n\tthis.pingPhase = ! this.pingPhase;\n\n};\n\nOcean.prototype.renderSpectrum = function () {\n\n\tthis.scene.overrideMaterial = this.materialSpectrum;\n\tthis.materialSpectrum.uniforms.u_initialSpectrum.value = this.initialSpectrumFramebuffer.texture;\n\tthis.materialSpectrum.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\n\tthis.materialSpectrum.uniforms.u_choppiness.value = this.choppiness;\n\tthis.materialSpectrum.uniforms.u_size.value = this.size;\n\n\tthis.renderer.setRenderTarget( this.spectrumFramebuffer );\n\tthis.renderer.render( this.scene, this.oceanCamera );\n\n};\n\nOcean.prototype.renderSpectrumFFT = function () {\n\n\t// GPU FFT using Stockham formulation\n\tvar iterations = Math.log( this.resolution ) / Math.log( 2 ); // log2\n\n\tthis.scene.overrideMaterial = this.materialOceanHorizontal;\n\n\tfor ( var i = 0; i < iterations; i ++ ) {\n\n\t\tif ( i === 0 ) {\n\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.spectrumFramebuffer.texture;\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t} else if ( i % 2 === 1 ) {\n\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.pongTransformFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t} else {\n\n\t\t\tthis.materialOceanHorizontal.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\n\t\t\tthis.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t}\n\n\t}\n\tthis.scene.overrideMaterial = this.materialOceanVertical;\n\tfor ( var i = iterations; i < iterations * 2; i ++ ) {\n\n\t\tif ( i === iterations * 2 - 1 ) {\n\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = ( iterations % 2 === 0 ) ? this.pingTransformFramebuffer.texture : this.pongTransformFramebuffer.texture;\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.displacementMapFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t} else if ( i % 2 === 1 ) {\n\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.pongTransformFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t} else {\n\n\t\t\tthis.materialOceanVertical.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\n\t\t\tthis.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow( 2, ( i % ( iterations ) ) + 1 );\n\n\t\t\tthis.renderer.setRenderTarget( this.pingTransformFramebuffer );\n\t\t\tthis.renderer.render( this.scene, this.oceanCamera );\n\n\t\t}\n\n\t}\n\n};\n\nOcean.prototype.renderNormalMap = function () {\n\n\tthis.scene.overrideMaterial = this.materialNormal;\n\tif ( this.changed ) this.materialNormal.uniforms.u_size.value = this.size;\n\tthis.materialNormal.uniforms.u_displacementMap.value = this.displacementMapFramebuffer.texture;\n\n\tthis.renderer.setRenderTarget( this.normalMapFramebuffer );\n\tthis.renderer.clear();\n\tthis.renderer.render( this.scene, this.oceanCamera );\n\n};\n\nexport { Ocean };\n"]}