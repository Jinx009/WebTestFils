{"version":3,"sources":["NURBSCurve.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAUA,SACC,KADD,EAEC,OAFD,EAGC,OAHD,QAIO,gCAJP;AAKA,SAAS,UAAT,QAA2B,yBAA3B;;AAGA;;;;AAIA,IAAI,aAAa,UAAW,MAAX,EAAmB,KAAnB,CAAyB,oBAAzB,EAA+C,aAA/C,CAA6D,4BAA7D,EAA2F,SAA3F,CAAqG,oBAArG,EAA2H,OAA3H,CAAmI,oBAAnI,EAA0J;;AAE1K,OAAM,IAAN,CAAY,IAAZ;;AAEA,MAAK,MAAL,GAAc,MAAd;AACA,MAAK,KAAL,GAAa,KAAb;AACA,MAAK,aAAL,GAAqB,EAArB;AACA;AACA,MAAK,SAAL,GAAiB,aAAa,CAA9B;AACA,MAAK,OAAL,GAAe,WAAa,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAhD;AACA,MAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,cAAc,MAAnC,EAA2C,EAAG,CAA9C,EAAkD;;AAEjD;AACA,MAAI,QAAQ,cAAe,CAAf,CAAZ;AACA,OAAK,aAAL,CAAoB,CAApB,IAA0B,IAAI,OAAJ,CAAa,MAAM,CAAnB,EAAsB,MAAM,CAA5B,EAA+B,MAAM,CAArC,EAAwC,MAAM,CAA9C,CAA1B;AAEA;AAED,CAlBD;;AAqBA,WAAW,SAAX,GAAuB,OAAO,MAAP,CAAe,MAAM,SAArB,CAAvB;AACA,WAAW,SAAX,CAAqB,WAArB,GAAmC,UAAnC;;AAGA,WAAW,SAAX,CAAqB,QAArB,GAAgC,UAAW,CAAX,EAAe;;AAE9C,KAAI,IAAI,KAAK,KAAL,CAAY,KAAK,SAAjB,IAA+B,KAAM,KAAK,KAAL,CAAY,KAAK,OAAjB,IAA6B,KAAK,KAAL,CAAY,KAAK,SAAjB,CAAnC,CAAvC,CAF8C,CAE4D;;AAE1G;AACA,KAAI,SAAS,WAAW,gBAAX,CAA6B,KAAK,MAAlC,EAA0C,KAAK,KAA/C,EAAsD,KAAK,aAA3D,EAA0E,CAA1E,CAAb;;AAEA,KAAK,OAAO,CAAP,IAAY,GAAjB,EAAuB;;AAEtB;AACA,SAAO,YAAP,CAAqB,OAAO,CAA5B;AAEA;;AAED,QAAO,IAAI,OAAJ,CAAa,OAAO,CAApB,EAAuB,OAAO,CAA9B,EAAiC,OAAO,CAAxC,CAAP;AAEA,CAhBD;;AAmBA,WAAW,SAAX,CAAqB,UAArB,GAAkC,UAAW,CAAX,EAAe;;AAEhD,KAAI,IAAI,KAAK,KAAL,CAAY,CAAZ,IAAkB,KAAM,KAAK,KAAL,CAAY,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAhC,IAAsC,KAAK,KAAL,CAAY,CAAZ,CAA5C,CAA1B;AACA,KAAI,OAAO,WAAW,oBAAX,CAAiC,KAAK,MAAtC,EAA8C,KAAK,KAAnD,EAA0D,KAAK,aAA/D,EAA8E,CAA9E,EAAiF,CAAjF,CAAX;AACA,KAAI,UAAU,KAAM,CAAN,EAAU,KAAV,EAAd;AACA,SAAQ,SAAR;;AAEA,QAAO,OAAP;AAEA,CATD;;AAWA,SAAS,UAAT","file":"NURBSCurve-compiled.js","sourcesContent":["/**\n * @author renej\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nimport {\n\tCurve,\n\tVector3,\n\tVector4\n} from \"../../../build/three.module.js\";\nimport { NURBSUtils } from \"../curves/NURBSUtils.js\";\n\n\n/**************************************************************\n *\tNURBS curve\n **************************************************************/\n\nvar NURBSCurve = function ( degree, knots /* array of reals */, controlPoints /* array of Vector(2|3|4) */, startKnot /* index in knots */, endKnot /* index in knots */ ) {\n\n\tCurve.call( this );\n\n\tthis.degree = degree;\n\tthis.knots = knots;\n\tthis.controlPoints = [];\n\t// Used by periodic NURBS to remove hidden spans\n\tthis.startKnot = startKnot || 0;\n\tthis.endKnot = endKnot || ( this.knots.length - 1 );\n\tfor ( var i = 0; i < controlPoints.length; ++ i ) {\n\n\t\t// ensure Vector4 for control points\n\t\tvar point = controlPoints[ i ];\n\t\tthis.controlPoints[ i ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t}\n\n};\n\n\nNURBSCurve.prototype = Object.create( Curve.prototype );\nNURBSCurve.prototype.constructor = NURBSCurve;\n\n\nNURBSCurve.prototype.getPoint = function ( t ) {\n\n\tvar u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\n\n\t// following results in (wx, wy, wz, w) homogeneous point\n\tvar hpoint = NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\n\n\tif ( hpoint.w != 1.0 ) {\n\n\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n\t\thpoint.divideScalar( hpoint.w );\n\n\t}\n\n\treturn new Vector3( hpoint.x, hpoint.y, hpoint.z );\n\n};\n\n\nNURBSCurve.prototype.getTangent = function ( t ) {\n\n\tvar u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\n\tvar ders = NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\n\tvar tangent = ders[ 1 ].clone();\n\ttangent.normalize();\n\n\treturn tangent;\n\n};\n\nexport { NURBSCurve };\n"]}