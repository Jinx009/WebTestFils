{"version":3,"sources":["CCDIKSolver.js"],"names":[],"mappings":"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","file":"CCDIKSolver-compiled.js","sourcesContent":["/**\n * @author takahiro / https://github.com/takahirox\n *\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\nimport {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tQuaternion,\n\tSphereBufferGeometry,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar CCDIKSolver = ( function () {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Array<Object>} iks\n\t */\n\tfunction CCDIKSolver( mesh, iks ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.iks = iks || [];\n\n\t\tthis._valid();\n\n\t}\n\n\tCCDIKSolver.prototype = {\n\n\t\tconstructor: CCDIKSolver,\n\n\t\t/**\n\t\t * Update IK bones.\n\t\t *\n\t\t * @return {CCDIKSolver}\n\t\t */\n\t\tupdate: function () {\n\n\t\t\tvar q = new Quaternion();\n\t\t\tvar targetPos = new Vector3();\n\t\t\tvar targetVec = new Vector3();\n\t\t\tvar effectorPos = new Vector3();\n\t\t\tvar effectorVec = new Vector3();\n\t\t\tvar linkPos = new Vector3();\n\t\t\tvar invLinkQ = new Quaternion();\n\t\t\tvar linkScale = new Vector3();\n\t\t\tvar axis = new Vector3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.mesh.skeleton.bones;\n\t\t\t\tvar iks = this.iks;\n\n\t\t\t\t// for reference overhead reduction in loop\n\t\t\t\tvar math = Math;\n\n\t\t\t\tfor ( var i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar ik = iks[ i ];\n\t\t\t\t\tvar effector = bones[ ik.effector ];\n\t\t\t\t\tvar target = bones[ ik.target ];\n\n\t\t\t\t\t// don't use getWorldPosition() here for the performance\n\t\t\t\t\t// because it calls updateMatrixWorld( true ) inside.\n\t\t\t\t\ttargetPos.setFromMatrixPosition( target.matrixWorld );\n\n\t\t\t\t\tvar links = ik.links;\n\t\t\t\t\tvar iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n\t\t\t\t\tfor ( var j = 0; j < iteration; j ++ ) {\n\n\t\t\t\t\t\tvar rotated = false;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = links.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar link = bones[ links[ k ].index ];\n\n\t\t\t\t\t\t\t// skip this link and following links.\n\t\t\t\t\t\t\t// this skip is used for MMD performance optimization.\n\t\t\t\t\t\t\tif ( links[ k ].enabled === false ) break;\n\n\t\t\t\t\t\t\tvar limitation = links[ k ].limitation;\n\t\t\t\t\t\t\tvar rotationMin = links[ k ].rotationMin;\n\t\t\t\t\t\t\tvar rotationMax = links[ k ].rotationMax;\n\n\t\t\t\t\t\t\t// don't use getWorldPosition/Quaternion() here for the performance\n\t\t\t\t\t\t\t// because they call updateMatrixWorld( true ) inside.\n\t\t\t\t\t\t\tlink.matrixWorld.decompose( linkPos, invLinkQ, linkScale );\n\t\t\t\t\t\t\tinvLinkQ.inverse();\n\t\t\t\t\t\t\teffectorPos.setFromMatrixPosition( effector.matrixWorld );\n\n\t\t\t\t\t\t\t// work in link world\n\t\t\t\t\t\t\teffectorVec.subVectors( effectorPos, linkPos );\n\t\t\t\t\t\t\teffectorVec.applyQuaternion( invLinkQ );\n\t\t\t\t\t\t\teffectorVec.normalize();\n\n\t\t\t\t\t\t\ttargetVec.subVectors( targetPos, linkPos );\n\t\t\t\t\t\t\ttargetVec.applyQuaternion( invLinkQ );\n\t\t\t\t\t\t\ttargetVec.normalize();\n\n\t\t\t\t\t\t\tvar angle = targetVec.dot( effectorVec );\n\n\t\t\t\t\t\t\tif ( angle > 1.0 ) {\n\n\t\t\t\t\t\t\t\tangle = 1.0;\n\n\t\t\t\t\t\t\t} else if ( angle < - 1.0 ) {\n\n\t\t\t\t\t\t\t\tangle = - 1.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tangle = math.acos( angle );\n\n\t\t\t\t\t\t\t// skip if changing angle is too small to prevent vibration of bone\n\t\t\t\t\t\t\t// Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\t\t\t\t\t\t\tif ( angle < 1e-5 ) continue;\n\n\t\t\t\t\t\t\tif ( ik.minAngle !== undefined && angle < ik.minAngle ) {\n\n\t\t\t\t\t\t\t\tangle = ik.minAngle;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( ik.maxAngle !== undefined && angle > ik.maxAngle ) {\n\n\t\t\t\t\t\t\t\tangle = ik.maxAngle;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\taxis.crossVectors( effectorVec, targetVec );\n\t\t\t\t\t\t\taxis.normalize();\n\n\t\t\t\t\t\t\tq.setFromAxisAngle( axis, angle );\n\t\t\t\t\t\t\tlink.quaternion.multiply( q );\n\n\t\t\t\t\t\t\t// TODO: re-consider the limitation specification\n\t\t\t\t\t\t\tif ( limitation !== undefined ) {\n\n\t\t\t\t\t\t\t\tvar c = link.quaternion.w;\n\n\t\t\t\t\t\t\t\tif ( c > 1.0 ) c = 1.0;\n\n\t\t\t\t\t\t\t\tvar c2 = math.sqrt( 1 - c * c );\n\t\t\t\t\t\t\t\tlink.quaternion.set( limitation.x * c2,\n\t\t\t\t\t\t\t\t                     limitation.y * c2,\n\t\t\t\t\t\t\t\t                     limitation.z * c2,\n\t\t\t\t\t\t\t\t                     c );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( rotationMin !== undefined ) {\n\n\t\t\t\t\t\t\t\tlink.rotation.setFromVector3(\n\t\t\t\t\t\t\t\t\tlink.rotation\n\t\t\t\t\t\t\t\t\t\t.toVector3( vector )\n\t\t\t\t\t\t\t\t\t\t.max( rotationMin ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( rotationMax !== undefined ) {\n\n\t\t\t\t\t\t\t\tlink.rotation.setFromVector3(\n\t\t\t\t\t\t\t\t\tlink.rotation\n\t\t\t\t\t\t\t\t\t\t.toVector3( vector )\n\t\t\t\t\t\t\t\t\t\t.min( rotationMax ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlink.updateMatrixWorld( true );\n\n\t\t\t\t\t\t\trotated = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! rotated ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t/**\n\t\t * Creates Helper\n\t\t *\n\t\t * @return {CCDIKHelper}\n\t\t */\n\t\tcreateHelper: function () {\n\n\t\t\treturn new CCDIKHelper( this.mesh, this.mesh.geometry.userData.MMD.iks );\n\n\t\t},\n\n\t\t// private methods\n\n\t\t_valid: function () {\n\n\t\t\tvar iks = this.iks;\n\t\t\tvar bones = this.mesh.skeleton.bones;\n\n\t\t\tfor ( var i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\tvar ik = iks[ i ];\n\t\t\t\tvar effector = bones[ ik.effector ];\n\t\t\t\tvar links = ik.links;\n\t\t\t\tvar link0, link1;\n\n\t\t\t\tlink0 = effector;\n\n\t\t\t\tfor ( var j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tlink1 = bones[ links[ j ].index ];\n\n\t\t\t\t\tif ( link0.parent !== link1 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.CCDIKSolver: bone ' + link0.name + ' is not the child of bone ' + link1.name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlink0 = link1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Visualize IK bones\n\t *\n\t * @param {SkinnedMesh} mesh\n\t * @param {Array<Object>} iks\n\t */\n\tfunction CCDIKHelper( mesh, iks ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.root = mesh;\n\t\tthis.iks = iks || [];\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.sphereGeometry = new SphereBufferGeometry( 0.25, 16, 8 );\n\n\t\tthis.targetSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0xff8888 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.effectorSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x88ff88 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.linkSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x8888ff ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.lineMaterial = new LineBasicMaterial( {\n\t\t\tcolor: new Color( 0xff0000 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis._init();\n\n\t}\n\n\tCCDIKHelper.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: CCDIKHelper,\n\n\t\t/**\n\t\t * Updates IK bones visualization.\n\t\t */\n\t\tupdateMatrixWorld: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tvar vector = new Vector3();\n\n\t\t\tfunction getPosition( bone, matrixWorldInv ) {\n\n\t\t\t\treturn vector\n\t\t\t\t\t.setFromMatrixPosition( bone.matrixWorld )\n\t\t\t\t\t.applyMatrix4( matrixWorldInv );\n\n\t\t\t}\n\n\t\t\tfunction setPositionOfBoneToAttributeArray( array, index, bone, matrixWorldInv ) {\n\n\t\t\t\tvar v = getPosition( bone, matrixWorldInv );\n\n\t\t\t\tarray[ index * 3 + 0 ] = v.x;\n\t\t\t\tarray[ index * 3 + 1 ] = v.y;\n\t\t\t\tarray[ index * 3 + 2 ] = v.z;\n\n\t\t\t}\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tvar mesh = this.root;\n\n\t\t\t\tif ( this.visible ) {\n\n\t\t\t\t\tvar offset = 0;\n\n\t\t\t\t\tvar iks = this.iks;\n\t\t\t\t\tvar bones = mesh.skeleton.bones;\n\n\t\t\t\t\tmatrix.getInverse( mesh.matrixWorld );\n\n\t\t\t\t\tfor ( var i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar ik = iks[ i ];\n\n\t\t\t\t\t\tvar targetBone = bones[ ik.target ];\n\t\t\t\t\t\tvar effectorBone = bones[ ik.effector ];\n\n\t\t\t\t\t\tvar targetMesh = this.children[ offset ++ ];\n\t\t\t\t\t\tvar effectorMesh = this.children[ offset ++ ];\n\n\t\t\t\t\t\ttargetMesh.position.copy( getPosition( targetBone, matrix ) );\n\t\t\t\t\t\teffectorMesh.position.copy( getPosition( effectorBone, matrix ) );\n\n\t\t\t\t\t\tfor ( var j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar link = ik.links[ j ];\n\t\t\t\t\t\t\tvar linkBone = bones[ link.index ];\n\n\t\t\t\t\t\t\tvar linkMesh = this.children[ offset ++ ];\n\n\t\t\t\t\t\t\tlinkMesh.position.copy( getPosition( linkBone, matrix ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar line = this.children[ offset ++ ];\n\t\t\t\t\t\tvar array = line.geometry.attributes.position.array;\n\n\t\t\t\t\t\tsetPositionOfBoneToAttributeArray( array, 0, targetBone, matrix );\n\t\t\t\t\t\tsetPositionOfBoneToAttributeArray( array, 1, effectorBone, matrix );\n\n\t\t\t\t\t\tfor ( var j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar link = ik.links[ j ];\n\t\t\t\t\t\t\tvar linkBone = bones[ link.index ];\n\t\t\t\t\t\t\tsetPositionOfBoneToAttributeArray( array, j + 2, linkBone, matrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tline.geometry.attributes.position.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrix.copy( mesh.matrixWorld );\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// private method\n\n\t\t_init: function () {\n\n\t\t\tvar self = this;\n\t\t\tvar iks = this.iks;\n\n\t\t\tfunction createLineGeometry( ik ) {\n\n\t\t\t\tvar geometry = new BufferGeometry();\n\t\t\t\tvar vertices = new Float32Array( ( 2 + ik.links.length ) * 3 );\n\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction createTargetMesh() {\n\n\t\t\t\treturn new Mesh( self.sphereGeometry, self.targetSphereMaterial );\n\n\t\t\t}\n\n\t\t\tfunction createEffectorMesh() {\n\n\t\t\t\treturn new Mesh( self.sphereGeometry, self.effectorSphereMaterial );\n\n\t\t\t}\n\n\t\t\tfunction createLinkMesh() {\n\n\t\t\t\treturn new Mesh( self.sphereGeometry, self.linkSphereMaterial );\n\n\t\t\t}\n\n\t\t\tfunction createLine( ik ) {\n\n\t\t\t\treturn new Line( createLineGeometry( ik ), self.lineMaterial );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\tvar ik = iks[ i ];\n\n\t\t\t\tthis.add( createTargetMesh() );\n\t\t\t\tthis.add( createEffectorMesh() );\n\n\t\t\t\tfor ( var j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.add( createLinkMesh() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.add( createLine( ik ) );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn CCDIKSolver;\n\n} )();\n\nexport { CCDIKSolver };\n"]}