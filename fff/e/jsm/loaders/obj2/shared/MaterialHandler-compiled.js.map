{"version":3,"sources":["MaterialHandler.js"],"names":[],"mappings":"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","file":"MaterialHandler-compiled.js","sourcesContent":["/**\n * @author Kai Salmen / https://kaisalmen.de\n * Development repository: https://github.com/kaisalmen/WWOBJLoader\n */\n\nimport {\n\tLineBasicMaterial,\n\tMaterialLoader,\n\tMeshStandardMaterial,\n\tPointsMaterial,\n\tVertexColors\n} from \"../../../../../build/three.module.js\";\n\n\nconst MaterialHandler = function () {\n\n\tthis.logging = {\n\t\tenabled: false,\n\t\tdebug: false\n\t};\n\n\tthis.callbacks = {\n\t\tonLoadMaterials: null\n\t};\n\tthis.materials = {};\n\n};\n\nMaterialHandler.prototype = {\n\n\tconstructor: MaterialHandler,\n\n\t/**\n\t * Enable or disable logging in general (except warn and error), plus enable or disable debug logging.\n\t *\n\t * @param {boolean} enabled True or false.\n\t * @param {boolean} debug True or false.\n\t */\n\tsetLogging:\tfunction ( enabled, debug ) {\n\n\t\tthis.logging.enabled = enabled === true;\n\t\tthis.logging.debug = debug === true;\n\n\t},\n\n\t_setCallbacks: function ( onLoadMaterials ) {\n\n\t\tif ( onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function ) {\n\n\t\t\tthis.callbacks.onLoadMaterials = onLoadMaterials;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Creates default materials and adds them to the materials object.\n\t *\n\t * @param overrideExisting boolean Override existing material\n\t */\n\tcreateDefaultMaterials: function ( overrideExisting ) {\n\n\t\tlet defaultMaterial = new MeshStandardMaterial( { color: 0xDCF1FF } );\n\t\tdefaultMaterial.name = 'defaultMaterial';\n\n\t\tlet defaultVertexColorMaterial = new MeshStandardMaterial( { color: 0xDCF1FF } );\n\t\tdefaultVertexColorMaterial.name = 'defaultVertexColorMaterial';\n\t\tdefaultVertexColorMaterial.vertexColors = VertexColors;\n\n\t\tlet defaultLineMaterial = new LineBasicMaterial();\n\t\tdefaultLineMaterial.name = 'defaultLineMaterial';\n\n\t\tlet defaultPointMaterial = new PointsMaterial( { size: 0.1 } );\n\t\tdefaultPointMaterial.name = 'defaultPointMaterial';\n\n\t\tlet runtimeMaterials = {};\n\t\truntimeMaterials[ defaultMaterial.name ] = defaultMaterial;\n\t\truntimeMaterials[ defaultVertexColorMaterial.name ] = defaultVertexColorMaterial;\n\t\truntimeMaterials[ defaultLineMaterial.name ] = defaultLineMaterial;\n\t\truntimeMaterials[ defaultPointMaterial.name ] = defaultPointMaterial;\n\n\t\tthis.addMaterials( runtimeMaterials, overrideExisting );\n\n\t},\n\n\t/**\n\t * Updates the materials with contained material objects (sync) or from alteration instructions (async).\n\t *\n\t * @param {Object} materialPayload Material update instructions\n\t * @returns {Object} Map of {@link Material}\n\t */\n\taddPayloadMaterials: function ( materialPayload ) {\n\n\t\tlet material, materialName;\n\t\tlet materialCloneInstructions = materialPayload.materials.materialCloneInstructions;\n\t\tlet newMaterials = {};\n\n\t\tif ( materialCloneInstructions !== undefined && materialCloneInstructions !== null ) {\n\n\t\t\tlet materialNameOrg = materialCloneInstructions.materialNameOrg;\n\t\t\tmaterialNameOrg = ( materialNameOrg !== undefined && materialNameOrg !== null ) ? materialNameOrg : \"\";\n\t\t\tlet materialOrg = this.materials[ materialNameOrg ];\n\t\t\tif ( materialOrg ) {\n\n\t\t\t\tmaterial = materialOrg.clone();\n\n\t\t\t\tmaterialName = materialCloneInstructions.materialName;\n\t\t\t\tmaterial.name = materialName;\n\n\t\t\t\tObject.assign( material, materialCloneInstructions.materialProperties );\n\n\t\t\t\tthis.materials[ materialName ] = material;\n\t\t\t\tnewMaterials[ materialName ] = material;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.logging.enabled ) {\n\n\t\t\t\t\tconsole.info( 'Requested material \"' + materialNameOrg + '\" is not available!' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet materials = materialPayload.materials.serializedMaterials;\n\t\tif ( materials !== undefined && materials !== null && Object.keys( materials ).length > 0 ) {\n\n\t\t\tlet loader = new MaterialLoader();\n\t\t\tlet materialJson;\n\t\t\tfor ( materialName in materials ) {\n\n\t\t\t\tmaterialJson = materials[ materialName ];\n\t\t\t\tif ( materialJson !== undefined && materialJson !== null ) {\n\n\t\t\t\t\tmaterial = loader.parse( materialJson );\n\t\t\t\t\tif ( this.logging.enabled ) {\n\n\t\t\t\t\t\tconsole.info( 'De-serialized material with name \"' + materialName + '\" will be added.' );\n\n\t\t\t\t\t}\n\t\t\t\t\tthis.materials[ materialName ] = material;\n\t\t\t\t\tnewMaterials[ materialName ] = material;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tmaterials = materialPayload.materials.runtimeMaterials;\n\t\tnewMaterials = this.addMaterials( materials, true, newMaterials );\n\n\t\treturn newMaterials;\n\n\t},\n\n\t/**\n\t * Set materials loaded by any supplier of an Array of {@link Material}.\n\t *\n\t * @param materials Object with named {@link Material}\n\t * @param overrideExisting boolean Override existing material\n\t * @param newMaterials [Object] with named {@link Material}\n\t */\n\taddMaterials: function ( materials, overrideExisting, newMaterials ) {\n\n\t\tif ( newMaterials === undefined || newMaterials === null ) {\n\n\t\t\tnewMaterials = {};\n\n\t\t}\n\t\tif ( materials !== undefined && materials !== null && Object.keys( materials ).length > 0 ) {\n\n\t\t\tlet material;\n\t\t\tlet existingMaterial;\n\t\t\tlet add;\n\t\t\tfor ( let materialName in materials ) {\n\n\t\t\t\tmaterial = materials[ materialName ];\n\t\t\t\tadd = overrideExisting === true;\n\t\t\t\tif ( ! add ) {\n\n\t\t\t\t\texistingMaterial = this.materials[ materialName ];\n\t\t\t\t\tadd = ( existingMaterial === null || existingMaterial === undefined );\n\n\t\t\t\t}\n\t\t\t\tif ( add ) {\n\n\t\t\t\t\tthis.materials[ materialName ] = material;\n\t\t\t\t\tnewMaterials[ materialName ] = material;\n\n\t\t\t\t}\n\t\t\t\tif ( this.logging.enabled && this.logging.debug ) {\n\n\t\t\t\t\tconsole.info( 'Material with name \"' + materialName + '\" was added.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.callbacks.onLoadMaterials ) {\n\n\t\t\tthis.callbacks.onLoadMaterials( newMaterials );\n\n\t\t}\n\t\treturn newMaterials;\n\n\t},\n\n\t/**\n\t * Returns the mapping object of material name and corresponding material.\n\t *\n\t * @returns {Object} Map of {@link Material}\n\t */\n\tgetMaterials: function () {\n\n\t\treturn this.materials;\n\n\t},\n\n\t/**\n\t *\n\t * @param {String} materialName\n\t * @returns {Material}\n\t */\n\tgetMaterial: function ( materialName ) {\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\t/**\n\t * Returns the mapping object of material name and corresponding jsonified material.\n\t *\n\t * @returns {Object} Map of Materials in JSON representation\n\t */\n\tgetMaterialsJSON: function () {\n\n\t\tlet materialsJSON = {};\n\t\tlet material;\n\t\tfor ( let materialName in this.materials ) {\n\n\t\t\tmaterial = this.materials[ materialName ];\n\t\t\tmaterialsJSON[ materialName ] = material.toJSON();\n\n\t\t}\n\n\t\treturn materialsJSON;\n\n\t},\n\n\t/**\n\t * Removes all materials\n\t */\n\tclearMaterials: function () {\n\n\t\tthis.materials = {};\n\n\t}\n\n};\n\nexport { MaterialHandler };\n"]}