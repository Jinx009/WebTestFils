{"version":3,"sources":["PCDLoader.js"],"names":[],"mappings":"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","file":"PCDLoader-compiled.js","sourcesContent":["/**\n * @author Filipe Caixeta / http://filipecaixeta.com.br\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Description: A THREE loader for PCD ascii and binary files.\n *\n * Limitations: Compressed binary files are not supported.\n *\n */\n\nimport {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tPoints,\n\tPointsMaterial,\n\tVertexColors\n} from \"../../../build/three.module.js\";\n\nvar PCDLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.littleEndian = true;\n\n};\n\n\nPCDLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: PCDLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( data, url ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow e;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( data, url ) {\n\n\t\t// from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n\n\t\tfunction decompressLZF( inData, outLength ) {\n\n\t\t\tvar inLength = inData.length;\n\t\t\tvar outData = new Uint8Array( outLength );\n\t\t\tvar inPtr = 0;\n\t\t\tvar outPtr = 0;\n\t\t\tvar ctrl;\n\t\t\tvar len;\n\t\t\tvar ref;\n\t\t\tdo {\n\n\t\t\t\tctrl = inData[ inPtr ++ ];\n\t\t\t\tif ( ctrl < ( 1 << 5 ) ) {\n\n\t\t\t\t\tctrl ++;\n\t\t\t\t\tif ( outPtr + ctrl > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\tif ( inPtr + ctrl > inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\toutData[ outPtr ++ ] = inData[ inPtr ++ ];\n\n\t\t\t\t\t} while ( -- ctrl );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlen = ctrl >> 5;\n\t\t\t\t\tref = outPtr - ( ( ctrl & 0x1f ) << 8 ) - 1;\n\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tif ( len === 7 ) {\n\n\t\t\t\t\t\tlen += inData[ inPtr ++ ];\n\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\n\t\t\t\t\t}\n\t\t\t\t\tref -= inData[ inPtr ++ ];\n\t\t\t\t\tif ( outPtr + len + 2 > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\tif ( ref < 0 ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tif ( ref >= outPtr ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\toutData[ outPtr ++ ] = outData[ ref ++ ];\n\n\t\t\t\t\t} while ( -- len + 2 );\n\n\t\t\t\t}\n\n\t\t\t} while ( inPtr < inLength );\n\n\t\t\treturn outData;\n\n\t\t}\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tvar PCDheader = {};\n\t\t\tvar result1 = data.search( /[\\r\\n]DATA\\s(\\S*)\\s/i );\n\t\t\tvar result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec( data.substr( result1 - 1 ) );\n\n\t\t\tPCDheader.data = result2[ 1 ];\n\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\n\t\t\tPCDheader.str = data.substr( 0, PCDheader.headerLen );\n\n\t\t\t// remove comments\n\n\t\t\tPCDheader.str = PCDheader.str.replace( /\\#.*/gi, '' );\n\n\t\t\t// parse\n\n\t\t\tPCDheader.version = /VERSION (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.fields = /FIELDS (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.size = /SIZE (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.type = /TYPE (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.count = /COUNT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.width = /WIDTH (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.height = /HEIGHT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.viewpoint = /VIEWPOINT (.*)/i.exec( PCDheader.str );\n\t\t\tPCDheader.points = /POINTS (.*)/i.exec( PCDheader.str );\n\n\t\t\t// evaluate\n\n\t\t\tif ( PCDheader.version !== null )\n\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\n\n\t\t\tif ( PCDheader.fields !== null )\n\t\t\t\tPCDheader.fields = PCDheader.fields[ 1 ].split( ' ' );\n\n\t\t\tif ( PCDheader.type !== null )\n\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\n\n\t\t\tif ( PCDheader.width !== null )\n\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\n\n\t\t\tif ( PCDheader.height !== null )\n\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\n\n\t\t\tif ( PCDheader.viewpoint !== null )\n\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\n\n\t\t\tif ( PCDheader.points !== null )\n\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\n\n\t\t\tif ( PCDheader.points === null )\n\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\n\n\t\t\tif ( PCDheader.size !== null ) {\n\n\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( PCDheader.count !== null ) {\n\n\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\tPCDheader.count = [];\n\n\t\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\t\tPCDheader.count.push( 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tPCDheader.offset = {};\n\n\t\t\tvar sizeSum = 0;\n\n\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\n\t\t\t\t\tsizeSum += PCDheader.size[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// for binary only\n\n\t\t\tPCDheader.rowSize = sizeSum;\n\n\t\t\treturn PCDheader;\n\n\t\t}\n\n\t\tvar textData = LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t// parse header (always ascii format)\n\n\t\tvar PCDheader = parseHeader( textData );\n\n\t\t// parse data\n\n\t\tvar position = [];\n\t\tvar normal = [];\n\t\tvar color = [];\n\n\t\t// ascii\n\n\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\tvar offset = PCDheader.offset;\n\t\t\tvar pcdData = textData.substr( PCDheader.headerLen );\n\t\t\tvar lines = pcdData.split( '\\n' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tif ( lines[ i ] === '' ) continue;\n\n\t\t\t\tvar line = lines[ i ].split( ' ' );\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\n\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\n\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tvar rgb = parseFloat( line[ offset.rgb ] );\n\t\t\t\t\tvar r = ( rgb >> 16 ) & 0x0000ff;\n\t\t\t\t\tvar g = ( rgb >> 8 ) & 0x0000ff;\n\t\t\t\t\tvar b = ( rgb >> 0 ) & 0x0000ff;\n\t\t\t\t\tcolor.push( r / 255, g / 255, b / 255 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// binary-compressed\n\n\t\t// normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n\t\t// binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n\t\t// that requires a totally different parsing approach compared to non-compressed data\n\n\t\tif ( PCDheader.data === 'binary_compressed' ) {\n\n\t\t\tvar sizes = new Uint32Array( data.slice( PCDheader.headerLen, PCDheader.headerLen + 8 ) );\n\t\t\tvar compressedSize = sizes[ 0 ];\n\t\t\tvar decompressedSize = sizes[ 1 ];\n\t\t\tvar decompressed = decompressLZF( new Uint8Array( data, PCDheader.headerLen + 8, compressedSize ), decompressedSize );\n\t\t\tvar dataview = new DataView( decompressed.buffer );\n\n\t\t\tvar offset = PCDheader.offset;\n\n\t\t\tfor ( var i = 0; i < PCDheader.points; i ++ ) {\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.x ) + PCDheader.size[ 0 ] * i, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.y ) + PCDheader.size[ 1 ] * i, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.z ) + PCDheader.size[ 2 ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * ( offset.rgb + 2 ) + PCDheader.size[ 3 ] * i ) / 255.0 ) );\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * ( offset.rgb + 1 ) + PCDheader.size[ 3 ] * i ) / 255.0 ) );\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * ( offset.rgb + 0 ) + PCDheader.size[ 3 ] * i ) / 255.0 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_x ) + PCDheader.size[ 4 ] * i, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_y ) + PCDheader.size[ 5 ] * i, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_z ) + PCDheader.size[ 6 ] * i, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// binary\n\n\t\tif ( PCDheader.data === 'binary' ) {\n\n\t\t\tvar dataview = new DataView( data, PCDheader.headerLen );\n\t\t\tvar offset = PCDheader.offset;\n\n\t\t\tfor ( var i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\n\n\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 2 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 1 ) / 255.0 );\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 0 ) / 255.0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( position.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\t\tif ( normal.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal, 3 ) );\n\t\tif ( color.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color, 3 ) );\n\n\t\tgeometry.computeBoundingSphere();\n\n\t\t// build material\n\n\t\tvar material = new PointsMaterial( { size: 0.005 } );\n\n\t\tif ( color.length > 0 ) {\n\n\t\t\tmaterial.vertexColors = VertexColors;\n\n\t\t} else {\n\n\t\t\tmaterial.color.setHex( Math.random() * 0xffffff );\n\n\t\t}\n\n\t\t// build point cloud\n\n\t\tvar mesh = new Points( geometry, material );\n\t\tvar name = url.split( '' ).reverse().join( '' );\n\t\tname = /([^\\/]*)/.exec( name );\n\t\tname = name[ 1 ].split( '' ).reverse().join( '' );\n\t\tmesh.name = name;\n\n\t\treturn mesh;\n\n\t}\n\n} );\n\nexport { PCDLoader };\n"]}