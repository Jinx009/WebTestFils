{"version":3,"sources":["VRMLoader.js"],"names":[],"mappings":"AAAA;;;;AAIA,SACC,MADD,QAEO,gCAFP;AAGA,SAAS,UAAT,QAA2B,0BAA3B;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,YAAc,YAAY;;AAE7B,UAAS,SAAT,CAAoB,OAApB,EAA8B;;AAE7B,MAAK,eAAe,SAApB,EAAgC;;AAE/B,SAAM,IAAI,KAAJ,CAAW,qCAAX,CAAN;AAEA;;AAED,SAAO,IAAP,CAAa,IAAb,EAAmB,OAAnB;;AAEA,OAAK,UAAL,GAAkB,IAAI,UAAJ,CAAgB,KAAK,OAArB,CAAlB;AAEA;;AAED,WAAU,SAAV,GAAsB,OAAO,MAAP,CAAe,OAAO,MAAP,CAAe,OAAO,SAAtB,CAAf,EAAkD;;AAEvE,eAAa,SAF0D;;AAIvE,QAAM,UAAW,GAAX,EAAgB,MAAhB,EAAwB,UAAxB,EAAoC,OAApC,EAA8C;;AAEnD,OAAI,QAAQ,IAAZ;;AAEA,QAAK,UAAL,CAAgB,IAAhB,CAAsB,GAAtB,EAA2B,UAAW,IAAX,EAAkB;;AAE5C,UAAM,KAAN,CAAa,IAAb,EAAmB,MAAnB;AAEA,IAJD,EAIG,UAJH,EAIe,OAJf;AAMA,GAdsE;;AAgBvE,kBAAgB,UAAW,WAAX,EAAyB;;AAExC,QAAK,UAAL,CAAgB,cAAhB,CAAgC,WAAhC;AACA,UAAO,IAAP;AAEA,GArBsE;;AAuBvE,SAAO,UAAW,IAAX,EAAiB,MAAjB,EAA0B;;AAEhC;AACA;AACA;;AAEA;;AAEA,UAAQ,IAAR;AAEA;;AAjCsE,EAAlD,CAAtB;;AAqCA,QAAO,SAAP;AAEA,CAvDe,EAAhB;;AAyDA,SAAS,SAAT","file":"VRMLoader-compiled.js","sourcesContent":["/**\n * @author Takahiro / https://github.com/takahirox\n */\n\nimport {\n\tLoader\n} from \"../../../build/three.module.js\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\n\n// VRM Specification: https://dwango.github.io/vrm/vrm_spec/\n//\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nvar VRMLoader = ( function () {\n\n\tfunction VRMLoader( manager ) {\n\n\t\tif ( GLTFLoader === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.VRMLoader: Import GLTFLoader.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.gltfLoader = new GLTFLoader( this.manager );\n\n\t}\n\n\tVRMLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: VRMLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.gltfLoader.load( url, function ( gltf ) {\n\n\t\t\t\tscope.parse( gltf, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.glTFLoader.setDRACOLoader( dracoLoader );\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( gltf, onLoad ) {\n\n\t\t\t// var gltfParser = gltf.parser;\n\t\t\t// var gltfExtensions = gltf.userData.gltfExtensions || {};\n\t\t\t// var vrmExtension = gltfExtensions.VRM || {};\n\n\t\t\t// handle VRM Extension here\n\n\t\t\tonLoad( gltf );\n\n\t\t}\n\n\t} );\n\n\treturn VRMLoader;\n\n} )();\n\nexport { VRMLoader };\n"]}