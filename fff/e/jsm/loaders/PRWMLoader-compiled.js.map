{"version":3,"sources":["PRWMLoader.js"],"names":[],"mappings":"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","file":"PRWMLoader-compiled.js","sourcesContent":["/**\n * @author Kevin Chapelier / https://github.com/kchapelier\n * See https://github.com/kchapelier/PRWM for more informations about this file format\n */\n\nimport {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tLoader\n} from \"../../../build/three.module.js\";\n\nvar PRWMLoader = ( function () {\n\n\tvar bigEndianPlatform = null;\n\n\t/**\n\t * Check if the endianness of the platform is big-endian (most significant bit first)\n\t * @returns {boolean} True if big-endian, false if little-endian\n\t */\n\tfunction isBigEndianPlatform() {\n\n\t\tif ( bigEndianPlatform === null ) {\n\n\t\t\tvar buffer = new ArrayBuffer( 2 ),\n\t\t\t\tuint8Array = new Uint8Array( buffer ),\n\t\t\t\tuint16Array = new Uint16Array( buffer );\n\n\t\t\tuint8Array[ 0 ] = 0xAA; // set first byte\n\t\t\tuint8Array[ 1 ] = 0xBB; // set second byte\n\t\t\tbigEndianPlatform = ( uint16Array[ 0 ] === 0xAABB );\n\n\t\t}\n\n\t\treturn bigEndianPlatform;\n\n\t}\n\n\t// match the values defined in the spec to the TypedArray types\n\tvar InvertedEncodingTypes = [\n\t\tnull,\n\t\tFloat32Array,\n\t\tnull,\n\t\tInt8Array,\n\t\tInt16Array,\n\t\tnull,\n\t\tInt32Array,\n\t\tUint8Array,\n\t\tUint16Array,\n\t\tnull,\n\t\tUint32Array\n\t];\n\n\t// define the method to use on a DataView, corresponding the TypedArray type\n\tvar getMethods = {\n\t\tUint16Array: 'getUint16',\n\t\tUint32Array: 'getUint32',\n\t\tInt16Array: 'getInt16',\n\t\tInt32Array: 'getInt32',\n\t\tFloat32Array: 'getFloat32',\n\t\tFloat64Array: 'getFloat64'\n\t};\n\n\n\tfunction copyFromBuffer( sourceArrayBuffer, viewType, position, length, fromBigEndian ) {\n\n\t\tvar bytesPerElement = viewType.BYTES_PER_ELEMENT,\n\t\t\tresult;\n\n\t\tif ( fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1 ) {\n\n\t\t\tresult = new viewType( sourceArrayBuffer, position, length );\n\n\t\t} else {\n\n\t\t\tvar readView = new DataView( sourceArrayBuffer, position, length * bytesPerElement ),\n\t\t\t\tgetMethod = getMethods[ viewType.name ],\n\t\t\t\tlittleEndian = ! fromBigEndian,\n\t\t\t\ti = 0;\n\n\t\t\tresult = new viewType( length );\n\n\t\t\tfor ( ; i < length; i ++ ) {\n\n\t\t\t\tresult[ i ] = readView[ getMethod ]( i * bytesPerElement, littleEndian );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\n\tfunction decodePrwm( buffer ) {\n\n\t\tvar array = new Uint8Array( buffer ),\n\t\t\tversion = array[ 0 ],\n\t\t\tflags = array[ 1 ],\n\t\t\tindexedGeometry = !! ( flags >> 7 & 0x01 ),\n\t\t\tindicesType = flags >> 6 & 0x01,\n\t\t\tbigEndian = ( flags >> 5 & 0x01 ) === 1,\n\t\t\tattributesNumber = flags & 0x1F,\n\t\t\tvaluesNumber = 0,\n\t\t\tindicesNumber = 0;\n\n\t\tif ( bigEndian ) {\n\n\t\t\tvaluesNumber = ( array[ 2 ] << 16 ) + ( array[ 3 ] << 8 ) + array[ 4 ];\n\t\t\tindicesNumber = ( array[ 5 ] << 16 ) + ( array[ 6 ] << 8 ) + array[ 7 ];\n\n\t\t} else {\n\n\t\t\tvaluesNumber = array[ 2 ] + ( array[ 3 ] << 8 ) + ( array[ 4 ] << 16 );\n\t\t\tindicesNumber = array[ 5 ] + ( array[ 6 ] << 8 ) + ( array[ 7 ] << 16 );\n\n\t\t}\n\n\t\t/** PRELIMINARY CHECKS **/\n\n\t\tif ( version === 0 ) {\n\n\t\t\tthrow new Error( 'PRWM decoder: Invalid format version: 0' );\n\n\t\t} else if ( version !== 1 ) {\n\n\t\t\tthrow new Error( 'PRWM decoder: Unsupported format version: ' + version );\n\n\t\t}\n\n\t\tif ( ! indexedGeometry ) {\n\n\t\t\tif ( indicesType !== 0 ) {\n\n\t\t\t\tthrow new Error( 'PRWM decoder: Indices type must be set to 0 for non-indexed geometries' );\n\n\t\t\t} else if ( indicesNumber !== 0 ) {\n\n\t\t\t\tthrow new Error( 'PRWM decoder: Number of indices must be set to 0 for non-indexed geometries' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/** PARSING **/\n\n\t\tvar pos = 8;\n\n\t\tvar attributes = {},\n\t\t\tattributeName,\n\t\t\tchar,\n\t\t\tattributeType,\n\t\t\tcardinality,\n\t\t\tencodingType,\n\t\t\tarrayType,\n\t\t\tvalues,\n\t\t\tindices,\n\t\t\ti;\n\n\t\tfor ( i = 0; i < attributesNumber; i ++ ) {\n\n\t\t\tattributeName = '';\n\n\t\t\twhile ( pos < array.length ) {\n\n\t\t\t\tchar = array[ pos ];\n\t\t\t\tpos ++;\n\n\t\t\t\tif ( char === 0 ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tattributeName += String.fromCharCode( char );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tflags = array[ pos ];\n\n\t\t\tattributeType = flags >> 7 & 0x01;\n\t\t\tcardinality = ( flags >> 4 & 0x03 ) + 1;\n\t\t\tencodingType = flags & 0x0F;\n\t\t\tarrayType = InvertedEncodingTypes[ encodingType ];\n\n\t\t\tpos ++;\n\n\t\t\t// padding to next multiple of 4\n\t\t\tpos = Math.ceil( pos / 4 ) * 4;\n\n\t\t\tvalues = copyFromBuffer( buffer, arrayType, pos, cardinality * valuesNumber, bigEndian );\n\n\t\t\tpos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n\n\t\t\tattributes[ attributeName ] = {\n\t\t\t\ttype: attributeType,\n\t\t\t\tcardinality: cardinality,\n\t\t\t\tvalues: values\n\t\t\t};\n\n\t\t}\n\n\t\tpos = Math.ceil( pos / 4 ) * 4;\n\n\t\tindices = null;\n\n\t\tif ( indexedGeometry ) {\n\n\t\t\tindices = copyFromBuffer(\n\t\t\t\tbuffer,\n\t\t\t\tindicesType === 1 ? Uint32Array : Uint16Array,\n\t\t\t\tpos,\n\t\t\t\tindicesNumber,\n\t\t\t\tbigEndian\n\t\t\t);\n\n\t\t}\n\n\t\treturn {\n\t\t\tversion: version,\n\t\t\tattributes: attributes,\n\t\t\tindices: indices\n\t\t};\n\n\t}\n\n\t// Define the public interface\n\n\tfunction PRWMLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tPRWMLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: PRWMLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\turl = url.replace( /\\*/g, isBigEndianPlatform() ? 'be' : 'le' );\n\n\t\t\tloader.load( url, function ( arrayBuffer ) {\n\n\t\t\t\tonLoad( scope.parse( arrayBuffer ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( arrayBuffer ) {\n\n\t\t\tvar data = decodePrwm( arrayBuffer ),\n\t\t\t\tattributesKey = Object.keys( data.attributes ),\n\t\t\t\tbufferGeometry = new BufferGeometry(),\n\t\t\t\tattribute,\n\t\t\t\ti;\n\n\t\t\tfor ( i = 0; i < attributesKey.length; i ++ ) {\n\n\t\t\t\tattribute = data.attributes[ attributesKey[ i ] ];\n\t\t\t\tbufferGeometry.setAttribute( attributesKey[ i ], new BufferAttribute( attribute.values, attribute.cardinality, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tif ( data.indices !== null ) {\n\n\t\t\t\tbufferGeometry.setIndex( new BufferAttribute( data.indices, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn bufferGeometry;\n\n\t\t}\n\n\t} );\n\n\tPRWMLoader.isBigEndianPlatform = function () {\n\n\t\treturn isBigEndianPlatform();\n\n\t};\n\n\treturn PRWMLoader;\n\n} )();\n\nexport { PRWMLoader };\n"]}