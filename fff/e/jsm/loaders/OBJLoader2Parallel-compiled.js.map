{"version":3,"sources":["OBJLoader2Parallel.js"],"names":[],"mappings":"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","file":"OBJLoader2Parallel-compiled.js","sourcesContent":["/**\n * @author Kai Salmen / https://kaisalmen.de\n * Development repository: https://github.com/kaisalmen/WWOBJLoader\n */\n\n// Imports only related to wrapper\nimport {\n\tObject3D\n} from \"../../../build/three.module.js\";\nimport {\n\tCodeBuilderInstructions,\n\tWorkerExecutionSupport\n} from \"./obj2/worker/main/WorkerExecutionSupport.js\";\nimport { CodeSerializer } from \"./obj2/utils/CodeSerializer.js\";\nimport { OBJLoader2 } from \"./OBJLoader2.js\";\n\n// Imports only related to worker (when standard workers (modules aren't supported) are used)\nimport { OBJLoader2Parser } from \"./obj2/worker/parallel/OBJLoader2Parser.js\";\nimport {\n\tWorkerRunner,\n\tDefaultWorkerPayloadHandler,\n\tObjectManipulator\n} from \"./obj2/worker/parallel/WorkerRunner.js\";\n\n\n/**\n * Creates a new OBJLoader2Parallel. Use it to load OBJ data from files or to parse OBJ data from arraybuffer.\n * It extends {@link OBJLoader2} with the capability to run the parser in a web worker.\n *\n * @param [LoadingManager] manager The loadingManager for the loader to use. Default is {@link LoadingManager}\n * @constructor\n */\nconst OBJLoader2Parallel = function ( manager ) {\n\n\tOBJLoader2.call( this, manager );\n\tthis.preferJsmWorker = false;\n\n\tthis.executeParallel = true;\n\tthis.workerExecutionSupport = new WorkerExecutionSupport();\n\n};\n\nOBJLoader2Parallel.OBJLOADER2_PARALLEL_VERSION = '3.1.2';\nconsole.info( 'Using OBJLoader2Parallel version: ' + OBJLoader2Parallel.OBJLOADER2_PARALLEL_VERSION );\n\n\nOBJLoader2Parallel.prototype = Object.assign( Object.create( OBJLoader2.prototype ), {\n\n\tconstructor: OBJLoader2Parallel,\n\n\t/**\n\t * Execution of parse in parallel via Worker is default, but normal {OBJLoader2} parsing can be enforced via false here.\n\t *\n\t * @param executeParallel True or False\n\t * @return {OBJLoader2Parallel}\n\t */\n\tsetExecuteParallel: function ( executeParallel ) {\n\n\t\tthis.executeParallel = executeParallel === true;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Set whether jsm modules in workers should be used. This requires browser support which is currently only experimental.\n\t * @param preferJsmWorker True or False\n\t * @return {OBJLoader2Parallel}\n\t */\n\tsetPreferJsmWorker: function ( preferJsmWorker ) {\n\n\t\tthis.preferJsmWorker = preferJsmWorker === true;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Allow to get hold of {@link WorkerExecutionSupport} for configuration purposes.\n\t * @return {WorkerExecutionSupport}\n\t */\n\tgetWorkerExecutionSupport: function () {\n\n\t\treturn this.workerExecutionSupport;\n\n\t},\n\n\t/**\n\t * Provide instructions on what is to be contained in the worker.\n\t * @return {CodeBuilderInstructions}\n\t */\n\tbuildWorkerCode: function () {\n\n\t\tlet codeBuilderInstructions = new CodeBuilderInstructions( true, true, this.preferJsmWorker );\n\t\tif ( codeBuilderInstructions.isSupportsJsmWorker() ) {\n\n\t\t\tcodeBuilderInstructions.setJsmWorkerFile( '../examples/loaders/jsm/obj2/worker/parallel/jsm/OBJLoader2Worker.js' );\n\n\t\t}\n\t\tif ( codeBuilderInstructions.isSupportsStandardWorker() ) {\n\n\t\t\tlet codeOBJLoader2Parser = CodeSerializer.serializeClass( 'OBJLoader2Parser', OBJLoader2Parser );\n\t\t\tlet codeObjectManipulator = CodeSerializer.serializeObject( 'ObjectManipulator', ObjectManipulator );\n\t\t\tlet codeParserPayloadHandler = CodeSerializer.serializeClass( 'DefaultWorkerPayloadHandler', DefaultWorkerPayloadHandler );\n\t\t\tlet codeWorkerRunner = CodeSerializer.serializeClass( 'WorkerRunner', WorkerRunner );\n\n\t\t\tcodeBuilderInstructions.addCodeFragment( codeOBJLoader2Parser );\n\t\t\tcodeBuilderInstructions.addCodeFragment( codeObjectManipulator );\n\t\t\tcodeBuilderInstructions.addCodeFragment( codeParserPayloadHandler );\n\t\t\tcodeBuilderInstructions.addCodeFragment( codeWorkerRunner );\n\n\t\t\tcodeBuilderInstructions.addStartCode( 'new WorkerRunner( new DefaultWorkerPayloadHandler( new OBJLoader2Parser() ) );' );\n\n\t\t}\n\t\treturn codeBuilderInstructions;\n\n\t},\n\n\t/**\n\t * See {@link OBJLoader2.load}\n\t */\n\tload: function ( content, onLoad, onFileLoadProgress, onError, onMeshAlter ) {\n\n \t\tlet scope = this;\n\t\tfunction interceptOnLoad( object3d, message ) {\n\n\t\t\tif ( object3d.name === 'OBJLoader2ParallelDummy' ) {\n\n\t\t\t\tif ( scope.parser.logging.enabled && scope.parser.logging.debug ) {\n\n\t\t\t\t\tconsole.debug( 'Received dummy answer from OBJLoader2Parallel#parse' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tonLoad( object3d, message );\n\n\t\t\t}\n\n\t\t}\n\n\t\tOBJLoader2.prototype.load.call( this, content, interceptOnLoad, onFileLoadProgress, onError, onMeshAlter );\n\n\t},\n\n\t/**\n\t * See {@link OBJLoader2.parse}\n\t * The callback onLoad needs to be set to be able to receive the content if used in parallel mode.\n\t * Fallback is possible via {@link OBJLoader2Parallel#setExecuteParallel}.\n\t */\n\tparse: function ( content ) {\n\n\t\tif ( this.executeParallel ) {\n\n\t\t\tif ( this.parser.callbacks.onLoad === this.parser._onLoad ) {\n\n\t\t\t\tthrow \"No callback other than the default callback was provided! Aborting!\";\n\n\t\t\t}\n\t\t\t// check if worker has been initialize before. If yes, skip init\n\t\t\tif ( ! this.workerExecutionSupport.isWorkerLoaded( this.preferJsmWorker ) ) {\n\n\t\t\t\tthis.workerExecutionSupport.buildWorker( this.buildWorkerCode() );\n\n\t\t\t\tlet scope = this;\n\t\t\t\tlet scopedOnAssetAvailable = function ( payload ) {\n\n\t\t\t\t\tscope._onAssetAvailable( payload );\n\n\t\t\t\t};\n\t\t\t\tfunction scopedOnLoad( message ) {\n\n\t\t\t\t\tscope.parser.callbacks.onLoad( scope.baseObject3d, message );\n\n\t\t\t\t}\n\n\t\t\t\tthis.workerExecutionSupport.updateCallbacks( scopedOnAssetAvailable, scopedOnLoad );\n\n\t\t\t}\n\n\t\t\t// Create default materials beforehand, but do not override previously set materials (e.g. during init)\n\t\t\tthis.materialHandler.createDefaultMaterials( false );\n\n\t\t\tthis.workerExecutionSupport.executeParallel(\n\t\t\t\t{\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tmodelName: this.modelName,\n\t\t\t\t\t\tinstanceNo: this.instanceNo,\n\t\t\t\t\t\tuseIndices: this.parser.useIndices,\n\t\t\t\t\t\tdisregardNormals: this.parser.disregardNormals,\n\t\t\t\t\t\tmaterialPerSmoothingGroup: this.parser.materialPerSmoothingGroup,\n\t\t\t\t\t\tuseOAsMesh: this.parser.useOAsMesh,\n\t\t\t\t\t\tmaterials: this.materialHandler.getMaterialsJSON()\n\t\t\t\t\t},\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tinput: content,\n\t\t\t\t\t\toptions: null\n\t\t\t\t\t},\n\t\t\t\t\tlogging: {\n\t\t\t\t\t\tenabled: this.parser.logging.enabled,\n\t\t\t\t\t\tdebug: this.parser.logging.debug\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tlet dummy = new Object3D();\n\t\t\tdummy.name = 'OBJLoader2ParallelDummy';\n\t\t\treturn dummy;\n\n\t\t} else {\n\n\t\t\treturn OBJLoader2.prototype.parse.call( this, content );\n\n\t\t}\n\n\t},\n\n} );\n\nexport { OBJLoader2Parallel };\n"]}