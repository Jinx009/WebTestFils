{"version":3,"sources":["AssimpLoader.js"],"names":[],"mappings":"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","file":"AssimpLoader-compiled.js","sourcesContent":["/**\n * @author Virtulous / https://virtulo.us/\n */\n\nimport {\n\tBone,\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tLoader,\n\tLoaderUtils,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tObject3D,\n\tQuaternion,\n\tSkeleton,\n\tSkinnedMesh,\n\tTextureLoader,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar AssimpLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n};\n\nAssimpLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: AssimpLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( buffer, path ) {\n\n\t\tvar textureLoader = new TextureLoader( this.manager );\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\tvar Virtulous = {};\n\n\t\tVirtulous.KeyFrame = function ( time, matrix ) {\n\n\t\t\tthis.time = time;\n\t\t\tthis.matrix = matrix.clone();\n\t\t\tthis.position = new Vector3();\n\t\t\tthis.quaternion = new Quaternion();\n\t\t\tthis.scale = new Vector3( 1, 1, 1 );\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\t\tthis.clone = function () {\n\n\t\t\t\tvar n = new Virtulous.KeyFrame( this.time, this.matrix );\n\t\t\t\treturn n;\n\n\t\t\t};\n\t\t\tthis.lerp = function ( nextKey, time ) {\n\n\t\t\t\ttime -= this.time;\n\t\t\t\tvar dist = ( nextKey.time - this.time );\n\t\t\t\tvar l = time / dist;\n\t\t\t\tvar l2 = 1 - l;\n\t\t\t\tvar keypos = this.position;\n\t\t\t\tvar keyrot = this.quaternion;\n\t\t\t\t//      var keyscl =  key.parentspaceScl || key.scl;\n\t\t\t\tvar key2pos = nextKey.position;\n\t\t\t\tvar key2rot = nextKey.quaternion;\n\t\t\t\t//  var key2scl =  key2.parentspaceScl || key2.scl;\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n\t\t\t\tVirtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n\t\t\t\t//     tempAniScale.x = keyscl[0] * l2 + key2scl[0] * l;\n\t\t\t\t//     tempAniScale.y = keyscl[1] * l2 + key2scl[1] * l;\n\t\t\t\t//     tempAniScale.z = keyscl[2] * l2 + key2scl[2] * l;\n\t\t\t\tVirtulous.KeyFrame.tempAniQuat.set( keyrot.x, keyrot.y, keyrot.z, keyrot.w );\n\t\t\t\tVirtulous.KeyFrame.tempAniQuat.slerp( key2rot, l );\n\t\t\t\treturn Virtulous.KeyFrame.tempAniMatrix.compose( Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale );\n\n\t\t\t};\n\n\t\t};\n\n\t\tVirtulous.KeyFrame.tempAniPos = new Vector3();\n\t\tVirtulous.KeyFrame.tempAniQuat = new Quaternion();\n\t\tVirtulous.KeyFrame.tempAniScale = new Vector3( 1, 1, 1 );\n\t\tVirtulous.KeyFrame.tempAniMatrix = new Matrix4();\n\t\tVirtulous.KeyFrameTrack = function () {\n\n\t\t\tthis.keys = [];\n\t\t\tthis.target = null;\n\t\t\tthis.time = 0;\n\t\t\tthis.length = 0;\n\t\t\tthis._accelTable = {};\n\t\t\tthis.fps = 20;\n\t\t\tthis.addKey = function ( key ) {\n\n\t\t\t\tthis.keys.push( key );\n\n\t\t\t};\n\t\t\tthis.init = function () {\n\n\t\t\t\tthis.sortKeys();\n\n\t\t\t\tif ( this.keys.length > 0 )\n\t\t\t\t\tthis.length = this.keys[ this.keys.length - 1 ].time;\n\t\t\t\telse\n\t\t\t\t\tthis.length = 0;\n\n\t\t\t\tif ( ! this.fps ) return;\n\n\t\t\t\tfor ( var j = 0; j < this.length * this.fps; j ++ ) {\n\n\t\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\t\t\t\t\tif ( this.keys[ i ].time == j ) {\n\n\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( this.keys[ i ].time < j / this.fps && this.keys[ i + 1 ] && this.keys[ i + 1 ].time >= j / this.fps ) {\n\n\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tthis.parseFromThree = function ( data ) {\n\n\t\t\t\tvar fps = data.fps;\n\t\t\t\tthis.target = data.node;\n\t\t\t\tvar track = data.hierarchy[ 0 ].keys;\n\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\n\n\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].targets[ 0 ].data ) );\n\n\t\t\t\t}\n\t\t\t\tthis.init();\n\n\t\t\t};\n\n\t\t\tthis.parseFromCollada = function ( data ) {\n\n\t\t\t\tvar track = data.keys;\n\t\t\t\tvar fps = this.fps;\n\n\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\n\n\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].matrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.init();\n\n\t\t\t};\n\n\t\t\tthis.sortKeys = function () {\n\n\t\t\t\tthis.keys.sort( this.keySortFunc );\n\n\t\t\t};\n\n\t\t\tthis.keySortFunc = function ( a, b ) {\n\n\t\t\t\treturn a.time - b.time;\n\n\t\t\t};\n\n\t\t\tthis.clone = function () {\n\n\t\t\t\tvar t = new Virtulous.KeyFrameTrack();\n\t\t\t\tt.target = this.target;\n\t\t\t\tt.time = this.time;\n\t\t\t\tt.length = this.length;\n\n\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\t\t\t\tt.addKey( this.keys[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tt.init();\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t\tthis.reTarget = function ( root, compareitor ) {\n\n\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\n\t\t\t\tthis.target = compareitor( root, this.target );\n\n\t\t\t};\n\n\t\t\tthis.keySearchAccel = function ( time ) {\n\n\t\t\t\ttime *= this.fps;\n\t\t\t\ttime = Math.floor( time );\n\t\t\t\treturn this._accelTable[ time ] || 0;\n\n\t\t\t};\n\n\t\t\tthis.setTime = function ( time ) {\n\n\t\t\t\ttime = Math.abs( time );\n\t\t\t\tif ( this.length )\n\t\t\t\t\ttime = time % this.length + .05;\n\t\t\t\tvar key0 = null;\n\t\t\t\tvar key1 = null;\n\n\t\t\t\tfor ( var i = this.keySearchAccel( time ); i < this.keys.length; i ++ ) {\n\n\t\t\t\t\tif ( this.keys[ i ].time == time ) {\n\n\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\tkey1 = this.keys[ i ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else if ( this.keys[ i ].time < time && this.keys[ i + 1 ] && this.keys[ i + 1 ].time > time ) {\n\n\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\tkey1 = this.keys[ i + 1 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else if ( this.keys[ i ].time < time && i == this.keys.length - 1 ) {\n\n\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\tkey1 = this.keys[ 0 ].clone();\n\t\t\t\t\t\tkey1.time += this.length + .05;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( key0 && key1 && key0 !== key1 ) {\n\n\t\t\t\t\tthis.target.matrixAutoUpdate = false;\n\t\t\t\t\tthis.target.matrix.copy( key0.lerp( key1, time ) );\n\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( key0 && key1 && key0 == key1 ) {\n\n\t\t\t\t\tthis.target.matrixAutoUpdate = false;\n\t\t\t\t\tthis.target.matrix.copy( key0.matrix );\n\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t};\n\n\t\tVirtulous.TrackTargetNodeNameCompare = function ( root, target ) {\n\n\t\t\tfunction find( node, name ) {\n\n\t\t\t\tif ( node.name == name )\n\t\t\t\t\treturn node;\n\n\t\t\t\tfor ( var i = 0; i < node.children.length; i ++ ) {\n\n\t\t\t\t\tvar r = find( node.children[ i ], name );\n\t\t\t\t\tif ( r ) return r;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn find( root, target.name );\n\n\t\t};\n\n\t\tVirtulous.Animation = function () {\n\n\t\t\tthis.tracks = [];\n\t\t\tthis.length = 0;\n\n\t\t\tthis.addTrack = function ( track ) {\n\n\t\t\t\tthis.tracks.push( track );\n\t\t\t\tthis.length = Math.max( track.length, this.length );\n\n\t\t\t};\n\n\t\t\tthis.setTime = function ( time ) {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ )\n\t\t\t\t\tthis.tracks[ i ].setTime( time );\n\n\t\t\t};\n\n\t\t\tthis.clone = function ( target, compareitor ) {\n\n\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\n\t\t\t\tvar n = new Virtulous.Animation();\n\t\t\t\tn.target = target;\n\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\t\tvar track = this.tracks[ i ].clone();\n\t\t\t\t\ttrack.reTarget( target, compareitor );\n\t\t\t\t\tn.addTrack( track );\n\n\t\t\t\t}\n\n\t\t\t\treturn n;\n\n\t\t\t};\n\n\t\t};\n\n\t\tvar ASSBIN_CHUNK_AICAMERA = 0x1234;\n\t\tvar ASSBIN_CHUNK_AILIGHT = 0x1235;\n\t\tvar ASSBIN_CHUNK_AITEXTURE = 0x1236;\n\t\tvar ASSBIN_CHUNK_AIMESH = 0x1237;\n\t\tvar ASSBIN_CHUNK_AINODEANIM = 0x1238;\n\t\tvar ASSBIN_CHUNK_AISCENE = 0x1239;\n\t\tvar ASSBIN_CHUNK_AIBONE = 0x123a;\n\t\tvar ASSBIN_CHUNK_AIANIMATION = 0x123b;\n\t\tvar ASSBIN_CHUNK_AINODE = 0x123c;\n\t\tvar ASSBIN_CHUNK_AIMATERIAL = 0x123d;\n\t\tvar ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\n\t\tvar ASSBIN_MESH_HAS_POSITIONS = 0x1;\n\t\tvar ASSBIN_MESH_HAS_NORMALS = 0x2;\n\t\tvar ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\n\t\tvar ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\n\t\tvar ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\n\t\tvar AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n\t\tvar AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n\t\t//var aiLightSource_UNDEFINED = 0x0;\n\t\t//! A directional light source has a well-defined direction\n\t\t//! but is infinitely far away. That's quite a good\n\t\t//! approximation for sun light.\n\t\tvar aiLightSource_DIRECTIONAL = 0x1;\n\t\t//! A point light source has a well-defined position\n\t\t//! in space but no direction - it emits light in all\n\t\t//! directions. A normal bulb is a point light.\n\t\t//var aiLightSource_POINT = 0x2;\n\t\t//! A spot light source emits light in a specific\n\t\t//! angle. It has a position and a direction it is pointing to.\n\t\t//! A good example for a spot light is a light spot in\n\t\t//! sport arenas.\n\t\tvar aiLightSource_SPOT = 0x3;\n\t\t//! The generic light level of the world, including the bounces\n\t\t//! of all other lightsources.\n\t\t//! Typically, there's at most one ambient light in a scene.\n\t\t//! This light type doesn't have a valid position, direction, or\n\t\t//! other properties, just a color.\n\t\t//var aiLightSource_AMBIENT = 0x4;\n\t\t/** Flat shading. Shading is done on per-face base,\n\t\t *  diffuse only. Also known as 'faceted shading'.\n\t\t */\n\t\t//var aiShadingMode_Flat = 0x1;\n\t\t/** Simple Gouraud shading.\n\t\t */\n\t\t//var aiShadingMode_Gouraud = 0x2;\n\t\t/** Phong-Shading -\n\t\t */\n\t\t//var aiShadingMode_Phong = 0x3;\n\t\t/** Phong-Blinn-Shading\n\t\t */\n\t\t//var aiShadingMode_Blinn = 0x4;\n\t\t/** Toon-Shading per pixel\n\t\t *\n\t\t *  Also known as 'comic' shader.\n\t\t */\n\t\t//var aiShadingMode_Toon = 0x5;\n\t\t/** OrenNayar-Shading per pixel\n\t\t *\n\t\t *  Extension to standard Lambertian shading, taking the\n\t\t *  roughness of the material into account\n\t\t */\n\t\t//var aiShadingMode_OrenNayar = 0x6;\n\t\t/** Minnaert-Shading per pixel\n\t\t *\n\t\t *  Extension to standard Lambertian shading, taking the\n\t\t *  \"darkness\" of the material into account\n\t\t */\n\t\t//var aiShadingMode_Minnaert = 0x7;\n\t\t/** CookTorrance-Shading per pixel\n\t\t *\n\t\t *  Special shader for metallic surfaces.\n\t\t */\n\t\t//var aiShadingMode_CookTorrance = 0x8;\n\t\t/** No shading at all. Constant light influence of 1.0.\n\t\t */\n\t\t//var aiShadingMode_NoShading = 0x9;\n\t\t/** Fresnel shading\n\t\t */\n\t\t//var aiShadingMode_Fresnel = 0xa;\n\t\t//var aiTextureType_NONE = 0x0;\n\t\t/** The texture is combined with the result of the diffuse\n\t\t *  lighting equation.\n\t\t */\n\t\tvar aiTextureType_DIFFUSE = 0x1;\n\t\t/** The texture is combined with the result of the specular\n\t\t *  lighting equation.\n\t\t */\n\t\t//var aiTextureType_SPECULAR = 0x2;\n\t\t/** The texture is combined with the result of the ambient\n\t\t *  lighting equation.\n\t\t */\n\t\t//var aiTextureType_AMBIENT = 0x3;\n\t\t/** The texture is added to the result of the lighting\n\t\t *  calculation. It isn't influenced by incoming light.\n\t\t */\n\t\t//var aiTextureType_EMISSIVE = 0x4;\n\t\t/** The texture is a height map.\n\t\t *\n\t\t *  By convention, higher gray-scale values stand for\n\t\t *  higher elevations from the base height.\n\t\t */\n\t\t//var aiTextureType_HEIGHT = 0x5;\n\t\t/** The texture is a (tangent space) normal-map.\n\t\t *\n\t\t *  Again, there are several conventions for tangent-space\n\t\t *  normal maps. Assimp does (intentionally) not\n\t\t *  distinguish here.\n\t\t */\n\t\tvar aiTextureType_NORMALS = 0x6;\n\t\t/** The texture defines the glossiness of the material.\n\t\t *\n\t\t *  The glossiness is in fact the exponent of the specular\n\t\t *  (phong) lighting equation. Usually there is a conversion\n\t\t *  function defined to map the linear color values in the\n\t\t *  texture to a suitable exponent. Have fun.\n\t\t */\n\t\t//var aiTextureType_SHININESS = 0x7;\n\t\t/** The texture defines per-pixel opacity.\n\t\t *\n\t\t *  Usually 'white' means opaque and 'black' means\n\t\t *  'transparency'. Or quite the opposite. Have fun.\n\t\t */\n\t\tvar aiTextureType_OPACITY = 0x8;\n\t\t/** Displacement texture\n\t\t *\n\t\t *  The exact purpose and format is application-dependent.\n\t\t *  Higher color values stand for higher vertex displacements.\n\t\t */\n\t\t//var aiTextureType_DISPLACEMENT = 0x9;\n\t\t/** Lightmap texture (aka Ambient Occlusion)\n\t\t *\n\t\t *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are\n\t\t *  covered by this material property. The texture contains a\n\t\t *  scaling value for the final color value of a pixel. Its\n\t\t *  intensity is not affected by incoming light.\n\t\t */\n\t\tvar aiTextureType_LIGHTMAP = 0xA;\n\t\t/** Reflection texture\n\t\t *\n\t\t * Contains the color of a perfect mirror reflection.\n\t\t * Rarely used, almost never for real-time applications.\n\t\t */\n\t\t//var aiTextureType_REFLECTION = 0xB;\n\t\t/** Unknown texture\n\t\t *\n\t\t *  A texture reference that does not match any of the definitions\n\t\t *  above is considered to be 'unknown'. It is still imported,\n\t\t *  but is excluded from any further postprocessing.\n\t\t */\n\t\t//var aiTextureType_UNKNOWN = 0xC;\n\t\tvar BONESPERVERT = 4;\n\n\t\tfunction ASSBIN_MESH_HAS_TEXCOORD( n ) {\n\n\t\t\treturn ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n\n\t\t}\n\n\t\tfunction ASSBIN_MESH_HAS_COLOR( n ) {\n\n\t\t\treturn ASSBIN_MESH_HAS_COLOR_BASE << n;\n\n\t\t}\n\n\t\tfunction markBones( scene ) {\n\n\t\t\tfor ( var i in scene.mMeshes ) {\n\n\t\t\t\tvar mesh = scene.mMeshes[ i ];\n\t\t\t\tfor ( var k in mesh.mBones ) {\n\n\t\t\t\t\tvar boneNode = scene.findNode( mesh.mBones[ k ].mName );\n\t\t\t\t\tif ( boneNode )\n\t\t\t\t\t\tboneNode.isBone = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tfunction cloneTreeToBones( root, scene ) {\n\n\t\t\tvar rootBone = new Bone();\n\t\t\trootBone.matrix.copy( root.matrix );\n\t\t\trootBone.matrixWorld.copy( root.matrixWorld );\n\t\t\trootBone.position.copy( root.position );\n\t\t\trootBone.quaternion.copy( root.quaternion );\n\t\t\trootBone.scale.copy( root.scale );\n\t\t\tscene.nodeCount ++;\n\t\t\trootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n\n\t\t\tif ( ! scene.nodeToBoneMap[ root.name ] )\n\t\t\t\tscene.nodeToBoneMap[ root.name ] = [];\n\t\t\tscene.nodeToBoneMap[ root.name ].push( rootBone );\n\t\t\tfor ( var i in root.children ) {\n\n\t\t\t\tvar child = cloneTreeToBones( root.children[ i ], scene );\n\t\t\t\trootBone.add( child );\n\n\t\t\t}\n\n\t\t\treturn rootBone;\n\n\t\t}\n\n\t\tfunction sortWeights( indexes, weights ) {\n\n\t\t\tvar pairs = [];\n\n\t\t\tfor ( var i = 0; i < indexes.length; i ++ ) {\n\n\t\t\t\tpairs.push( {\n\t\t\t\t\ti: indexes[ i ],\n\t\t\t\t\tw: weights[ i ]\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tpairs.sort( function ( a, b ) {\n\n\t\t\t\treturn b.w - a.w;\n\n\t\t\t } );\n\n\t\t\twhile ( pairs.length < 4 ) {\n\n\t\t\t\tpairs.push( {\n\t\t\t\t\ti: 0,\n\t\t\t\t\tw: 0\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( pairs.length > 4 )\n\t\t\t\tpairs.length = 4;\n\t\t\tvar sum = 0;\n\n\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\tsum += pairs[ i ].w * pairs[ i ].w;\n\n\t\t\t}\n\n\t\t\tsum = Math.sqrt( sum );\n\n\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\tpairs[ i ].w = pairs[ i ].w / sum;\n\t\t\t\tindexes[ i ] = pairs[ i ].i;\n\t\t\t\tweights[ i ] = pairs[ i ].w;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction findMatchingBone( root, name ) {\n\n\t\t\tif ( root.name.indexOf( \"bone_\" + name ) == 0 )\n\t\t\t\treturn root;\n\n\t\t\tfor ( var i in root.children ) {\n\n\t\t\t\tvar ret = findMatchingBone( root.children[ i ], name );\n\n\t\t\t\tif ( ret )\n\t\t\t\t\treturn ret;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\tfunction aiMesh() {\n\n\t\t\tthis.mPrimitiveTypes = 0;\n\t\t\tthis.mNumVertices = 0;\n\t\t\tthis.mNumFaces = 0;\n\t\t\tthis.mNumBones = 0;\n\t\t\tthis.mMaterialIndex = 0;\n\t\t\tthis.mVertices = [];\n\t\t\tthis.mNormals = [];\n\t\t\tthis.mTangents = [];\n\t\t\tthis.mBitangents = [];\n\t\t\tthis.mColors = [\n\t\t\t\t[]\n\t\t\t];\n\t\t\tthis.mTextureCoords = [\n\t\t\t\t[]\n\t\t\t];\n\t\t\tthis.mFaces = [];\n\t\t\tthis.mBones = [];\n\t\t\tthis.hookupSkeletons = function ( scene ) {\n\n\t\t\t\tif ( this.mBones.length == 0 ) return;\n\n\t\t\t\tvar allBones = [];\n\t\t\t\tvar offsetMatrix = [];\n\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ 0 ].mName );\n\n\t\t\t\twhile ( skeletonRoot.mParent && skeletonRoot.mParent.isBone ) {\n\n\t\t\t\t\tskeletonRoot = skeletonRoot.mParent;\n\n\t\t\t\t}\n\n\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\n\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\n\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\n\n\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\n\n\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\n\n\t\t\t\t\tif ( bone ) {\n\n\t\t\t\t\t\tvar tbone = bone;\n\t\t\t\t\t\tallBones.push( tbone );\n\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\n\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ i ].mName );\n\t\t\t\t\t\tif ( ! skeletonRoot ) return;\n\t\t\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\n\t\t\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\n\t\t\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\n\t\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\n\t\t\t\t\t\tvar tbone = bone;\n\t\t\t\t\t\tallBones.push( tbone );\n\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\n\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tvar skeleton = new Skeleton( allBones, offsetMatrix );\n\n\t\t\t\tthis.threeNode.bind( skeleton, new Matrix4() );\n\t\t\t\tthis.threeNode.material.skinning = true;\n\n\t\t\t};\n\n\t\t\tthis.toTHREE = function ( scene ) {\n\n\t\t\t\tif ( this.threeNode ) return this.threeNode;\n\t\t\t\tvar geometry = new BufferGeometry();\n\t\t\t\tvar mat;\n\t\t\t\tif ( scene.mMaterials[ this.mMaterialIndex ] )\n\t\t\t\t\tmat = scene.mMaterials[ this.mMaterialIndex ].toTHREE( scene );\n\t\t\t\telse\n\t\t\t\t\tmat = new MeshLambertMaterial();\n\t\t\t\tgeometry.setIndex( new BufferAttribute( new Uint32Array( this.mIndexArray ), 1 ) );\n\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( this.mVertexBuffer, 3 ) );\n\t\t\t\tif ( this.mNormalBuffer && this.mNormalBuffer.length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( this.mNormalBuffer, 3 ) );\n\t\t\t\tif ( this.mColorBuffer && this.mColorBuffer.length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( this.mColorBuffer, 4 ) );\n\t\t\t\tif ( this.mTexCoordsBuffers[ 0 ] && this.mTexCoordsBuffers[ 0 ].length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'uv', new BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 0 ] ), 2 ) );\n\t\t\t\tif ( this.mTexCoordsBuffers[ 1 ] && this.mTexCoordsBuffers[ 1 ].length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'uv1', new BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 1 ] ), 2 ) );\n\t\t\t\tif ( this.mTangentBuffer && this.mTangentBuffer.length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'tangents', new BufferAttribute( this.mTangentBuffer, 3 ) );\n\t\t\t\tif ( this.mBitangentBuffer && this.mBitangentBuffer.length > 0 )\n\t\t\t\t\tgeometry.setAttribute( 'bitangents', new BufferAttribute( this.mBitangentBuffer, 3 ) );\n\t\t\t\tif ( this.mBones.length > 0 ) {\n\n\t\t\t\t\tvar weights = [];\n\t\t\t\t\tvar bones = [];\n\n\t\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\n\n\t\t\t\t\t\tfor ( var j = 0; j < this.mBones[ i ].mWeights.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar weight = this.mBones[ i ].mWeights[ j ];\n\t\t\t\t\t\t\tif ( weight ) {\n\n\t\t\t\t\t\t\t\tif ( ! weights[ weight.mVertexId ] ) weights[ weight.mVertexId ] = [];\n\t\t\t\t\t\t\t\tif ( ! bones[ weight.mVertexId ] ) bones[ weight.mVertexId ] = [];\n\t\t\t\t\t\t\t\tweights[ weight.mVertexId ].push( weight.mWeight );\n\t\t\t\t\t\t\t\tbones[ weight.mVertexId ].push( parseInt( i ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i in bones ) {\n\n\t\t\t\t\t\tsortWeights( bones[ i ], weights[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar _weights = [];\n\t\t\t\t\tvar _bones = [];\n\n\t\t\t\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\t\t\t\tfor ( var j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\tif ( weights[ i ] && bones[ i ] ) {\n\n\t\t\t\t\t\t\t\t_weights.push( weights[ i ][ j ] );\n\t\t\t\t\t\t\t\t_bones.push( bones[ i ][ j ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t_weights.push( 0 );\n\t\t\t\t\t\t\t\t_bones.push( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'skinWeight', new BufferAttribute( new Float32Array( _weights ), BONESPERVERT ) );\n\t\t\t\t\tgeometry.setAttribute( 'skinIndex', new BufferAttribute( new Float32Array( _bones ), BONESPERVERT ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( this.mBones.length == 0 )\n\t\t\t\t\tmesh = new Mesh( geometry, mat );\n\n\t\t\t\tif ( this.mBones.length > 0 ) {\n\n\t\t\t\t\tmesh = new SkinnedMesh( geometry, mat );\n\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t}\n\n\t\t\t\tthis.threeNode = mesh;\n\t\t\t\t//mesh.matrixAutoUpdate = false;\n\t\t\t\treturn mesh;\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiFace() {\n\n\t\t\tthis.mNumIndices = 0;\n\t\t\tthis.mIndices = [];\n\n\t\t}\n\n\t\tfunction aiVector3D() {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\treturn new Vector3( this.x, this.y, this.z );\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiColor3D() {\n\n\t\t\tthis.r = 0;\n\t\t\tthis.g = 0;\n\t\t\tthis.b = 0;\n\t\t\tthis.a = 0;\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\treturn new Color( this.r, this.g, this.b );\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiQuaternion() {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\treturn new Quaternion( this.x, this.y, this.z, this.w );\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiVertexWeight() {\n\n\t\t\tthis.mVertexId = 0;\n\t\t\tthis.mWeight = 0;\n\n\t\t}\n\n\t\tfunction aiString() {\n\n\t\t\tthis.data = [];\n\t\t\tthis.toString = function () {\n\n\t\t\t\tvar str = '';\n\t\t\t\tthis.data.forEach( function ( i ) {\n\n\t\t\t\t\tstr += ( String.fromCharCode( i ) );\n\n\t\t\t\t} );\n\t\t\t\treturn str.replace( /[^\\x20-\\x7E]+/g, '' );\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiVectorKey() {\n\n\t\t\tthis.mTime = 0;\n\t\t\tthis.mValue = null;\n\n\t\t}\n\n\t\tfunction aiQuatKey() {\n\n\t\t\tthis.mTime = 0;\n\t\t\tthis.mValue = null;\n\n\t\t}\n\n\t\tfunction aiNode() {\n\n\t\t\tthis.mName = '';\n\t\t\tthis.mTransformation = [];\n\t\t\tthis.mNumChildren = 0;\n\t\t\tthis.mNumMeshes = 0;\n\t\t\tthis.mMeshes = [];\n\t\t\tthis.mChildren = [];\n\t\t\tthis.toTHREE = function ( scene ) {\n\n\t\t\t\tif ( this.threeNode ) return this.threeNode;\n\t\t\t\tvar o = new Object3D();\n\t\t\t\to.name = this.mName;\n\t\t\t\to.matrix = this.mTransformation.toTHREE();\n\n\t\t\t\tfor ( var i = 0; i < this.mChildren.length; i ++ ) {\n\n\t\t\t\t\to.add( this.mChildren[ i ].toTHREE( scene ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.mMeshes.length; i ++ ) {\n\n\t\t\t\t\to.add( scene.mMeshes[ this.mMeshes[ i ] ].toTHREE( scene ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.threeNode = o;\n\t\t\t\t//o.matrixAutoUpdate = false;\n\t\t\t\to.matrix.decompose( o.position, o.quaternion, o.scale );\n\t\t\t\treturn o;\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiBone() {\n\n\t\t\tthis.mName = '';\n\t\t\tthis.mNumWeights = 0;\n\t\t\tthis.mOffsetMatrix = 0;\n\n\t\t}\n\n\t\tfunction aiMaterialProperty() {\n\n\t\t\tthis.mKey = \"\";\n\t\t\tthis.mSemantic = 0;\n\t\t\tthis.mIndex = 0;\n\t\t\tthis.mData = [];\n\t\t\tthis.mDataLength = 0;\n\t\t\tthis.mType = 0;\n\t\t\tthis.dataAsColor = function () {\n\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\tvar reader = new DataView( array );\n\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\tvar g = reader.getFloat32( 4, true );\n\t\t\t\tvar b = reader.getFloat32( 8, true );\n\t\t\t\t//var a = reader.getFloat32(12, true);\n\t\t\t\treturn new Color( r, g, b );\n\n\t\t\t};\n\n\t\t\tthis.dataAsFloat = function () {\n\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\tvar reader = new DataView( array );\n\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\treturn r;\n\n\t\t\t};\n\n\t\t\tthis.dataAsBool = function () {\n\n\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\tvar reader = new DataView( array );\n\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\treturn !! r;\n\n\t\t\t};\n\n\t\t\tthis.dataAsString = function () {\n\n\t\t\t\tvar s = new aiString();\n\t\t\t\ts.data = this.mData;\n\t\t\t\treturn s.toString();\n\n\t\t\t};\n\n\t\t\tthis.dataAsMap = function () {\n\n\t\t\t\tvar s = new aiString();\n\t\t\t\ts.data = this.mData;\n\t\t\t\tvar path = s.toString();\n\t\t\t\tpath = path.replace( /\\\\/g, '/' );\n\n\t\t\t\tif ( path.indexOf( '/' ) != - 1 ) {\n\n\t\t\t\t\tpath = path.substr( path.lastIndexOf( '/' ) + 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn textureLoader.load( path );\n\n\t\t\t};\n\n\t\t}\n\t\tvar namePropMapping = {\n\n\t\t\t\"?mat.name\": \"name\",\n\t\t\t\"$mat.shadingm\": \"shading\",\n\t\t\t\"$mat.twosided\": \"twoSided\",\n\t\t\t\"$mat.wireframe\": \"wireframe\",\n\t\t\t\"$clr.ambient\": \"ambient\",\n\t\t\t\"$clr.diffuse\": \"color\",\n\t\t\t\"$clr.specular\": \"specular\",\n\t\t\t\"$clr.emissive\": \"emissive\",\n\t\t\t\"$clr.transparent\": \"transparent\",\n\t\t\t\"$clr.reflective\": \"reflect\",\n\t\t\t\"$mat.shininess\": \"shininess\",\n\t\t\t\"$mat.reflectivity\": \"reflectivity\",\n\t\t\t\"$mat.refracti\": \"refraction\",\n\t\t\t\"$tex.file\": \"map\"\n\n\t\t};\n\n\t\tvar nameTypeMapping = {\n\n\t\t\t\"?mat.name\": \"string\",\n\t\t\t\"$mat.shadingm\": \"bool\",\n\t\t\t\"$mat.twosided\": \"bool\",\n\t\t\t\"$mat.wireframe\": \"bool\",\n\t\t\t\"$clr.ambient\": \"color\",\n\t\t\t\"$clr.diffuse\": \"color\",\n\t\t\t\"$clr.specular\": \"color\",\n\t\t\t\"$clr.emissive\": \"color\",\n\t\t\t\"$clr.transparent\": \"color\",\n\t\t\t\"$clr.reflective\": \"color\",\n\t\t\t\"$mat.shininess\": \"float\",\n\t\t\t\"$mat.reflectivity\": \"float\",\n\t\t\t\"$mat.refracti\": \"float\",\n\t\t\t\"$tex.file\": \"map\"\n\n\t\t};\n\n\t\tfunction aiMaterial() {\n\n\t\t\tthis.mNumAllocated = 0;\n\t\t\tthis.mNumProperties = 0;\n\t\t\tthis.mProperties = [];\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\tvar mat = new MeshPhongMaterial();\n\n\t\t\t\tfor ( var i = 0; i < this.mProperties.length; i ++ ) {\n\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'float' )\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsFloat();\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'color' )\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsColor();\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'bool' )\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsBool();\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'string' )\n\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsString();\n\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'map' ) {\n\n\t\t\t\t\t\tvar prop = this.mProperties[ i ];\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_DIFFUSE )\n\t\t\t\t\t\t\tmat.map = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_NORMALS )\n\t\t\t\t\t\t\tmat.normalMap = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_LIGHTMAP )\n\t\t\t\t\t\t\tmat.lightMap = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_OPACITY )\n\t\t\t\t\t\t\tmat.alphaMap = this.mProperties[ i ].dataAsMap();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmat.ambient.r = .53;\n\t\t\t\tmat.ambient.g = .53;\n\t\t\t\tmat.ambient.b = .53;\n\t\t\t\tmat.color.r = 1;\n\t\t\t\tmat.color.g = 1;\n\t\t\t\tmat.color.b = 1;\n\t\t\t\treturn mat;\n\n\t\t\t};\n\n\t\t}\n\n\n\t\tfunction veclerp( v1, v2, l ) {\n\n\t\t\tvar v = new Vector3();\n\t\t\tvar lm1 = 1 - l;\n\t\t\tv.x = v1.x * l + v2.x * lm1;\n\t\t\tv.y = v1.y * l + v2.y * lm1;\n\t\t\tv.z = v1.z * l + v2.z * lm1;\n\t\t\treturn v;\n\n\t\t}\n\n\t\tfunction quatlerp( q1, q2, l ) {\n\n\t\t\treturn q1.clone().slerp( q2, 1 - l );\n\n\t\t}\n\n\t\tfunction sampleTrack( keys, time, lne, lerp ) {\n\n\t\t\tif ( keys.length == 1 ) return keys[ 0 ].mValue.toTHREE();\n\n\t\t\tvar dist = Infinity;\n\t\t\tvar key = null;\n\t\t\tvar nextKey = null;\n\n\t\t\tfor ( var i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\tvar timeDist = Math.abs( keys[ i ].mTime - time );\n\n\t\t\t\tif ( timeDist < dist && keys[ i ].mTime <= time ) {\n\n\t\t\t\t\tdist = timeDist;\n\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\tnextKey = keys[ i + 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! key ) {\n\n\t\t\t\treturn null;\n\n\t\t\t} else if ( nextKey ) {\n\n\t\t\t\tvar dT = nextKey.mTime - key.mTime;\n\t\t\t\tvar T = key.mTime - time;\n\t\t\t\tvar l = T / dT;\n\n\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\n\n\t\t\t} else {\n\n\t\t\t\tnextKey = keys[ 0 ].clone();\n\t\t\t\tnextKey.mTime += lne;\n\n\t\t\t\tvar dT = nextKey.mTime - key.mTime;\n\t\t\t\tvar T = key.mTime - time;\n\t\t\t\tvar l = T / dT;\n\n\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction aiNodeAnim() {\n\n\t\t\tthis.mNodeName = \"\";\n\t\t\tthis.mNumPositionKeys = 0;\n\t\t\tthis.mNumRotationKeys = 0;\n\t\t\tthis.mNumScalingKeys = 0;\n\t\t\tthis.mPositionKeys = [];\n\t\t\tthis.mRotationKeys = [];\n\t\t\tthis.mScalingKeys = [];\n\t\t\tthis.mPreState = \"\";\n\t\t\tthis.mPostState = \"\";\n\t\t\tthis.init = function ( tps ) {\n\n\t\t\t\tif ( ! tps ) tps = 1;\n\n\t\t\t\tfunction t( t ) {\n\n\t\t\t\t\tt.mTime /= tps;\n\n\t\t\t\t}\n\n\t\t\t\tthis.mPositionKeys.forEach( t );\n\t\t\t\tthis.mRotationKeys.forEach( t );\n\t\t\t\tthis.mScalingKeys.forEach( t );\n\n\t\t\t};\n\n\t\t\tthis.sortKeys = function () {\n\n\t\t\t\tfunction comp( a, b ) {\n\n\t\t\t\t\treturn a.mTime - b.mTime;\n\n\t\t\t\t}\n\n\t\t\t\tthis.mPositionKeys.sort( comp );\n\t\t\t\tthis.mRotationKeys.sort( comp );\n\t\t\t\tthis.mScalingKeys.sort( comp );\n\n\t\t\t};\n\n\t\t\tthis.getLength = function () {\n\n\t\t\t\treturn Math.max(\n\t\t\t\t\tMath.max.apply( null, this.mPositionKeys.map( function ( a ) {\n\n\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t\t} ) ),\n\t\t\t\t\tMath.max.apply( null, this.mRotationKeys.map( function ( a ) {\n\n\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t\t} ) ),\n\t\t\t\t\tMath.max.apply( null, this.mScalingKeys.map( function ( a ) {\n\n\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t } ) )\n\t\t\t\t);\n\n\t\t\t};\n\n\t\t\tthis.toTHREE = function ( o ) {\n\n\t\t\t\tthis.sortKeys();\n\t\t\t\tvar length = this.getLength();\n\t\t\t\tvar track = new Virtulous.KeyFrameTrack();\n\n\t\t\t\tfor ( var i = 0; i < length; i += .05 ) {\n\n\t\t\t\t\tvar matrix = new Matrix4();\n\t\t\t\t\tvar time = i;\n\t\t\t\t\tvar pos = sampleTrack( this.mPositionKeys, time, length, veclerp );\n\t\t\t\t\tvar scale = sampleTrack( this.mScalingKeys, time, length, veclerp );\n\t\t\t\t\tvar rotation = sampleTrack( this.mRotationKeys, time, length, quatlerp );\n\t\t\t\t\tmatrix.compose( pos, rotation, scale );\n\n\t\t\t\t\tvar key = new Virtulous.KeyFrame( time, matrix );\n\t\t\t\t\ttrack.addKey( key );\n\n\t\t\t\t}\n\n\t\t\t\ttrack.target = o.findNode( this.mNodeName ).toTHREE();\n\n\t\t\t\tvar tracks = [ track ];\n\n\t\t\t\tif ( o.nodeToBoneMap[ this.mNodeName ] ) {\n\n\t\t\t\t\tfor ( var i = 0; i < o.nodeToBoneMap[ this.mNodeName ].length; i ++ ) {\n\n\t\t\t\t\t\tvar t2 = track.clone();\n\t\t\t\t\t\tt2.target = o.nodeToBoneMap[ this.mNodeName ][ i ];\n\t\t\t\t\t\ttracks.push( t2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn tracks;\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiAnimation() {\n\n\t\t\tthis.mName = \"\";\n\t\t\tthis.mDuration = 0;\n\t\t\tthis.mTicksPerSecond = 0;\n\t\t\tthis.mNumChannels = 0;\n\t\t\tthis.mChannels = [];\n\t\t\tthis.toTHREE = function ( root ) {\n\n\t\t\t\tvar animationHandle = new Virtulous.Animation();\n\n\t\t\t\tfor ( var i in this.mChannels ) {\n\n\t\t\t\t\tthis.mChannels[ i ].init( this.mTicksPerSecond );\n\n\t\t\t\t\tvar tracks = this.mChannels[ i ].toTHREE( root );\n\n\t\t\t\t\tfor ( var j in tracks ) {\n\n\t\t\t\t\t\ttracks[ j ].init();\n\t\t\t\t\t\tanimationHandle.addTrack( tracks[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tanimationHandle.length = Math.max.apply( null, animationHandle.tracks.map( function ( e ) {\n\n\t\t\t\t\treturn e.length;\n\n\t\t\t\t} ) );\n\t\t\t\treturn animationHandle;\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiTexture() {\n\n\t\t\tthis.mWidth = 0;\n\t\t\tthis.mHeight = 0;\n\t\t\tthis.texAchFormatHint = [];\n\t\t\tthis.pcData = [];\n\n\t\t}\n\n\t\tfunction aiLight() {\n\n\t\t\tthis.mName = '';\n\t\t\tthis.mType = 0;\n\t\t\tthis.mAttenuationConstant = 0;\n\t\t\tthis.mAttenuationLinear = 0;\n\t\t\tthis.mAttenuationQuadratic = 0;\n\t\t\tthis.mAngleInnerCone = 0;\n\t\t\tthis.mAngleOuterCone = 0;\n\t\t\tthis.mColorDiffuse = null;\n\t\t\tthis.mColorSpecular = null;\n\t\t\tthis.mColorAmbient = null;\n\n\t\t}\n\n\t\tfunction aiCamera() {\n\n\t\t\tthis.mName = '';\n\t\t\tthis.mPosition = null;\n\t\t\tthis.mLookAt = null;\n\t\t\tthis.mUp = null;\n\t\t\tthis.mHorizontalFOV = 0;\n\t\t\tthis.mClipPlaneNear = 0;\n\t\t\tthis.mClipPlaneFar = 0;\n\t\t\tthis.mAspect = 0;\n\n\t\t}\n\n\t\tfunction aiScene() {\n\n\t\t\tthis.versionMajor = 0;\n\t\t\tthis.versionMinor = 0;\n\t\t\tthis.versionRevision = 0;\n\t\t\tthis.compileFlags = 0;\n\t\t\tthis.mFlags = 0;\n\t\t\tthis.mNumMeshes = 0;\n\t\t\tthis.mNumMaterials = 0;\n\t\t\tthis.mNumAnimations = 0;\n\t\t\tthis.mNumTextures = 0;\n\t\t\tthis.mNumLights = 0;\n\t\t\tthis.mNumCameras = 0;\n\t\t\tthis.mRootNode = null;\n\t\t\tthis.mMeshes = [];\n\t\t\tthis.mMaterials = [];\n\t\t\tthis.mAnimations = [];\n\t\t\tthis.mLights = [];\n\t\t\tthis.mCameras = [];\n\t\t\tthis.nodeToBoneMap = {};\n\t\t\tthis.findNode = function ( name, root ) {\n\n\t\t\t\tif ( ! root ) {\n\n\t\t\t\t\troot = this.mRootNode;\n\n\t\t\t\t}\n\n\t\t\t\tif ( root.mName == name ) {\n\n\t\t\t\t\treturn root;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < root.mChildren.length; i ++ ) {\n\n\t\t\t\t\tvar ret = this.findNode( name, root.mChildren[ i ] );\n\t\t\t\t\tif ( ret ) return ret;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\tthis.nodeCount = 0;\n\n\t\t\t\tmarkBones( this );\n\n\t\t\t\tvar o = this.mRootNode.toTHREE( this );\n\n\t\t\t\tfor ( var i in this.mMeshes )\n\t\t\t\t\tthis.mMeshes[ i ].hookupSkeletons( this );\n\n\t\t\t\tif ( this.mAnimations.length > 0 ) {\n\n\t\t\t\t\tvar a = this.mAnimations[ 0 ].toTHREE( this );\n\n\t\t\t\t}\n\n\t\t\t\treturn { object: o, animation: a };\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction aiMatrix4() {\n\n\t\t\tthis.elements = [\n\t\t\t\t[],\n\t\t\t\t[],\n\t\t\t\t[],\n\t\t\t\t[]\n\t\t\t];\n\t\t\tthis.toTHREE = function () {\n\n\t\t\t\tvar m = new Matrix4();\n\n\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\n\n\t\t\t\t\t\tm.elements[ i * 4 + i2 ] = this.elements[ i2 ][ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn m;\n\n\t\t\t};\n\n\t\t}\n\n\t\tvar littleEndian = true;\n\n\t\tfunction readFloat( dataview ) {\n\n\t\t\tvar val = dataview.getFloat32( dataview.readOffset, littleEndian );\n\t\t\tdataview.readOffset += 4;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_double( dataview ) {\n\n\t\t\tvar val = dataview.getFloat64( dataview.readOffset, littleEndian );\n\t\t\tdataview.readOffset += 8;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_uint8_t( dataview ) {\n\n\t\t\tvar val = dataview.getUint8( dataview.readOffset );\n\t\t\tdataview.readOffset += 1;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_uint16_t( dataview ) {\n\n\t\t\tvar val = dataview.getUint16( dataview.readOffset, littleEndian );\n\t\t\tdataview.readOffset += 2;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_unsigned_int( dataview ) {\n\n\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\n\t\t\tdataview.readOffset += 4;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_uint32_t( dataview ) {\n\n\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\n\t\t\tdataview.readOffset += 4;\n\t\t\treturn val;\n\n\t\t}\n\n\t\tfunction Read_aiVector3D( stream ) {\n\n\t\t\tvar v = new aiVector3D();\n\t\t\tv.x = readFloat( stream );\n\t\t\tv.y = readFloat( stream );\n\t\t\tv.z = readFloat( stream );\n\t\t\treturn v;\n\n\t\t}\n\n\t\tfunction Read_aiColor3D( stream ) {\n\n\t\t\tvar c = new aiColor3D();\n\t\t\tc.r = readFloat( stream );\n\t\t\tc.g = readFloat( stream );\n\t\t\tc.b = readFloat( stream );\n\t\t\treturn c;\n\n\t\t}\n\n\t\tfunction Read_aiQuaternion( stream ) {\n\n\t\t\tvar v = new aiQuaternion();\n\t\t\tv.w = readFloat( stream );\n\t\t\tv.x = readFloat( stream );\n\t\t\tv.y = readFloat( stream );\n\t\t\tv.z = readFloat( stream );\n\t\t\treturn v;\n\n\t\t}\n\n\t\tfunction Read_aiString( stream ) {\n\n\t\t\tvar s = new aiString();\n\t\t\tvar stringlengthbytes = Read_unsigned_int( stream );\n\t\t\tstream.ReadBytes( s.data, 1, stringlengthbytes );\n\t\t\treturn s.toString();\n\n\t\t}\n\n\t\tfunction Read_aiVertexWeight( stream ) {\n\n\t\t\tvar w = new aiVertexWeight();\n\t\t\tw.mVertexId = Read_unsigned_int( stream );\n\t\t\tw.mWeight = readFloat( stream );\n\t\t\treturn w;\n\n\t\t}\n\n\t\tfunction Read_aiMatrix4x4( stream ) {\n\n\t\t\tvar m = new aiMatrix4();\n\n\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\n\n\t\t\t\t\tm.elements[ i ][ i2 ] = readFloat( stream );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn m;\n\n\t\t}\n\n\t\tfunction Read_aiVectorKey( stream ) {\n\n\t\t\tvar v = new aiVectorKey();\n\t\t\tv.mTime = Read_double( stream );\n\t\t\tv.mValue = Read_aiVector3D( stream );\n\t\t\treturn v;\n\n\t\t}\n\n\t\tfunction Read_aiQuatKey( stream ) {\n\n\t\t\tvar v = new aiQuatKey();\n\t\t\tv.mTime = Read_double( stream );\n\t\t\tv.mValue = Read_aiQuaternion( stream );\n\t\t\treturn v;\n\n\t\t}\n\n\t\tfunction ReadArray_aiVertexWeight( stream, data, size ) {\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVertexWeight( stream );\n\n\t\t}\n\n\t\tfunction ReadArray_aiVectorKey( stream, data, size ) {\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVectorKey( stream );\n\n\t\t}\n\n\t\tfunction ReadArray_aiQuatKey( stream, data, size ) {\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiQuatKey( stream );\n\n\t\t}\n\n\t\tfunction ReadBounds( stream, T /*p*/, n ) {\n\n\t\t\t// not sure what to do here, the data isn't really useful.\n\t\t\treturn stream.Seek( sizeof( T ) * n, aiOrigin_CUR );\n\n\t\t}\n\n\t\tfunction ai_assert( bool ) {\n\n\t\t\tif ( ! bool )\n\t\t\t\tthrow ( \"asset failed\" );\n\n\t\t}\n\n\t\tfunction ReadBinaryNode( stream, parent, depth ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODE );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tvar node = new aiNode();\n\t\t\tnode.mParent = parent;\n\t\t\tnode.mDepth = depth;\n\t\t\tnode.mName = Read_aiString( stream );\n\t\t\tnode.mTransformation = Read_aiMatrix4x4( stream );\n\t\t\tnode.mNumChildren = Read_unsigned_int( stream );\n\t\t\tnode.mNumMeshes = Read_unsigned_int( stream );\n\n\t\t\tif ( node.mNumMeshes ) {\n\n\t\t\t\tnode.mMeshes = [];\n\n\t\t\t\tfor ( var i = 0; i < node.mNumMeshes; ++ i ) {\n\n\t\t\t\t\tnode.mMeshes[ i ] = Read_unsigned_int( stream );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( node.mNumChildren ) {\n\n\t\t\t\tnode.mChildren = [];\n\n\t\t\t\tfor ( var i = 0; i < node.mNumChildren; ++ i ) {\n\n\t\t\t\t\tvar node2 = ReadBinaryNode( stream, node, depth ++ );\n\t\t\t\t\tnode.mChildren[ i ] = node2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// -----------------------------------------------------------------------------------\n\n\t\tfunction ReadBinaryBone( stream, b ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIBONE );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tb.mName = Read_aiString( stream );\n\t\t\tb.mNumWeights = Read_unsigned_int( stream );\n\t\t\tb.mOffsetMatrix = Read_aiMatrix4x4( stream );\n\t\t\t// for the moment we write dumb min/max values for the bones, too.\n\t\t\t// maybe I'll add a better, hash-like solution later\n\t\t\tif ( shortened ) {\n\n\t\t\t\tReadBounds( stream, b.mWeights, b.mNumWeights );\n\n\t\t\t} else {\n\n\t\t\t\t// else write as usual\n\n\t\t\t\tb.mWeights = [];\n\t\t\t\tReadArray_aiVertexWeight( stream, b.mWeights, b.mNumWeights );\n\n\t\t\t}\n\n\t\t\treturn b;\n\n\t\t}\n\n\t\tfunction ReadBinaryMesh( stream, mesh ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMESH );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tmesh.mPrimitiveTypes = Read_unsigned_int( stream );\n\t\t\tmesh.mNumVertices = Read_unsigned_int( stream );\n\t\t\tmesh.mNumFaces = Read_unsigned_int( stream );\n\t\t\tmesh.mNumBones = Read_unsigned_int( stream );\n\t\t\tmesh.mMaterialIndex = Read_unsigned_int( stream );\n\t\t\tmesh.mNumUVComponents = [];\n\t\t\t// first of all, write bits for all existent vertex components\n\t\t\tvar c = Read_unsigned_int( stream );\n\n\t\t\tif ( c & ASSBIN_MESH_HAS_POSITIONS ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, mesh.mVertices, mesh.mNumVertices );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tmesh.mVertices = [];\n\t\t\t\t\tmesh.mVertexBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( c & ASSBIN_MESH_HAS_NORMALS ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, mesh.mNormals, mesh.mNumVertices );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tmesh.mNormals = [];\n\t\t\t\t\tmesh.mNormalBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, mesh.mTangents, mesh.mNumVertices );\n\t\t\t\t\tReadBounds( stream, mesh.mBitangents, mesh.mNumVertices );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tmesh.mTangents = [];\n\t\t\t\t\tmesh.mTangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\t\t\t\t\tmesh.mBitangents = [];\n\t\t\t\t\tmesh.mBitangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++ n ) {\n\n\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_COLOR( n ) ) ) break;\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, mesh.mColors[ n ], mesh.mNumVertices );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tmesh.mColors[ n ] = [];\n\t\t\t\t\tmesh.mColorBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4 );\n\t\t\t\t\tstream.Seek( mesh.mNumVertices * 4 * 4, aiOrigin_CUR );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmesh.mTexCoordsBuffers = [];\n\n\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++ n ) {\n\n\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_TEXCOORD( n ) ) ) break;\n\n\t\t\t\t// write number of UV components\n\t\t\t\tmesh.mNumUVComponents[ n ] = Read_unsigned_int( stream );\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, mesh.mTextureCoords[ n ], mesh.mNumVertices );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tmesh.mTextureCoords[ n ] = [];\n\t\t\t\t\t//note that assbin always writes 3d texcoords\n\t\t\t\t\tmesh.mTexCoordsBuffers[ n ] = [];\n\n\t\t\t\t\tfor ( var uv = 0; uv < mesh.mNumVertices; uv ++ ) {\n\n\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\n\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\n\t\t\t\t\t\treadFloat( stream );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// write faces. There are no floating-point calculations involved\n\t\t\t// in these, so we can write a simple hash over the face data\n\t\t\t// to the dump file. We generate a single 32 Bit hash for 512 faces\n\t\t\t// using Assimp's standard hashing function.\n\t\t\tif ( shortened ) {\n\n\t\t\t\tRead_unsigned_int( stream );\n\n\t\t\t} else {\n\n\t\t\t\t// else write as usual\n\n\t\t\t\t// if there are less than 2^16 vertices, we can simply use 16 bit integers ...\n\t\t\t\tmesh.mFaces = [];\n\t\t\t\tmesh.mIndexArray = [];\n\n\t\t\t\tfor ( var i = 0; i < mesh.mNumFaces; ++ i ) {\n\n\t\t\t\t\tvar f = mesh.mFaces[ i ] = new aiFace();\n\t\t\t\t\t// BOOST_STATIC_ASSERT(AI_MAX_FACE_INDICES <= 0xffff);\n\t\t\t\t\tf.mNumIndices = Read_uint16_t( stream );\n\t\t\t\t\tf.mIndices = [];\n\n\t\t\t\t\tfor ( var a = 0; a < f.mNumIndices; ++ a ) {\n\n\t\t\t\t\t\tif ( mesh.mNumVertices < ( 1 << 16 ) ) {\n\n\t\t\t\t\t\t\tf.mIndices[ a ] = Read_uint16_t( stream );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tf.mIndices[ a ] = Read_unsigned_int( stream );\n\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( f.mNumIndices === 3 ) {\n\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\n\t\t\t\t\t} else if ( f.mNumIndices === 4 ) {\n\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 3 ] );\n\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow ( new Error( \"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\" ) );\n\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// write bones\n\t\t\tif ( mesh.mNumBones ) {\n\n\t\t\t\tmesh.mBones = [];\n\n\t\t\t\tfor ( var a = 0; a < mesh.mNumBones; ++ a ) {\n\n\t\t\t\t\tmesh.mBones[ a ] = new aiBone();\n\t\t\t\t\tReadBinaryBone( stream, mesh.mBones[ a ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction ReadBinaryMaterialProperty( stream, prop ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tprop.mKey = Read_aiString( stream );\n\t\t\tprop.mSemantic = Read_unsigned_int( stream );\n\t\t\tprop.mIndex = Read_unsigned_int( stream );\n\t\t\tprop.mDataLength = Read_unsigned_int( stream );\n\t\t\tprop.mType = Read_unsigned_int( stream );\n\t\t\tprop.mData = [];\n\t\t\tstream.ReadBytes( prop.mData, 1, prop.mDataLength );\n\n\t\t}\n\n\t\t// -----------------------------------------------------------------------------------\n\n\t\tfunction ReadBinaryMaterial( stream, mat ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIAL );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tmat.mNumAllocated = mat.mNumProperties = Read_unsigned_int( stream );\n\n\t\t\tif ( mat.mNumProperties ) {\n\n\t\t\t\tif ( mat.mProperties ) {\n\n\t\t\t\t\tdelete mat.mProperties;\n\n\t\t\t\t}\n\n\t\t\t\tmat.mProperties = [];\n\n\t\t\t\tfor ( var i = 0; i < mat.mNumProperties; ++ i ) {\n\n\t\t\t\t\tmat.mProperties[ i ] = new aiMaterialProperty();\n\t\t\t\t\tReadBinaryMaterialProperty( stream, mat.mProperties[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t// -----------------------------------------------------------------------------------\n\t\tfunction ReadBinaryNodeAnim( stream, nd ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODEANIM );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tnd.mNodeName = Read_aiString( stream );\n\t\t\tnd.mNumPositionKeys = Read_unsigned_int( stream );\n\t\t\tnd.mNumRotationKeys = Read_unsigned_int( stream );\n\t\t\tnd.mNumScalingKeys = Read_unsigned_int( stream );\n\t\t\tnd.mPreState = Read_unsigned_int( stream );\n\t\t\tnd.mPostState = Read_unsigned_int( stream );\n\n\t\t\tif ( nd.mNumPositionKeys ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, nd.mPositionKeys, nd.mNumPositionKeys );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tnd.mPositionKeys = [];\n\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mPositionKeys, nd.mNumPositionKeys );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nd.mNumRotationKeys ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, nd.mRotationKeys, nd.mNumRotationKeys );\n\n\t\t\t\t} else {\n\n\t\t \t\t\t// else write as usual\n\n\t\t\t\t\tnd.mRotationKeys = [];\n\t\t\t\t\tReadArray_aiQuatKey( stream, nd.mRotationKeys, nd.mNumRotationKeys );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nd.mNumScalingKeys ) {\n\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, nd.mScalingKeys, nd.mNumScalingKeys );\n\n\t\t\t\t} else {\n\n\t \t\t\t\t// else write as usual\n\n\t\t\t\t\tnd.mScalingKeys = [];\n\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mScalingKeys, nd.mNumScalingKeys );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t// -----------------------------------------------------------------------------------\n\t\tfunction ReadBinaryAnim( stream, anim ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIANIMATION );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tanim.mName = Read_aiString( stream );\n\t\t\tanim.mDuration = Read_double( stream );\n\t\t\tanim.mTicksPerSecond = Read_double( stream );\n\t\t\tanim.mNumChannels = Read_unsigned_int( stream );\n\n\t\t\tif ( anim.mNumChannels ) {\n\n\t\t\t\tanim.mChannels = [];\n\n\t\t\t\tfor ( var a = 0; a < anim.mNumChannels; ++ a ) {\n\n\t\t\t\t\tanim.mChannels[ a ] = new aiNodeAnim();\n\t\t\t\t\tReadBinaryNodeAnim( stream, anim.mChannels[ a ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction ReadBinaryTexture( stream, tex ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AITEXTURE );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\ttex.mWidth = Read_unsigned_int( stream );\n\t\t\ttex.mHeight = Read_unsigned_int( stream );\n\t\t\tstream.ReadBytes( tex.achFormatHint, 1, 4 );\n\n\t\t\tif ( ! shortened ) {\n\n\t\t\t\tif ( ! tex.mHeight ) {\n\n\t\t\t\t\ttex.pcData = [];\n\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttex.pcData = [];\n\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth * tex.mHeight * 4 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t// -----------------------------------------------------------------------------------\n\t\tfunction ReadBinaryLight( stream, l ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AILIGHT );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tl.mName = Read_aiString( stream );\n\t\t\tl.mType = Read_unsigned_int( stream );\n\n\t\t\tif ( l.mType != aiLightSource_DIRECTIONAL ) {\n\n\t\t\t\tl.mAttenuationConstant = readFloat( stream );\n\t\t\t\tl.mAttenuationLinear = readFloat( stream );\n\t\t\t\tl.mAttenuationQuadratic = readFloat( stream );\n\n\t\t\t}\n\n\t\t\tl.mColorDiffuse = Read_aiColor3D( stream );\n\t\t\tl.mColorSpecular = Read_aiColor3D( stream );\n\t\t\tl.mColorAmbient = Read_aiColor3D( stream );\n\n\t\t\tif ( l.mType == aiLightSource_SPOT ) {\n\n\t\t\t\tl.mAngleInnerCone = readFloat( stream );\n\t\t\t\tl.mAngleOuterCone = readFloat( stream );\n\n\t\t\t}\n\n\t\t}\n\t\t// -----------------------------------------------------------------------------------\n\t\tfunction ReadBinaryCamera( stream, cam ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AICAMERA );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tcam.mName = Read_aiString( stream );\n\t\t\tcam.mPosition = Read_aiVector3D( stream );\n\t\t\tcam.mLookAt = Read_aiVector3D( stream );\n\t\t\tcam.mUp = Read_aiVector3D( stream );\n\t\t\tcam.mHorizontalFOV = readFloat( stream );\n\t\t\tcam.mClipPlaneNear = readFloat( stream );\n\t\t\tcam.mClipPlaneFar = readFloat( stream );\n\t\t\tcam.mAspect = readFloat( stream );\n\n\t\t}\n\n\t\tfunction ReadBinaryScene( stream, scene ) {\n\n\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AISCENE );\n\t\t\t/*uint32_t size =*/\n\t\t\tRead_uint32_t( stream );\n\t\t\tscene.mFlags = Read_unsigned_int( stream );\n\t\t\tscene.mNumMeshes = Read_unsigned_int( stream );\n\t\t\tscene.mNumMaterials = Read_unsigned_int( stream );\n\t\t\tscene.mNumAnimations = Read_unsigned_int( stream );\n\t\t\tscene.mNumTextures = Read_unsigned_int( stream );\n\t\t\tscene.mNumLights = Read_unsigned_int( stream );\n\t\t\tscene.mNumCameras = Read_unsigned_int( stream );\n\t\t\t// Read node graph\n\t\t\tscene.mRootNode = new aiNode();\n\t\t\tscene.mRootNode = ReadBinaryNode( stream, null, 0 );\n\t\t\t// Read all meshes\n\t\t\tif ( scene.mNumMeshes ) {\n\n\t\t\t\tscene.mMeshes = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumMeshes; ++ i ) {\n\n\t\t\t\t\tscene.mMeshes[ i ] = new aiMesh();\n\t\t\t\t\tReadBinaryMesh( stream, scene.mMeshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Read materials\n\t\t\tif ( scene.mNumMaterials ) {\n\n\t\t\t\tscene.mMaterials = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumMaterials; ++ i ) {\n\n\t\t\t\t\tscene.mMaterials[ i ] = new aiMaterial();\n\t\t\t\t\tReadBinaryMaterial( stream, scene.mMaterials[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Read all animations\n\t\t\tif ( scene.mNumAnimations ) {\n\n\t\t\t\tscene.mAnimations = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumAnimations; ++ i ) {\n\n\t\t\t\t\tscene.mAnimations[ i ] = new aiAnimation();\n\t\t\t\t\tReadBinaryAnim( stream, scene.mAnimations[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Read all textures\n\t\t\tif ( scene.mNumTextures ) {\n\n\t\t\t\tscene.mTextures = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumTextures; ++ i ) {\n\n\t\t\t\t\tscene.mTextures[ i ] = new aiTexture();\n\t\t\t\t\tReadBinaryTexture( stream, scene.mTextures[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Read lights\n\t\t\tif ( scene.mNumLights ) {\n\n\t\t\t\tscene.mLights = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumLights; ++ i ) {\n\n\t\t\t\t\tscene.mLights[ i ] = new aiLight();\n\t\t\t\t\tReadBinaryLight( stream, scene.mLights[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Read cameras\n\t\t\tif ( scene.mNumCameras ) {\n\n\t\t\t\tscene.mCameras = [];\n\n\t\t\t\tfor ( var i = 0; i < scene.mNumCameras; ++ i ) {\n\n\t\t\t\t\tscene.mCameras[ i ] = new aiCamera();\n\t\t\t\t\tReadBinaryCamera( stream, scene.mCameras[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tvar aiOrigin_CUR = 0;\n\t\tvar aiOrigin_BEG = 1;\n\n\t\tfunction extendStream( stream ) {\n\n\t\t\tstream.readOffset = 0;\n\t\t\tstream.Seek = function ( off, ori ) {\n\n\t\t\t\tif ( ori == aiOrigin_CUR ) {\n\n\t\t\t\t\tstream.readOffset += off;\n\n\t\t\t\t}\n\t\t\t\tif ( ori == aiOrigin_BEG ) {\n\n\t\t\t\t\tstream.readOffset = off;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tstream.ReadBytes = function ( buff, size, n ) {\n\n\t\t\t\tvar bytes = size * n;\n\t\t\t\tfor ( var i = 0; i < bytes; i ++ )\n\t\t\t\t\tbuff[ i ] = Read_uint8_t( this );\n\n\t\t\t};\n\n\t\t\tstream.subArray32 = function ( start, end ) {\n\n\t\t\t\tvar buff = this.buffer;\n\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\treturn new Float32Array( newbuff );\n\n\t\t\t};\n\n\t\t\tstream.subArrayUint16 = function ( start, end ) {\n\n\t\t\t\tvar buff = this.buffer;\n\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\treturn new Uint16Array( newbuff );\n\n\t\t\t};\n\n\t\t\tstream.subArrayUint8 = function ( start, end ) {\n\n\t\t\t\tvar buff = this.buffer;\n\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\treturn new Uint8Array( newbuff );\n\n\t\t\t};\n\n\t\t\tstream.subArrayUint32 = function ( start, end ) {\n\n\t\t\t\tvar buff = this.buffer;\n\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\treturn new Uint32Array( newbuff );\n\n\t\t\t};\n\n\t\t}\n\n\t\tvar shortened, compressed;\n\n\t\tfunction InternReadFile( pFiledata ) {\n\n\t\t\tvar pScene = new aiScene();\n\t\t\tvar stream = new DataView( pFiledata );\n\t\t\textendStream( stream );\n\t\t\tstream.Seek( 44, aiOrigin_CUR ); // signature\n\t\t\t/*unsigned int versionMajor =*/\n\t\t\tpScene.versionMajor = Read_unsigned_int( stream );\n\t\t\t/*unsigned int versionMinor =*/\n\t\t\tpScene.versionMinor = Read_unsigned_int( stream );\n\t\t\t/*unsigned int versionRevision =*/\n\t\t\tpScene.versionRevision = Read_unsigned_int( stream );\n\t\t\t/*unsigned int compileFlags =*/\n\t\t\tpScene.compileFlags = Read_unsigned_int( stream );\n\t\t\tshortened = Read_uint16_t( stream ) > 0;\n\t\t\tcompressed = Read_uint16_t( stream ) > 0;\n\t\t\tif ( shortened )\n\t\t\t\tthrow \"Shortened binaries are not supported!\";\n\t\t\tstream.Seek( 256, aiOrigin_CUR ); // original filename\n\t\t\tstream.Seek( 128, aiOrigin_CUR ); // options\n\t\t\tstream.Seek( 64, aiOrigin_CUR ); // padding\n\t\t\tif ( compressed ) {\n\n\t\t\t\tvar uncompressedSize = Read_uint32_t( stream );\n\t\t\t\tvar compressedSize = stream.FileSize() - stream.Tell();\n\t\t\t\tvar compressedData = [];\n\t\t\t\tstream.Read( compressedData, 1, compressedSize );\n\t\t\t\tvar uncompressedData = [];\n\t\t\t\tuncompress( uncompressedData, uncompressedSize, compressedData, compressedSize );\n\t\t\t\tvar buff = new ArrayBuffer( uncompressedData );\n\t\t\t\tReadBinaryScene( buff, pScene );\n\n\t\t\t} else {\n\n\t\t\t\tReadBinaryScene( stream, pScene );\n\n\t\t\t}\n\n\t\t\treturn pScene.toTHREE();\n\n\t\t}\n\n\t\treturn InternReadFile( buffer );\n\n\t}\n\n} );\n\nexport { AssimpLoader };\n"]}