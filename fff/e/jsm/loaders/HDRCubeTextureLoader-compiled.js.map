{"version":3,"sources":["HDRCubeTextureLoader.js"],"names":[],"mappings":"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","file":"HDRCubeTextureLoader-compiled.js","sourcesContent":["/**\n* @author Prashant Sharma / spidersharma03\n* @author Ben Houston / http://clara.io / bhouston\n*/\n\nimport {\n\tCubeTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tLoader,\n\tNearestFilter,\n\tRGBAFormat,\n\tRGBEEncoding,\n\tRGBFormat,\n\tUnsignedByteType\n} from \"../../../build/three.module.js\";\nimport { RGBELoader } from \"../loaders/RGBELoader.js\";\n\nvar HDRCubeTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.hdrLoader = new RGBELoader();\n\tthis.type = UnsignedByteType;\n\n};\n\nHDRCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: HDRCubeTextureLoader,\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tif ( ! Array.isArray( urls ) ) {\n\n\t\t\tconsole.warn( 'THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.' );\n\n\t\t\tthis.setDataType( urls );\n\n\t\t\turls = onLoad;\n\t\t\tonLoad = onProgress;\n\t\t\tonProgress = onError;\n\t\t\tonError = arguments[ 4 ];\n\n\t\t}\n\n\t\tvar texture = new CubeTexture();\n\n\t\ttexture.type = this.type;\n\n\t\tswitch ( texture.type ) {\n\n\t\t\tcase UnsignedByteType:\n\n\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t\tcase FloatType:\n\n\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\ttexture.format = RGBFormat;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\ttexture.format = RGBFormat;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadHDRData( i, onLoad, onProgress, onError ) {\n\n\t\t\tnew FileLoader( scope.manager )\n\t\t\t\t.setPath( scope.path )\n\t\t\t\t.setResponseType( 'arraybuffer' )\n\t\t\t\t.load( urls[ i ], function ( buffer ) {\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tvar texData = scope.hdrLoader.parse( buffer );\n\n\t\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\t\tif ( texData.data !== undefined ) {\n\n\t\t\t\t\t\tvar dataTexture = new DataTexture( texData.data, texData.width, texData.height );\n\n\t\t\t\t\t\tdataTexture.type = texture.type;\n\t\t\t\t\t\tdataTexture.encoding = texture.encoding;\n\t\t\t\t\t\tdataTexture.format = texture.format;\n\t\t\t\t\t\tdataTexture.minFilter = texture.minFilter;\n\t\t\t\t\t\tdataTexture.magFilter = texture.magFilter;\n\t\t\t\t\t\tdataTexture.generateMipmaps = texture.generateMipmaps;\n\n\t\t\t\t\t\ttexture.images[ i ] = dataTexture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; i ++ ) {\n\n\t\t\tloadHDRData( i, onLoad, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\tthis.hdrLoader.setDataType( value );\n\n\t\treturn this;\n\n\t}\n\n} );\n\nexport { HDRCubeTextureLoader };\n"]}