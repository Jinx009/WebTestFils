{"version":3,"sources":["BVHLoader.js"],"names":[],"mappings":"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","file":"BVHLoader-compiled.js","sourcesContent":["/**\n * @author herzig / http://github.com/herzig\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\n\nimport {\n\tAnimationClip,\n\tBone,\n\tFileLoader,\n\tLoader,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tSkeleton,\n\tVector3,\n\tVectorKeyframeTrack\n} from \"../../../build/three.module.js\";\n\nvar BVHLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.animateBonePositions = true;\n\tthis.animateBoneRotations = true;\n\n};\n\nBVHLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BVHLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( text ) {\n\n\t\t/*\n\t\t\treads a string array (lines) from a BVH file\n\t\t\tand outputs a skeleton structure including motion data\n\n\t\t\treturns thee root node:\n\t\t\t{ name: '', channels: [], children: [] }\n\t\t*/\n\t\tfunction readBvh( lines ) {\n\n\t\t\t// read model structure\n\n\t\t\tif ( nextLine( lines ) !== 'HIERARCHY' ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: HIERARCHY expected.' );\n\n\t\t\t}\n\n\t\t\tvar list = []; // collects flat array of all bones\n\t\t\tvar root = readNode( lines, nextLine( lines ), list );\n\n\t\t\t// read motion data\n\n\t\t\tif ( nextLine( lines ) !== 'MOTION' ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: MOTION expected.' );\n\n\t\t\t}\n\n\t\t\t// number of frames\n\n\t\t\tvar tokens = nextLine( lines ).split( /[\\s]+/ );\n\t\t\tvar numFrames = parseInt( tokens[ 1 ] );\n\n\t\t\tif ( isNaN( numFrames ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Failed to read number of frames.' );\n\n\t\t\t}\n\n\t\t\t// frame time\n\n\t\t\ttokens = nextLine( lines ).split( /[\\s]+/ );\n\t\t\tvar frameTime = parseFloat( tokens[ 2 ] );\n\n\t\t\tif ( isNaN( frameTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Failed to read frame time.' );\n\n\t\t\t}\n\n\t\t\t// read frame data line by line\n\n\t\t\tfor ( var i = 0; i < numFrames; i ++ ) {\n\n\t\t\t\ttokens = nextLine( lines ).split( /[\\s]+/ );\n\t\t\t\treadFrameData( tokens, i * frameTime, root );\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\t/*\n\t\t\tRecursively reads data from a single frame into the bone hierarchy.\n\t\t\tThe passed bone hierarchy has to be structured in the same order as the BVH file.\n\t\t\tkeyframe data is stored in bone.frames.\n\n\t\t\t- data: splitted string array (frame values), values are shift()ed so\n\t\t\tthis should be empty after parsing the whole hierarchy.\n\t\t\t- frameTime: playback time for this keyframe.\n\t\t\t- bone: the bone to read frame data from.\n\t\t*/\n\t\tfunction readFrameData( data, frameTime, bone ) {\n\n\t\t\t// end sites have no motion data\n\n\t\t\tif ( bone.type === 'ENDSITE' ) return;\n\n\t\t\t// add keyframe\n\n\t\t\tvar keyframe = {\n\t\t\t\ttime: frameTime,\n\t\t\t\tposition: new Vector3(),\n\t\t\t\trotation: new Quaternion()\n\t\t\t};\n\n\t\t\tbone.frames.push( keyframe );\n\n\t\t\tvar quat = new Quaternion();\n\n\t\t\tvar vx = new Vector3( 1, 0, 0 );\n\t\t\tvar vy = new Vector3( 0, 1, 0 );\n\t\t\tvar vz = new Vector3( 0, 0, 1 );\n\n\t\t\t// parse values for each channel in node\n\n\t\t\tfor ( var i = 0; i < bone.channels.length; i ++ ) {\n\n\t\t\t\tswitch ( bone.channels[ i ] ) {\n\n\t\t\t\t\tcase 'Xposition':\n\t\t\t\t\t\tkeyframe.position.x = parseFloat( data.shift().trim() );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Yposition':\n\t\t\t\t\t\tkeyframe.position.y = parseFloat( data.shift().trim() );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Zposition':\n\t\t\t\t\t\tkeyframe.position.z = parseFloat( data.shift().trim() );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Xrotation':\n\t\t\t\t\t\tquat.setFromAxisAngle( vx, parseFloat( data.shift().trim() ) * Math.PI / 180 );\n\t\t\t\t\t\tkeyframe.rotation.multiply( quat );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Yrotation':\n\t\t\t\t\t\tquat.setFromAxisAngle( vy, parseFloat( data.shift().trim() ) * Math.PI / 180 );\n\t\t\t\t\t\tkeyframe.rotation.multiply( quat );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Zrotation':\n\t\t\t\t\t\tquat.setFromAxisAngle( vz, parseFloat( data.shift().trim() ) * Math.PI / 180 );\n\t\t\t\t\t\tkeyframe.rotation.multiply( quat );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.BVHLoader: Invalid channel type.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// parse child nodes\n\n\t\t\tfor ( var i = 0; i < bone.children.length; i ++ ) {\n\n\t\t\t\treadFrameData( data, frameTime, bone.children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/*\n\t\t Recursively parses the HIERACHY section of the BVH file\n\n\t\t - lines: all lines of the file. lines are consumed as we go along.\n\t\t - firstline: line containing the node type and name e.g. 'JOINT hip'\n\t\t - list: collects a flat list of nodes\n\n\t\t returns: a BVH node including children\n\t\t*/\n\t\tfunction readNode( lines, firstline, list ) {\n\n\t\t\tvar node = { name: '', type: '', frames: [] };\n\t\t\tlist.push( node );\n\n\t\t\t// parse node type and name\n\n\t\t\tvar tokens = firstline.split( /[\\s]+/ );\n\n\t\t\tif ( tokens[ 0 ].toUpperCase() === 'END' && tokens[ 1 ].toUpperCase() === 'SITE' ) {\n\n\t\t\t\tnode.type = 'ENDSITE';\n\t\t\t\tnode.name = 'ENDSITE'; // bvh end sites have no name\n\n\t\t\t} else {\n\n\t\t\t\tnode.name = tokens[ 1 ];\n\t\t\t\tnode.type = tokens[ 0 ].toUpperCase();\n\n\t\t\t}\n\n\t\t\tif ( nextLine( lines ) !== '{' ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Expected opening { after type & name' );\n\n\t\t\t}\n\n\t\t\t// parse OFFSET\n\n\t\t\ttokens = nextLine( lines ).split( /[\\s]+/ );\n\n\t\t\tif ( tokens[ 0 ] !== 'OFFSET' ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Expected OFFSET but got: ' + tokens[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( tokens.length !== 4 ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Invalid number of values for OFFSET.' );\n\n\t\t\t}\n\n\t\t\tvar offset = new Vector3(\n\t\t\t\tparseFloat( tokens[ 1 ] ),\n\t\t\t\tparseFloat( tokens[ 2 ] ),\n\t\t\t\tparseFloat( tokens[ 3 ] )\n\t\t\t);\n\n\t\t\tif ( isNaN( offset.x ) || isNaN( offset.y ) || isNaN( offset.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BVHLoader: Invalid values of OFFSET.' );\n\n\t\t\t}\n\n\t\t\tnode.offset = offset;\n\n\t\t\t// parse CHANNELS definitions\n\n\t\t\tif ( node.type !== 'ENDSITE' ) {\n\n\t\t\t\ttokens = nextLine( lines ).split( /[\\s]+/ );\n\n\t\t\t\tif ( tokens[ 0 ] !== 'CHANNELS' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BVHLoader: Expected CHANNELS definition.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar numChannels = parseInt( tokens[ 1 ] );\n\t\t\t\tnode.channels = tokens.splice( 2, numChannels );\n\t\t\t\tnode.children = [];\n\n\t\t\t}\n\n\t\t\t// read children\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tvar line = nextLine( lines );\n\n\t\t\t\tif ( line === '}' ) {\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode.children.push( readNode( lines, line, list ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/*\n\t\t\trecursively converts the internal bvh node structure to a Bone hierarchy\n\n\t\t\tsource: the bvh root node\n\t\t\tlist: pass an empty array, collects a flat list of all converted THREE.Bones\n\n\t\t\treturns the root Bone\n\t\t*/\n\t\tfunction toTHREEBone( source, list ) {\n\n\t\t\tvar bone = new Bone();\n\t\t\tlist.push( bone );\n\n\t\t\tbone.position.add( source.offset );\n\t\t\tbone.name = source.name;\n\n\t\t\tif ( source.type !== 'ENDSITE' ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tbone.add( toTHREEBone( source.children[ i ], list ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t\t/*\n\t\t\tbuilds a AnimationClip from the keyframe data saved in each bone.\n\n\t\t\tbone: bvh root node\n\n\t\t\treturns: a AnimationClip containing position and quaternion tracks\n\t\t*/\n\t\tfunction toTHREEAnimation( bones ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\t// create a position and quaternion animation track for each node\n\n\t\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.type === 'ENDSITE' )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// track data\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar positions = [];\n\t\t\t\tvar rotations = [];\n\n\t\t\t\tfor ( var j = 0; j < bone.frames.length; j ++ ) {\n\n\t\t\t\t\tvar frame = bone.frames[ j ];\n\n\t\t\t\t\ttimes.push( frame.time );\n\n\t\t\t\t\t// the animation system animates the position property,\n\t\t\t\t\t// so we have to add the joint offset to all values\n\n\t\t\t\t\tpositions.push( frame.position.x + bone.offset.x );\n\t\t\t\t\tpositions.push( frame.position.y + bone.offset.y );\n\t\t\t\t\tpositions.push( frame.position.z + bone.offset.z );\n\n\t\t\t\t\trotations.push( frame.rotation.x );\n\t\t\t\t\trotations.push( frame.rotation.y );\n\t\t\t\t\trotations.push( frame.rotation.z );\n\t\t\t\t\trotations.push( frame.rotation.w );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scope.animateBonePositions ) {\n\n\t\t\t\t\ttracks.push( new VectorKeyframeTrack( '.bones[' + bone.name + '].position', times, positions ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scope.animateBoneRotations ) {\n\n\t\t\t\t\ttracks.push( new QuaternionKeyframeTrack( '.bones[' + bone.name + '].quaternion', times, rotations ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( 'animation', - 1, tracks );\n\n\t\t}\n\n\t\t/*\n\t\t\treturns the next non-empty line in lines\n\t\t*/\n\t\tfunction nextLine( lines ) {\n\n\t\t\tvar line;\n\t\t\t// skip empty lines\n\t\t\twhile ( ( line = lines.shift().trim() ).length === 0 ) { }\n\t\t\treturn line;\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar lines = text.split( /[\\r\\n]+/g );\n\n\t\tvar bones = readBvh( lines );\n\n\t\tvar threeBones = [];\n\t\ttoTHREEBone( bones[ 0 ], threeBones );\n\n\t\tvar threeClip = toTHREEAnimation( bones );\n\n\t\treturn {\n\t\t\tskeleton: new Skeleton( threeBones ),\n\t\t\tclip: threeClip\n\t\t};\n\n\t}\n\n} );\n\nexport { BVHLoader };\n"]}