{"version":3,"sources":["GCodeLoader.js"],"names":[],"mappings":"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","file":"GCodeLoader-compiled.js","sourcesContent":["/**\n * GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n *\n * Gcode files are composed by commands used by machines to create objects.\n *\n * @class GCodeLoader\n * @param {Manager} manager Loading manager.\n * @author tentone\n * @author joewalnes\n */\n\nimport {\n\tBufferGeometry,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader\n} from \"../../../build/three.module.js\";\n\nvar GCodeLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.splitLayer = false;\n\n};\n\nGCodeLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: GCodeLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar self = this;\n\n\t\tvar loader = new FileLoader( self.manager );\n\t\tloader.setPath( self.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( self.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( data ) {\n\n\t\tvar state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n\t\tvar layers = [];\n\n\t\tvar currentLayer = undefined;\n\n\t\tvar pathMaterial = new LineBasicMaterial( { color: 0xFF0000 } );\n\t\tpathMaterial.name = 'path';\n\n\t\tvar extrudingMaterial = new LineBasicMaterial( { color: 0x00FF00 } );\n\t\textrudingMaterial.name = 'extruded';\n\n\t\tfunction newLayer( line ) {\n\n\t\t\tcurrentLayer = { vertex: [], pathVertex: [], z: line.z };\n\t\t\tlayers.push( currentLayer );\n\n\t\t}\n\n\t\t//Create lie segment between p1 and p2\n\t\tfunction addSegment( p1, p2 ) {\n\n\t\t\tif ( currentLayer === undefined ) {\n\n\t\t\t\tnewLayer( p1 );\n\n\t\t\t}\n\n\t\t\tif ( line.extruding ) {\n\n\t\t\t\tcurrentLayer.vertex.push( p1.x, p1.y, p1.z );\n\t\t\t\tcurrentLayer.vertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t} else {\n\n\t\t\t\tcurrentLayer.pathVertex.push( p1.x, p1.y, p1.z );\n\t\t\t\tcurrentLayer.pathVertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction delta( v1, v2 ) {\n\n\t\t\treturn state.relative ? v2 : v2 - v1;\n\n\t\t}\n\n\t\tfunction absolute( v1, v2 ) {\n\n\t\t\treturn state.relative ? v1 + v2 : v2;\n\n\t\t}\n\n\t\tvar lines = data.replace( /;.+/g, '' ).split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar tokens = lines[ i ].split( ' ' );\n\t\t\tvar cmd = tokens[ 0 ].toUpperCase();\n\n\t\t\t//Argumments\n\t\t\tvar args = {};\n\t\t\ttokens.splice( 1 ).forEach( function ( token ) {\n\n\t\t\t\tif ( token[ 0 ] !== undefined ) {\n\n\t\t\t\t\tvar key = token[ 0 ].toLowerCase();\n\t\t\t\t\tvar value = parseFloat( token.substring( 1 ) );\n\t\t\t\t\targs[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t//Process commands\n\t\t\t//G0/G1 â€“ Linear Movement\n\t\t\tif ( cmd === 'G0' || cmd === 'G1' ) {\n\n\t\t\t\tvar line = {\n\t\t\t\t\tx: args.x !== undefined ? absolute( state.x, args.x ) : state.x,\n\t\t\t\t\ty: args.y !== undefined ? absolute( state.y, args.y ) : state.y,\n\t\t\t\t\tz: args.z !== undefined ? absolute( state.z, args.z ) : state.z,\n\t\t\t\t\te: args.e !== undefined ? absolute( state.e, args.e ) : state.e,\n\t\t\t\t\tf: args.f !== undefined ? absolute( state.f, args.f ) : state.f,\n\t\t\t\t};\n\n\t\t\t\t//Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\t\t\t\tif ( delta( state.e, line.e ) > 0 ) {\n\n\t\t\t\t\tline.extruding = delta( state.e, line.e ) > 0;\n\n\t\t\t\t\tif ( currentLayer == undefined || line.z != currentLayer.z ) {\n\n\t\t\t\t\t\tnewLayer( line );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\taddSegment( state, line );\n\t\t\t\tstate = line;\n\n\t\t\t} else if ( cmd === 'G2' || cmd === 'G3' ) {\n\n\t\t\t\t//G2/G3 - Arc Movement ( G2 clock wise and G3 counter clock wise )\n\t\t\t\t//console.warn( 'THREE.GCodeLoader: Arc command not supported' );\n\n\t\t\t} else if ( cmd === 'G90' ) {\n\n\t\t\t\t//G90: Set to Absolute Positioning\n\t\t\t\tstate.relative = false;\n\n\t\t\t} else if ( cmd === 'G91' ) {\n\n\t\t\t\t//G91: Set to state.relative Positioning\n\t\t\t\tstate.relative = true;\n\n\t\t\t} else if ( cmd === 'G92' ) {\n\n\t\t\t\t//G92: Set Position\n\t\t\t\tvar line = state;\n\t\t\t\tline.x = args.x !== undefined ? args.x : line.x;\n\t\t\t\tline.y = args.y !== undefined ? args.y : line.y;\n\t\t\t\tline.z = args.z !== undefined ? args.z : line.z;\n\t\t\t\tline.e = args.e !== undefined ? args.e : line.e;\n\t\t\t\tstate = line;\n\n\t\t\t} else {\n\n\t\t\t\t//console.warn( 'THREE.GCodeLoader: Command not supported:' + cmd );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addObject( vertex, extruding ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertex, 3 ) );\n\n\t\t\tvar segments = new LineSegments( geometry, extruding ? extrudingMaterial : pathMaterial );\n\t\t\tsegments.name = 'layer' + i;\n\t\t\tobject.add( segments );\n\n\t\t}\n\n\t\tvar object = new Group();\n\t\tobject.name = 'gcode';\n\n\t\tif ( this.splitLayer ) {\n\n\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\tvar layer = layers[ i ];\n\t\t\t\taddObject( layer.vertex, true );\n\t\t\t\taddObject( layer.pathVertex, false );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar vertex = [], pathVertex = [];\n\n\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\tvar layer = layers[ i ];\n\n\t\t\t\tvertex = vertex.concat( layer.vertex );\n\t\t\t\tpathVertex = pathVertex.concat( layer.pathVertex );\n\n\t\t\t}\n\n\t\t\taddObject( vertex, true );\n\t\t\taddObject( pathVertex, false );\n\n\t\t}\n\n\t\tobject.quaternion.setFromEuler( new Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\treturn object;\n\n\t}\n\n} );\n\nexport { GCodeLoader };\n"]}