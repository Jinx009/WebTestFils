{"version":3,"sources":["STLLoader.js"],"names":[],"mappings":"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","file":"STLLoader-compiled.js","sourcesContent":["/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n * @author Mugen87 / https://github.com/Mugen87\n * @author neverhood311 / https://github.com/neverhood311\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (var i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\nimport {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLoaderUtils,\n\tVector3\n} from \"../../../build/three.module.js\";\n\n\nvar STLLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n};\n\nSTLLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: STLLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( exception ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( exception );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( data ) {\n\n\t\tfunction isBinary( data ) {\n\n\t\t\tvar expect, face_size, n_faces, reader;\n\t\t\treader = new DataView( data );\n\t\t\tface_size = ( 32 / 8 * 3 ) + ( ( 32 / 8 * 3 ) * 3 ) + ( 16 / 8 );\n\t\t\tn_faces = reader.getUint32( 80, true );\n\t\t\texpect = 80 + ( 32 / 8 ) + ( n_faces * face_size );\n\n\t\t\tif ( expect === reader.byteLength ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// An ASCII STL data must begin with 'solid ' as the first six bytes.\n\t\t\t// However, ASCII STLs lacking the SPACE after the 'd' are known to be\n\t\t\t// plentiful.  So, check the first 5 bytes for 'solid'.\n\n\t\t\t// Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n\t\t\t// https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n\t\t\t// Search for \"solid\" to start anywhere after those prefixes.\n\n\t\t\t// US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\t\t\tvar solid = [ 115, 111, 108, 105, 100 ];\n\n\t\t\tfor ( var off = 0; off < 5; off ++ ) {\n\n\t\t\t\t// If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n\t\t\t\tif ( matchDataViewAt( solid, reader, off ) ) return false;\n\n\t\t\t}\n\n\t\t\t// Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction matchDataViewAt( query, reader, offset ) {\n\n\t\t\t// Check if each byte in query matches the corresponding byte from the current offset\n\n\t\t\tfor ( var i = 0, il = query.length; i < il; i ++ ) {\n\n\t\t\t\tif ( query[ i ] !== reader.getUint8( offset + i, false ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction parseBinary( data ) {\n\n\t\t\tvar reader = new DataView( data );\n\t\t\tvar faces = reader.getUint32( 80, true );\n\n\t\t\tvar r, g, b, hasColors = false, colors;\n\t\t\tvar defaultR, defaultG, defaultB, alpha;\n\n\t\t\t// process STL header\n\t\t\t// check for default color in header (\"COLOR=rgba\" sequence).\n\n\t\t\tfor ( var index = 0; index < 80 - 10; index ++ ) {\n\n\t\t\t\tif ( ( reader.getUint32( index, false ) == 0x434F4C4F /*COLO*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 4 ) == 0x52 /*'R'*/ ) &&\n\t\t\t\t\t( reader.getUint8( index + 5 ) == 0x3D /*'='*/ ) ) {\n\n\t\t\t\t\thasColors = true;\n\t\t\t\t\tcolors = new Float32Array( faces * 3 * 3 );\n\n\t\t\t\t\tdefaultR = reader.getUint8( index + 6 ) / 255;\n\t\t\t\t\tdefaultG = reader.getUint8( index + 7 ) / 255;\n\t\t\t\t\tdefaultB = reader.getUint8( index + 8 ) / 255;\n\t\t\t\t\talpha = reader.getUint8( index + 9 ) / 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar dataOffset = 84;\n\t\t\tvar faceLength = 12 * 4 + 2;\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar vertices = new Float32Array( faces * 3 * 3 );\n\t\t\tvar normals = new Float32Array( faces * 3 * 3 );\n\n\t\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\t\tvar start = dataOffset + face * faceLength;\n\t\t\t\tvar normalX = reader.getFloat32( start, true );\n\t\t\t\tvar normalY = reader.getFloat32( start + 4, true );\n\t\t\t\tvar normalZ = reader.getFloat32( start + 8, true );\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tvar packedColor = reader.getUint16( start + 48, true );\n\n\t\t\t\t\tif ( ( packedColor & 0x8000 ) === 0 ) {\n\n\t\t\t\t\t\t// facet has its own unique color\n\n\t\t\t\t\t\tr = ( packedColor & 0x1F ) / 31;\n\t\t\t\t\t\tg = ( ( packedColor >> 5 ) & 0x1F ) / 31;\n\t\t\t\t\t\tb = ( ( packedColor >> 10 ) & 0x1F ) / 31;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tr = defaultR;\n\t\t\t\t\t\tg = defaultG;\n\t\t\t\t\t\tb = defaultB;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 1; i <= 3; i ++ ) {\n\n\t\t\t\t\tvar vertexstart = start + i * 12;\n\t\t\t\t\tvar componentIdx = ( face * 3 * 3 ) + ( ( i - 1 ) * 3 );\n\n\t\t\t\t\tvertices[ componentIdx ] = reader.getFloat32( vertexstart, true );\n\t\t\t\t\tvertices[ componentIdx + 1 ] = reader.getFloat32( vertexstart + 4, true );\n\t\t\t\t\tvertices[ componentIdx + 2 ] = reader.getFloat32( vertexstart + 8, true );\n\n\t\t\t\t\tnormals[ componentIdx ] = normalX;\n\t\t\t\t\tnormals[ componentIdx + 1 ] = normalY;\n\t\t\t\t\tnormals[ componentIdx + 2 ] = normalZ;\n\n\t\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\t\tcolors[ componentIdx ] = r;\n\t\t\t\t\t\tcolors[ componentIdx + 1 ] = g;\n\t\t\t\t\t\tcolors[ componentIdx + 2 ] = b;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\t\t\t\tgeometry.hasColors = true;\n\t\t\t\tgeometry.alpha = alpha;\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction parseASCII( data ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar patternSolid = /solid([\\s\\S]*?)endsolid/g;\n\t\t\tvar patternFace = /facet([\\s\\S]*?)endfacet/g;\n\t\t\tvar faceCounter = 0;\n\n\t\t\tvar patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n\t\t\tvar patternVertex = new RegExp( 'vertex' + patternFloat + patternFloat + patternFloat, 'g' );\n\t\t\tvar patternNormal = new RegExp( 'normal' + patternFloat + patternFloat + patternFloat, 'g' );\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar result;\n\n\t\t\tvar groupVertexes = [];\n\t\t\tvar groupCount = 0;\n\t\t\tvar startVertex = 0;\n\t\t\tvar endVertex = 0;\n\n\t\t\twhile ( ( result = patternSolid.exec( data ) ) !== null ) {\n\n\t\t\t\tstartVertex = endVertex;\n\n\t\t\t\tvar solid = result[ 0 ];\n\n\t\t\t\twhile ( ( result = patternFace.exec( solid ) ) !== null ) {\n\n\t\t\t\t\tvar vertexCountPerFace = 0;\n\t\t\t\t\tvar normalCountPerFace = 0;\n\n\t\t\t\t\tvar text = result[ 0 ];\n\n\t\t\t\t\twhile ( ( result = patternNormal.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tnormal.x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\tnormal.y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\tnormal.z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\tnormalCountPerFace ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( ( result = patternVertex.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\tvertices.push( parseFloat( result[ 1 ] ), parseFloat( result[ 2 ] ), parseFloat( result[ 3 ] ) );\n\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\t\t\tvertexCountPerFace ++;\n\t\t\t\t\t\tendVertex ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// every face have to own ONE valid normal\n\n\t\t\t\t\tif ( normalCountPerFace !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// each face have to own THREE valid vertices\n\n\t\t\t\t\tif ( vertexCountPerFace !== 3 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCounter ++;\n\n\t\t\t\t}\n\n\t\t\t\tgroupVertexes.push( { startVertex: startVertex, endVertex: endVertex } );\n\t\t\t\tgroupCount ++;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( groupCount > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groupVertexes.length; i ++ ) {\n\n\t\t\t\t\tgeometry.addGroup( groupVertexes[ i ].startVertex, groupVertexes[ i ].endVertex, i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction ensureString( buffer ) {\n\n\t\t\tif ( typeof buffer !== 'string' ) {\n\n\t\t\t\treturn LoaderUtils.decodeText( new Uint8Array( buffer ) );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t}\n\n\t\tfunction ensureBinary( buffer ) {\n\n\t\t\tif ( typeof buffer === 'string' ) {\n\n\t\t\t\tvar array_buffer = new Uint8Array( buffer.length );\n\t\t\t\tfor ( var i = 0; i < buffer.length; i ++ ) {\n\n\t\t\t\t\tarray_buffer[ i ] = buffer.charCodeAt( i ) & 0xff; // implicitly assumes little-endian\n\n\t\t\t\t}\n\n\t\t\t\treturn array_buffer.buffer || array_buffer;\n\n\t\t\t} else {\n\n\t\t\t\treturn buffer;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// start\n\n\t\tvar binData = ensureBinary( data );\n\n\t\treturn isBinary( binData ) ? parseBinary( binData ) : parseASCII( ensureString( data ) );\n\n\t}\n\n} );\n\nexport { STLLoader };\n"]}