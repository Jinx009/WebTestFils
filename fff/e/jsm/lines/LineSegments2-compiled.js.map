{"version":3,"sources":["LineSegments2.js"],"names":[],"mappings":"AAAA;;;;;AAKA,SACC,0BADD,EAEC,0BAFD,EAGC,IAHD,EAIC,OAJD,QAKO,gCALP;AAMA,SAAS,oBAAT,QAAqC,kCAArC;AACA,SAAS,YAAT,QAA6B,0BAA7B;;AAEA,IAAI,gBAAgB,UAAW,QAAX,EAAqB,QAArB,EAAgC;;AAEnD,MAAK,IAAL,CAAW,IAAX;;AAEA,MAAK,IAAL,GAAY,eAAZ;;AAEA,MAAK,QAAL,GAAgB,aAAa,SAAb,GAAyB,QAAzB,GAAoC,IAAI,oBAAJ,EAApD;AACA,MAAK,QAAL,GAAgB,aAAa,SAAb,GAAyB,QAAzB,GAAoC,IAAI,YAAJ,CAAkB,EAAE,OAAO,KAAK,MAAL,KAAgB,QAAzB,EAAlB,CAApD;AAEA,CATD;;AAWA,cAAc,SAAd,GAA0B,OAAO,MAAP,CAAe,OAAO,MAAP,CAAe,KAAK,SAApB,CAAf,EAAgD;;AAEzE,cAAa,aAF4D;;AAIzE,kBAAiB,IAJwD;;AAMzE,uBAAwB,YAAY;AAAE;;AAErC,MAAI,QAAQ,IAAI,OAAJ,EAAZ;AACA,MAAI,MAAM,IAAI,OAAJ,EAAV;;AAEA,SAAO,SAAS,oBAAT,GAAgC;;AAEtC,OAAI,WAAW,KAAK,QAApB;;AAEA,OAAI,gBAAgB,SAAS,UAAT,CAAoB,aAAxC;AACA,OAAI,cAAc,SAAS,UAAT,CAAoB,WAAtC;AACA,OAAI,gBAAgB,IAAI,YAAJ,CAAkB,IAAI,cAAc,IAAd,CAAmB,KAAzC,CAApB;;AAEA,QAAM,IAAI,IAAI,CAAR,EAAW,IAAI,CAAf,EAAkB,IAAI,cAAc,IAAd,CAAmB,KAA/C,EAAsD,IAAI,CAA1D,EAA6D,KAAM,KAAK,CAAxE,EAA4E;;AAE3E,UAAM,mBAAN,CAA2B,aAA3B,EAA0C,CAA1C;AACA,QAAI,mBAAJ,CAAyB,WAAzB,EAAsC,CAAtC;;AAEA,kBAAe,CAAf,IAAuB,MAAM,CAAR,GAAc,CAAd,GAAkB,cAAe,IAAI,CAAnB,CAAvC;AACA,kBAAe,IAAI,CAAnB,IAAyB,cAAe,CAAf,IAAqB,MAAM,UAAN,CAAkB,GAAlB,CAA9C;AAEA;;AAED,OAAI,yBAAyB,IAAI,0BAAJ,CAAgC,aAAhC,EAA+C,CAA/C,EAAkD,CAAlD,CAA7B,CAlBsC,CAkB8C;;AAEpF,YAAS,YAAT,CAAuB,uBAAvB,EAAgD,IAAI,0BAAJ,CAAgC,sBAAhC,EAAwD,CAAxD,EAA2D,CAA3D,CAAhD,EApBsC,CAoB4E;AAClH,YAAS,YAAT,CAAuB,qBAAvB,EAA8C,IAAI,0BAAJ,CAAgC,sBAAhC,EAAwD,CAAxD,EAA2D,CAA3D,CAA9C,EArBsC,CAqB0E;;AAEhH,UAAO,IAAP;AAEA,GAzBD;AA2BA,EAhCuB;;AANiD,CAAhD,CAA1B;;AA0CA,SAAS,aAAT","file":"LineSegments2-compiled.js","sourcesContent":["/**\n * @author WestLangley / http://github.com/WestLangley\n *\n */\n\nimport {\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tMesh,\n\tVector3\n} from \"../../../build/three.module.js\";\nimport { LineSegmentsGeometry } from \"../lines/LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"../lines/LineMaterial.js\";\n\nvar LineSegments2 = function ( geometry, material ) {\n\n\tMesh.call( this );\n\n\tthis.type = 'LineSegments2';\n\n\tthis.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n\tthis.material = material !== undefined ? material : new LineMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nLineSegments2.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: LineSegments2,\n\n\tisLineSegments2: true,\n\n\tcomputeLineDistances: ( function () { // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tvar instanceStart = geometry.attributes.instanceStart;\n\t\t\tvar instanceEnd = geometry.attributes.instanceEnd;\n\t\t\tvar lineDistances = new Float32Array( 2 * instanceStart.data.count );\n\n\t\t\tfor ( var i = 0, j = 0, l = instanceStart.data.count; i < l; i ++, j += 2 ) {\n\n\t\t\t\tstart.fromBufferAttribute( instanceStart, i );\n\t\t\t\tend.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + start.distanceTo( end );\n\n\t\t\t}\n\n\t\t\tvar instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() )\n\n} );\n\nexport { LineSegments2 };\n"]}