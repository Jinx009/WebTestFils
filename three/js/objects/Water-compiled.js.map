{"version":3,"sources":["Water.js"],"names":[],"mappings":"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","file":"Water-compiled.js","sourcesContent":["console.warn( \"THREE.Water: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Work based on :\n * http://slayvin.net : Flat mirror for three.js\n * http://www.adelphi.edu/~stemkoski : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nTHREE.Water = function ( geometry, options ) {\n\n\tTHREE.Mesh.call( this, geometry );\n\n\tvar scope = this;\n\n\toptions = options || {};\n\n\tvar textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n\tvar textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n\n\tvar clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n\tvar alpha = options.alpha !== undefined ? options.alpha : 1.0;\n\tvar time = options.time !== undefined ? options.time : 0.0;\n\tvar normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n\tvar sunDirection = options.sunDirection !== undefined ? options.sunDirection : new THREE.Vector3( 0.70707, 0.70707, 0.0 );\n\tvar sunColor = new THREE.Color( options.sunColor !== undefined ? options.sunColor : 0xffffff );\n\tvar waterColor = new THREE.Color( options.waterColor !== undefined ? options.waterColor : 0x7F7F7F );\n\tvar eye = options.eye !== undefined ? options.eye : new THREE.Vector3( 0, 0, 0 );\n\tvar distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n\tvar side = options.side !== undefined ? options.side : THREE.FrontSide;\n\tvar fog = options.fog !== undefined ? options.fog : false;\n\n\t//\n\n\tvar mirrorPlane = new THREE.Plane();\n\tvar normal = new THREE.Vector3();\n\tvar mirrorWorldPosition = new THREE.Vector3();\n\tvar cameraWorldPosition = new THREE.Vector3();\n\tvar rotationMatrix = new THREE.Matrix4();\n\tvar lookAtPosition = new THREE.Vector3( 0, 0, - 1 );\n\tvar clipPlane = new THREE.Vector4();\n\n\tvar view = new THREE.Vector3();\n\tvar target = new THREE.Vector3();\n\tvar q = new THREE.Vector4();\n\n\tvar textureMatrix = new THREE.Matrix4();\n\n\tvar mirrorCamera = new THREE.PerspectiveCamera();\n\n\tvar parameters = {\n\t\tminFilter: THREE.LinearFilter,\n\t\tmagFilter: THREE.LinearFilter,\n\t\tformat: THREE.RGBFormat\n\t};\n\n\tvar renderTarget = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\tif ( ! THREE.MathUtils.isPowerOfTwo( textureWidth ) || ! THREE.MathUtils.isPowerOfTwo( textureHeight ) ) {\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t}\n\n\tvar mirrorShader = {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\t\t\t{\n\t\t\t\t\"normalSampler\": { value: null },\n\t\t\t\t\"mirrorSampler\": { value: null },\n\t\t\t\t\"alpha\": { value: 1.0 },\n\t\t\t\t\"time\": { value: 0.0 },\n\t\t\t\t\"size\": { value: 1.0 },\n\t\t\t\t\"distortionScale\": { value: 20.0 },\n\t\t\t\t\"textureMatrix\": { value: new THREE.Matrix4() },\n\t\t\t\t\"sunColor\": { value: new THREE.Color( 0x7F7F7F ) },\n\t\t\t\t\"sunDirection\": { value: new THREE.Vector3( 0.70707, 0.70707, 0 ) },\n\t\t\t\t\"eye\": { value: new THREE.Vector3() },\n\t\t\t\t\"waterColor\": { value: new THREE.Color( 0x555555 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: [\n\t\t\t'uniform mat4 textureMatrix;',\n\t\t\t'uniform float time;',\n\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec4 worldPosition;',\n\n\t\t \t'#include <common>',\n\t\t \t'#include <fog_pars_vertex>',\n\t\t\t'#include <shadowmap_pars_vertex>',\n\t\t\t'#include <logdepthbuf_pars_vertex>',\n\n\t\t\t'void main() {',\n\t\t\t'\tmirrorCoord = modelMatrix * vec4( position, 1.0 );',\n\t\t\t'\tworldPosition = mirrorCoord.xyzw;',\n\t\t\t'\tmirrorCoord = textureMatrix * mirrorCoord;',\n\t\t\t'\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'#include <beginnormal_vertex>',\n\t\t\t'#include <defaultnormal_vertex>',\n\t\t\t'#include <logdepthbuf_vertex>',\n\t\t\t'#include <fog_vertex>',\n\t\t\t'#include <shadowmap_vertex>',\n\t\t\t'}'\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform sampler2D mirrorSampler;',\n\t\t\t'uniform float alpha;',\n\t\t\t'uniform float time;',\n\t\t\t'uniform float size;',\n\t\t\t'uniform float distortionScale;',\n\t\t\t'uniform sampler2D normalSampler;',\n\t\t\t'uniform vec3 sunColor;',\n\t\t\t'uniform vec3 sunDirection;',\n\t\t\t'uniform vec3 eye;',\n\t\t\t'uniform vec3 waterColor;',\n\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec4 worldPosition;',\n\n\t\t\t'vec4 getNoise( vec2 uv ) {',\n\t\t\t'\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);',\n\t\t\t'\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );',\n\t\t\t'\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );',\n\t\t\t'\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );',\n\t\t\t'\tvec4 noise = texture2D( normalSampler, uv0 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv1 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv2 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv3 );',\n\t\t\t'\treturn noise * 0.5 - 1.0;',\n\t\t\t'}',\n\n\t\t\t'void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {',\n\t\t\t'\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );',\n\t\t\t'\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );',\n\t\t\t'\tspecularColor += pow( direction, shiny ) * sunColor * spec;',\n\t\t\t'\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;',\n\t\t\t'}',\n\n\t\t\t'#include <common>',\n\t\t\t'#include <packing>',\n\t\t\t'#include <bsdfs>',\n\t\t\t'#include <fog_pars_fragment>',\n\t\t\t'#include <logdepthbuf_pars_fragment>',\n\t\t\t'#include <lights_pars_begin>',\n\t\t\t'#include <shadowmap_pars_fragment>',\n\t\t\t'#include <shadowmask_pars_fragment>',\n\n\t\t\t'void main() {',\n\n\t\t\t'#include <logdepthbuf_fragment>',\n\t\t\t'\tvec4 noise = getNoise( worldPosition.xz * size );',\n\t\t\t'\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );',\n\n\t\t\t'\tvec3 diffuseLight = vec3(0.0);',\n\t\t\t'\tvec3 specularLight = vec3(0.0);',\n\n\t\t\t'\tvec3 worldToEye = eye-worldPosition.xyz;',\n\t\t\t'\tvec3 eyeDirection = normalize( worldToEye );',\n\t\t\t'\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );',\n\n\t\t\t'\tfloat distance = length(worldToEye);',\n\n\t\t\t'\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;',\n\t\t\t'\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );',\n\n\t\t\t'\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );',\n\t\t\t'\tfloat rf0 = 0.3;',\n\t\t\t'\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );',\n\t\t\t'\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;',\n\t\t\t'\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);',\n\t\t\t'\tvec3 outgoingLight = albedo;',\n\t\t\t'\tgl_FragColor = vec4( outgoingLight, alpha );',\n\n\t\t\t'#include <tonemapping_fragment>',\n\t\t\t'#include <fog_fragment>',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\n\t};\n\n\tvar material = new THREE.ShaderMaterial( {\n\t\tfragmentShader: mirrorShader.fragmentShader,\n\t\tvertexShader: mirrorShader.vertexShader,\n\t\tuniforms: THREE.UniformsUtils.clone( mirrorShader.uniforms ),\n\t\tlights: true,\n\t\tside: side,\n\t\tfog: fog\n\t} );\n\n\tmaterial.uniforms[ \"mirrorSampler\" ].value = renderTarget.texture;\n\tmaterial.uniforms[ \"textureMatrix\" ].value = textureMatrix;\n\tmaterial.uniforms[ \"alpha\" ].value = alpha;\n\tmaterial.uniforms[ \"time\" ].value = time;\n\tmaterial.uniforms[ \"normalSampler\" ].value = normalSampler;\n\tmaterial.uniforms[ \"sunColor\" ].value = sunColor;\n\tmaterial.uniforms[ \"waterColor\" ].value = waterColor;\n\tmaterial.uniforms[ \"sunDirection\" ].value = sunDirection;\n\tmaterial.uniforms[ \"distortionScale\" ].value = distortionScale;\n\n\tmaterial.uniforms[ \"eye\" ].value = eye;\n\n\tscope.material = material;\n\n\tscope.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\tmirrorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\tnormal.set( 0, 0, 1 );\n\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\tview.subVectors( mirrorWorldPosition, cameraWorldPosition );\n\n\t\t// Avoid rendering when mirror is facing away\n\n\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\tview.reflect( normal ).negate();\n\t\tview.add( mirrorWorldPosition );\n\n\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\ttarget.subVectors( mirrorWorldPosition, lookAtPosition );\n\t\ttarget.reflect( normal ).negate();\n\t\ttarget.add( mirrorWorldPosition );\n\n\t\tmirrorCamera.position.copy( view );\n\t\tmirrorCamera.up.set( 0, 1, 0 );\n\t\tmirrorCamera.up.applyMatrix4( rotationMatrix );\n\t\tmirrorCamera.up.reflect( normal );\n\t\tmirrorCamera.lookAt( target );\n\n\t\tmirrorCamera.far = camera.far; // Used in WebGLBackground\n\n\t\tmirrorCamera.updateMatrixWorld();\n\t\tmirrorCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t// Update the texture matrix\n\t\ttextureMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\t\ttextureMatrix.multiply( mirrorCamera.projectionMatrix );\n\t\ttextureMatrix.multiply( mirrorCamera.matrixWorldInverse );\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\tmirrorPlane.setFromNormalAndCoplanarPoint( normal, mirrorWorldPosition );\n\t\tmirrorPlane.applyMatrix4( mirrorCamera.matrixWorldInverse );\n\n\t\tclipPlane.set( mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant );\n\n\t\tvar projectionMatrix = mirrorCamera.projectionMatrix;\n\n\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\tq.z = - 1.0;\n\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t// Calculate the scaled plane vector\n\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\teye.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t// Render\n\n\t\tif ( renderer.outputEncoding !== THREE.LinearEncoding ) {\n\n\t\t\tconsole.warn( 'THREE.Water: WebGLRenderer must use LinearEncoding as outputEncoding.' );\n\t\t\tscope.onBeforeRender = function () {};\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( renderer.toneMapping !== THREE.NoToneMapping ) {\n\n\t\t\tconsole.warn( 'THREE.Water: WebGLRenderer must use NoToneMapping as toneMapping.' );\n\t\t\tscope.onBeforeRender = function () {};\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\tscope.visible = false;\n\n\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\n\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\trenderer.render( scene, mirrorCamera );\n\n\t\tscope.visible = true;\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t// Restore viewport\n\n\t\tvar viewport = camera.viewport;\n\n\t\tif ( viewport !== undefined ) {\n\n\t\t\trenderer.state.viewport( viewport );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.Water.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.Water.prototype.constructor = THREE.Water;\n"]}