{"version":3,"sources":["Lensflare.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,0SAAd;;AAEA,MAAM,SAAN,GAAkB,YAAY;;AAE7B,OAAM,IAAN,CAAW,IAAX,CAAiB,IAAjB,EAAuB,MAAM,SAAN,CAAgB,QAAvC,EAAiD,IAAI,MAAM,iBAAV,CAA6B,EAAE,SAAS,CAAX,EAAc,aAAa,IAA3B,EAA7B,CAAjD;;AAEA,MAAK,IAAL,GAAY,WAAZ;AACA,MAAK,aAAL,GAAqB,KAArB;AACA,MAAK,WAAL,GAAmB,QAAnB;;AAEA;;AAEA,KAAI,iBAAiB,IAAI,MAAM,OAAV,EAArB;AACA,KAAI,eAAe,IAAI,MAAM,OAAV,EAAnB;;AAEA;;AAEA,KAAI,UAAU,IAAI,MAAM,WAAV,CAAuB,IAAI,UAAJ,CAAgB,KAAK,EAAL,GAAU,CAA1B,CAAvB,EAAsD,EAAtD,EAA0D,EAA1D,EAA8D,MAAM,SAApE,CAAd;AACA,SAAQ,SAAR,GAAoB,MAAM,aAA1B;AACA,SAAQ,SAAR,GAAoB,MAAM,aAA1B;AACA,SAAQ,KAAR,GAAgB,MAAM,mBAAtB;AACA,SAAQ,KAAR,GAAgB,MAAM,mBAAtB;;AAEA,KAAI,eAAe,IAAI,MAAM,WAAV,CAAuB,IAAI,UAAJ,CAAgB,KAAK,EAAL,GAAU,CAA1B,CAAvB,EAAsD,EAAtD,EAA0D,EAA1D,EAA8D,MAAM,SAApE,CAAnB;AACA,cAAa,SAAb,GAAyB,MAAM,aAA/B;AACA,cAAa,SAAb,GAAyB,MAAM,aAA/B;AACA,cAAa,KAAb,GAAqB,MAAM,mBAA3B;AACA,cAAa,KAAb,GAAqB,MAAM,mBAA3B;;AAEA;;AAEA,KAAI,WAAW,MAAM,SAAN,CAAgB,QAA/B;;AAEA,KAAI,aAAa,IAAI,MAAM,iBAAV,CAA6B;AAC7C,YAAU;AACT,YAAS,EAAE,OAAO,IAAT,EADA;AAET,qBAAkB,EAAE,OAAO,IAAT;AAFT,GADmC;AAK7C,gBAAc,CAEb,wBAFa,EAIb,8BAJa,EAKb,qBALa,EAOb,0BAPa,EASb,eATa,EAWb,wFAXa,EAab,GAba,EAeZ,IAfY,CAeN,IAfM,CAL+B;AAqB7C,kBAAgB,CAEf,wBAFe,EAIf,eAJe,EAMf,6CANe,EAQf,GARe,EAUd,IAVc,CAUR,IAVQ,CArB6B;AAgC7C,aAAW,IAhCkC;AAiC7C,cAAY,KAjCiC;AAkC7C,eAAa;AAlCgC,EAA7B,CAAjB;;AAqCA,KAAI,aAAa,IAAI,MAAM,iBAAV,CAA6B;AAC7C,YAAU;AACT,UAAO,EAAE,OAAO,OAAT,EADE;AAET,YAAS,EAAE,OAAO,IAAT,EAFA;AAGT,qBAAkB,EAAE,OAAO,IAAT;AAHT,GADmC;AAM7C,gBAAc,CAEb,wBAFa,EAIb,8BAJa,EAKb,qBALa,EAOb,0BAPa,EAQb,oBARa,EAUb,mBAVa,EAYb,eAZa,EAcb,YAda,EAgBb,wFAhBa,EAkBb,GAlBa,EAoBZ,IApBY,CAoBN,IApBM,CAN+B;AA2B7C,kBAAgB,CAEf,wBAFe,EAIf,wBAJe,EAMf,mBANe,EAQf,eARe,EAUf,wCAVe,EAYf,GAZe,EAcd,IAdc,CAcR,IAdQ,CA3B6B;AA0C7C,aAAW,KA1CkC;AA2C7C,cAAY,KA3CiC;AA4C7C,eAAa;AA5CgC,EAA7B,CAAjB;;AA+CA;;AAEA,KAAI,QAAQ,IAAI,MAAM,IAAV,CAAgB,QAAhB,EAA0B,UAA1B,CAAZ;;AAEA;;AAEA,KAAI,WAAW,EAAf;;AAEA,KAAI,SAAS,MAAM,gBAAN,CAAuB,MAApC;;AAEA,KAAI,YAAY,IAAI,MAAM,iBAAV,CAA6B;AAC5C,YAAU;AACT,UAAO,EAAE,OAAO,IAAT,EADE;AAET,mBAAgB,EAAE,OAAO,YAAT,EAFP;AAGT,YAAS,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAHA;AAIT,YAAS,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAJA;AAKT,qBAAkB,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT;AALT,GADkC;AAQ5C,gBAAc,OAAO,YARuB;AAS5C,kBAAgB,OAAO,cATqB;AAU5C,YAAU,MAAM,gBAV4B;AAW5C,eAAa,IAX+B;AAY5C,cAAY;AAZgC,EAA7B,CAAhB;;AAeA,KAAI,QAAQ,IAAI,MAAM,IAAV,CAAgB,QAAhB,EAA0B,SAA1B,CAAZ;;AAEA,MAAK,UAAL,GAAkB,UAAW,OAAX,EAAqB;;AAEtC,WAAS,IAAT,CAAe,OAAf;AAEA,EAJD;;AAMA;;AAEA,KAAI,QAAQ,IAAI,MAAM,OAAV,EAAZ;AACA,KAAI,uBAAuB,IAAI,MAAM,OAAV,EAA3B;AACA,KAAI,YAAY,IAAI,MAAM,IAAV,EAAhB;AACA,KAAI,WAAW,IAAI,MAAM,OAAV,EAAf;;AAEA,MAAK,cAAL,GAAsB,UAAW,QAAX,EAAqB,KAArB,EAA4B,MAA5B,EAAqC;;AAE1D,WAAS,kBAAT,CAA6B,QAA7B;;AAEA,MAAI,YAAY,SAAS,CAAT,GAAa,SAAS,CAAtC;AACA,MAAI,oBAAoB,SAAS,CAAT,GAAa,GAArC;AACA,MAAI,qBAAqB,SAAS,CAAT,GAAa,GAAtC;;AAEA,MAAI,OAAO,KAAK,SAAS,CAAzB;AACA,QAAM,GAAN,CAAW,OAAO,SAAlB,EAA6B,IAA7B;;AAEA,YAAU,GAAV,CAAc,GAAd,CAAmB,SAAS,CAA5B,EAA+B,SAAS,CAAxC;AACA,YAAU,GAAV,CAAc,GAAd,CAAmB,SAAS,CAAT,IAAe,SAAS,CAAT,GAAa,EAA5B,CAAnB,EAAqD,SAAS,CAAT,IAAe,SAAS,CAAT,GAAa,EAA5B,CAArD;;AAEA;;AAEA,eAAa,qBAAb,CAAoC,KAAK,WAAzC;AACA,eAAa,YAAb,CAA2B,OAAO,kBAAlC;;AAEA,MAAK,aAAa,CAAb,GAAiB,CAAtB,EAA0B,OAnBgC,CAmBxB;;AAElC,iBAAe,IAAf,CAAqB,YAArB,EAAoC,YAApC,CAAkD,OAAO,gBAAzD;;AAEA;;AAEA,uBAAqB,CAArB,GAAyB,SAAS,CAAT,GAAe,eAAe,CAAf,GAAmB,iBAAlC,GAAwD,iBAAxD,GAA4E,CAArG;AACA,uBAAqB,CAArB,GAAyB,SAAS,CAAT,GAAe,eAAe,CAAf,GAAmB,kBAAlC,GAAyD,kBAAzD,GAA8E,CAAvG;;AAEA;;AAEA,MAAK,UAAU,aAAV,CAAyB,oBAAzB,CAAL,EAAuD;;AAEtD;;AAEA,YAAS,wBAAT,CAAmC,oBAAnC,EAAyD,OAAzD;;AAEA;;AAEA,OAAI,WAAW,WAAW,QAA1B;AACA,YAAU,OAAV,EAAoB,KAApB,GAA4B,KAA5B;AACA,YAAU,gBAAV,EAA6B,KAA7B,GAAqC,cAArC;;AAEA,YAAS,kBAAT,CAA6B,MAA7B,EAAqC,IAArC,EAA2C,QAA3C,EAAqD,UAArD,EAAiE,KAAjE,EAAwE,IAAxE;;AAEA;;AAEA,YAAS,wBAAT,CAAmC,oBAAnC,EAAyD,YAAzD;;AAEA;;AAEA,OAAI,WAAW,WAAW,QAA1B;AACA,YAAU,OAAV,EAAoB,KAApB,GAA4B,KAA5B;AACA,YAAU,gBAAV,EAA6B,KAA7B,GAAqC,cAArC;;AAEA,YAAS,kBAAT,CAA6B,MAA7B,EAAqC,IAArC,EAA2C,QAA3C,EAAqD,UAArD,EAAiE,KAAjE,EAAwE,IAAxE;;AAEA;;AAEA,OAAI,OAAO,CAAE,eAAe,CAAjB,GAAqB,CAAhC;AACA,OAAI,OAAO,CAAE,eAAe,CAAjB,GAAqB,CAAhC;;AAEA,QAAM,IAAI,IAAI,CAAR,EAAW,IAAI,SAAS,MAA9B,EAAsC,IAAI,CAA1C,EAA6C,GAA7C,EAAoD;;AAEnD,QAAI,UAAU,SAAU,CAAV,CAAd;;AAEA,QAAI,WAAW,UAAU,QAAzB;;AAEA,aAAU,OAAV,EAAoB,KAApB,CAA0B,IAA1B,CAAgC,QAAQ,KAAxC;AACA,aAAU,KAAV,EAAkB,KAAlB,GAA0B,QAAQ,OAAlC;AACA,aAAU,gBAAV,EAA6B,KAA7B,CAAmC,CAAnC,GAAuC,eAAe,CAAf,GAAmB,OAAO,QAAQ,QAAzE;AACA,aAAU,gBAAV,EAA6B,KAA7B,CAAmC,CAAnC,GAAuC,eAAe,CAAf,GAAmB,OAAO,QAAQ,QAAzE;;AAEA,QAAI,OAAO,QAAQ,IAAR,GAAe,SAAS,CAAnC;AACA,QAAI,YAAY,SAAS,CAAT,GAAa,SAAS,CAAtC;;AAEA,aAAU,OAAV,EAAoB,KAApB,CAA0B,GAA1B,CAA+B,OAAO,SAAtC,EAAiD,IAAjD;;AAEA,cAAU,kBAAV,GAA+B,IAA/B;;AAEA,aAAS,kBAAT,CAA6B,MAA7B,EAAqC,IAArC,EAA2C,QAA3C,EAAqD,SAArD,EAAgE,KAAhE,EAAuE,IAAvE;AAEA;AAED;AAED,EArFD;;AAuFA,MAAK,OAAL,GAAe,YAAY;;AAE1B,aAAW,OAAX;AACA,aAAW,OAAX;AACA,YAAU,OAAV;;AAEA,UAAQ,OAAR;AACA,eAAa,OAAb;;AAEA,OAAM,IAAI,IAAI,CAAR,EAAW,IAAI,SAAS,MAA9B,EAAsC,IAAI,CAA1C,EAA6C,GAA7C,EAAoD;;AAEnD,YAAU,CAAV,EAAc,OAAd,CAAsB,OAAtB;AAEA;AAED,EAfD;AAiBA,CAnQD;;AAqQA,MAAM,SAAN,CAAgB,SAAhB,GAA4B,OAAO,MAAP,CAAe,MAAM,IAAN,CAAW,SAA1B,CAA5B;AACA,MAAM,SAAN,CAAgB,SAAhB,CAA0B,WAA1B,GAAwC,MAAM,SAA9C;AACA,MAAM,SAAN,CAAgB,SAAhB,CAA0B,WAA1B,GAAwC,IAAxC;;AAEA;;AAEA,MAAM,gBAAN,GAAyB,UAAW,OAAX,EAAoB,IAApB,EAA0B,QAA1B,EAAoC,KAApC,EAA4C;;AAEpE,MAAK,OAAL,GAAe,OAAf;AACA,MAAK,IAAL,GAAY,QAAQ,CAApB;AACA,MAAK,QAAL,GAAgB,YAAY,CAA5B;AACA,MAAK,KAAL,GAAa,SAAS,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAtB;AAEA,CAPD;;AASA,MAAM,gBAAN,CAAuB,MAAvB,GAAgC;;AAE/B,WAAU;;AAET,SAAO,EAAE,OAAO,IAAT,EAFE;AAGT,kBAAgB,EAAE,OAAO,IAAT,EAHP;AAIT,WAAS,EAAE,OAAO,IAAT,EAJA;AAKT,WAAS,EAAE,OAAO,IAAT,EALA;AAMT,oBAAkB,EAAE,OAAO,IAAT;;AANT,EAFqB;;AAY/B,eAAc,CAEb,wBAFa,EAIb,8BAJa,EAKb,qBALa,EAOb,iCAPa,EASb,0BATa,EAUb,oBAVa,EAYb,mBAZa,EAab,4BAba,EAeb,eAfa,EAiBb,YAjBa,EAmBb,0BAnBa,EAqBb,iEArBa,EAsBb,6DAtBa,EAuBb,6DAvBa,EAwBb,6DAxBa,EAyBb,6DAzBa,EA0Bb,6DA1Ba,EA2Bb,6DA3Ba,EA4Bb,6DA5Ba,EA6Bb,6DA7Ba,EA+Bb,2CA/Ba,EAgCb,2CAhCa,EAiCb,2CAjCa,EAmCb,uFAnCa,EAqCb,GArCa,EAuCZ,IAvCY,CAuCN,IAvCM,CAZiB;;AAqD/B,iBAAgB,CAEf,wBAFe,EAIf,wBAJe,EAKf,qBALe,EAOf,mBAPe,EAQf,4BARe,EAUf,eAVe,EAYf,wCAZe,EAaf,4BAbe,EAcf,0BAde,EAef,6BAfe,EAiBf,GAjBe,EAmBd,IAnBc,CAmBR,IAnBQ;;AArDe,CAAhC;;AA4EA,MAAM,SAAN,CAAgB,QAAhB,GAA6B,YAAY;;AAExC,KAAI,WAAW,IAAI,MAAM,cAAV,EAAf;;AAEA,KAAI,eAAe,IAAI,YAAJ,CAAkB,CACpC,CAAE,CADkC,EAC/B,CAAE,CAD6B,EAC1B,CAD0B,EACvB,CADuB,EACpB,CADoB,EAEpC,CAFoC,EAEjC,CAAE,CAF+B,EAE5B,CAF4B,EAEzB,CAFyB,EAEtB,CAFsB,EAGpC,CAHoC,EAGjC,CAHiC,EAG9B,CAH8B,EAG3B,CAH2B,EAGxB,CAHwB,EAIpC,CAAE,CAJkC,EAI/B,CAJ+B,EAI5B,CAJ4B,EAIzB,CAJyB,EAItB,CAJsB,CAAlB,CAAnB;;AAOA,KAAI,oBAAoB,IAAI,MAAM,iBAAV,CAA6B,YAA7B,EAA2C,CAA3C,CAAxB;;AAEA,UAAS,QAAT,CAAmB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAnB;AACA,UAAS,YAAT,CAAuB,UAAvB,EAAmC,IAAI,MAAM,0BAAV,CAAsC,iBAAtC,EAAyD,CAAzD,EAA4D,CAA5D,EAA+D,KAA/D,CAAnC;AACA,UAAS,YAAT,CAAuB,IAAvB,EAA6B,IAAI,MAAM,0BAAV,CAAsC,iBAAtC,EAAyD,CAAzD,EAA4D,CAA5D,EAA+D,KAA/D,CAA7B;;AAEA,QAAO,QAAP;AAEA,CAnB0B,EAA3B","file":"Lensflare-compiled.js","sourcesContent":["console.warn( \"THREE.Lensflare: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.Lensflare = function () {\n\n\tTHREE.Mesh.call( this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial( { opacity: 0, transparent: true } ) );\n\n\tthis.type = 'Lensflare';\n\tthis.frustumCulled = false;\n\tthis.renderOrder = Infinity;\n\n\t//\n\n\tvar positionScreen = new THREE.Vector3();\n\tvar positionView = new THREE.Vector3();\n\n\t// textures\n\n\tvar tempMap = new THREE.DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, THREE.RGBFormat );\n\ttempMap.minFilter = THREE.NearestFilter;\n\ttempMap.magFilter = THREE.NearestFilter;\n\ttempMap.wrapS = THREE.ClampToEdgeWrapping;\n\ttempMap.wrapT = THREE.ClampToEdgeWrapping;\n\n\tvar occlusionMap = new THREE.DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, THREE.RGBFormat );\n\tocclusionMap.minFilter = THREE.NearestFilter;\n\tocclusionMap.magFilter = THREE.NearestFilter;\n\tocclusionMap.wrapS = THREE.ClampToEdgeWrapping;\n\tocclusionMap.wrapT = THREE.ClampToEdgeWrapping;\n\n\t// material\n\n\tvar geometry = THREE.Lensflare.Geometry;\n\n\tvar material1a = new THREE.RawShaderMaterial( {\n\t\tuniforms: {\n\t\t\t'scale': { value: null },\n\t\t\t'screenPosition': { value: null }\n\t\t},\n\t\tvertexShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform vec3 screenPosition;',\n\t\t\t'uniform vec2 scale;',\n\n\t\t\t'attribute vec3 position;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\t\tfragmentShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\t\tdepthTest: true,\n\t\tdepthWrite: false,\n\t\ttransparent: false\n\t} );\n\n\tvar material1b = new THREE.RawShaderMaterial( {\n\t\tuniforms: {\n\t\t\t'map': { value: tempMap },\n\t\t\t'scale': { value: null },\n\t\t\t'screenPosition': { value: null }\n\t\t},\n\t\tvertexShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform vec3 screenPosition;',\n\t\t\t'uniform vec2 scale;',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUV = uv;',\n\n\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\t\tfragmentShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform sampler2D map;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tgl_FragColor = texture2D( map, vUV );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: false\n\t} );\n\n\t// the following object is used for occlusionMap generation\n\n\tvar mesh1 = new THREE.Mesh( geometry, material1a );\n\n\t//\n\n\tvar elements = [];\n\n\tvar shader = THREE.LensflareElement.Shader;\n\n\tvar material2 = new THREE.RawShaderMaterial( {\n\t\tuniforms: {\n\t\t\t'map': { value: null },\n\t\t\t'occlusionMap': { value: occlusionMap },\n\t\t\t'color': { value: new THREE.Color( 0xffffff ) },\n\t\t\t'scale': { value: new THREE.Vector2() },\n\t\t\t'screenPosition': { value: new THREE.Vector3() }\n\t\t},\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader,\n\t\tblending: THREE.AdditiveBlending,\n\t\ttransparent: true,\n\t\tdepthWrite: false\n\t} );\n\n\tvar mesh2 = new THREE.Mesh( geometry, material2 );\n\n\tthis.addElement = function ( element ) {\n\n\t\telements.push( element );\n\n\t};\n\n\t//\n\n\tvar scale = new THREE.Vector2();\n\tvar screenPositionPixels = new THREE.Vector2();\n\tvar validArea = new THREE.Box2();\n\tvar viewport = new THREE.Vector4();\n\n\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\trenderer.getCurrentViewport( viewport );\n\n\t\tvar invAspect = viewport.w / viewport.z;\n\t\tvar halfViewportWidth = viewport.z / 2.0;\n\t\tvar halfViewportHeight = viewport.w / 2.0;\n\n\t\tvar size = 16 / viewport.w;\n\t\tscale.set( size * invAspect, size );\n\n\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t// calculate position in screen space\n\n\t\tpositionView.setFromMatrixPosition( this.matrixWorld );\n\t\tpositionView.applyMatrix4( camera.matrixWorldInverse );\n\n\t\tif ( positionView.z > 0 ) return; // lensflare is behind the camera\n\n\t\tpositionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );\n\n\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\tscreenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\tscreenPositionPixels.y = viewport.y + ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t// screen cull\n\n\t\tif ( validArea.containsPoint( screenPositionPixels ) ) {\n\n\t\t\t// save current RGB to temp texture\n\n\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, tempMap );\n\n\t\t\t// render pink quad\n\n\t\t\tvar uniforms = material1a.uniforms;\n\t\t\tuniforms[ \"scale\" ].value = scale;\n\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\n\n\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1a, mesh1, null );\n\n\t\t\t// copy result to occlusionMap\n\n\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, occlusionMap );\n\n\t\t\t// restore graphics\n\n\t\t\tvar uniforms = material1b.uniforms;\n\t\t\tuniforms[ \"scale\" ].value = scale;\n\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\n\n\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1b, mesh1, null );\n\n\t\t\t// render elements\n\n\t\t\tvar vecX = - positionScreen.x * 2;\n\t\t\tvar vecY = - positionScreen.y * 2;\n\n\t\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\tvar element = elements[ i ];\n\n\t\t\t\tvar uniforms = material2.uniforms;\n\n\t\t\t\tuniforms[ \"color\" ].value.copy( element.color );\n\t\t\t\tuniforms[ \"map\" ].value = element.texture;\n\t\t\t\tuniforms[ \"screenPosition\" ].value.x = positionScreen.x + vecX * element.distance;\n\t\t\t\tuniforms[ \"screenPosition\" ].value.y = positionScreen.y + vecY * element.distance;\n\n\t\t\t\tvar size = element.size / viewport.w;\n\t\t\t\tvar invAspect = viewport.w / viewport.z;\n\n\t\t\t\tuniforms[ \"scale\" ].value.set( size * invAspect, size );\n\n\t\t\t\tmaterial2.uniformsNeedUpdate = true;\n\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material2, mesh2, null );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tmaterial1a.dispose();\n\t\tmaterial1b.dispose();\n\t\tmaterial2.dispose();\n\n\t\ttempMap.dispose();\n\t\tocclusionMap.dispose();\n\n\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\telements[ i ].texture.dispose();\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.Lensflare.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.Lensflare.prototype.constructor = THREE.Lensflare;\nTHREE.Lensflare.prototype.isLensflare = true;\n\n//\n\nTHREE.LensflareElement = function ( texture, size, distance, color ) {\n\n\tthis.texture = texture;\n\tthis.size = size || 1;\n\tthis.distance = distance || 0;\n\tthis.color = color || new THREE.Color( 0xffffff );\n\n};\n\nTHREE.LensflareElement.Shader = {\n\n\tuniforms: {\n\n\t\t'map': { value: null },\n\t\t'occlusionMap': { value: null },\n\t\t'color': { value: null },\n\t\t'scale': { value: null },\n\t\t'screenPosition': { value: null }\n\n\t},\n\n\tvertexShader: [\n\n\t\t'precision highp float;',\n\n\t\t'uniform vec3 screenPosition;',\n\t\t'uniform vec2 scale;',\n\n\t\t'uniform sampler2D occlusionMap;',\n\n\t\t'attribute vec3 position;',\n\t\t'attribute vec2 uv;',\n\n\t\t'varying vec2 vUV;',\n\t\t'varying float vVisibility;',\n\n\t\t'void main() {',\n\n\t\t'\tvUV = uv;',\n\n\t\t'\tvec2 pos = position.xy;',\n\n\t\t'\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\n\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\n\n\t\t'\tvVisibility =        visibility.r / 9.0;',\n\t\t'\tvVisibility *= 1.0 - visibility.g / 9.0;',\n\t\t'\tvVisibility *=       visibility.b / 9.0;',\n\n\t\t'\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\n\n\t\t'}'\n\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\n\t\t'precision highp float;',\n\n\t\t'uniform sampler2D map;',\n\t\t'uniform vec3 color;',\n\n\t\t'varying vec2 vUV;',\n\t\t'varying float vVisibility;',\n\n\t\t'void main() {',\n\n\t\t'\tvec4 texture = texture2D( map, vUV );',\n\t\t'\ttexture.a *= vVisibility;',\n\t\t'\tgl_FragColor = texture;',\n\t\t'\tgl_FragColor.rgb *= color;',\n\n\t\t'}'\n\n\t].join( '\\n' )\n\n};\n\nTHREE.Lensflare.Geometry = ( function () {\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar float32Array = new Float32Array( [\n\t\t- 1, - 1, 0, 0, 0,\n\t\t1, - 1, 0, 1, 0,\n\t\t1, 1, 0, 1, 1,\n\t\t- 1, 1, 0, 0, 1\n\t] );\n\n\tvar interleavedBuffer = new THREE.InterleavedBuffer( float32Array, 5 );\n\n\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\tgeometry.setAttribute( 'position', new THREE.InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\tgeometry.setAttribute( 'uv', new THREE.InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\treturn geometry;\n\n} )();\n"]}