{"version":3,"sources":["Sky.js"],"names":[],"mappings":"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","file":"Sky-compiled.js","sourcesContent":["console.warn( \"THREE.Sky: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nTHREE.Sky = function () {\n\n\tvar shader = THREE.Sky.SkyShader;\n\n\tvar material = new THREE.ShaderMaterial( {\n\t\tname: 'SkyShader',\n\t\tfragmentShader: shader.fragmentShader,\n\t\tvertexShader: shader.vertexShader,\n\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\tside: THREE.BackSide,\n\t\tdepthWrite: false\n\t} );\n\n\tTHREE.Mesh.call( this, new THREE.BoxBufferGeometry( 1, 1, 1 ), material );\n\n};\n\nTHREE.Sky.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.Sky.SkyShader = {\n\n\tuniforms: {\n\t\t\"turbidity\": { value: 2 },\n\t\t\"rayleigh\": { value: 1 },\n\t\t\"mieCoefficient\": { value: 0.005 },\n\t\t\"mieDirectionalG\": { value: 0.8 },\n\t\t\"sunPosition\": { value: new THREE.Vector3() },\n\t\t\"up\": { value: new THREE.Vector3( 0, 1, 0 ) }\n\t},\n\n\tvertexShader: [\n\t\t'uniform vec3 sunPosition;',\n\t\t'uniform float rayleigh;',\n\t\t'uniform float turbidity;',\n\t\t'uniform float mieCoefficient;',\n\t\t'uniform vec3 up;',\n\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t// wavelength of used primaries, according to preetham\n\t\t'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\t'const float v = 4.0;',\n\t\t'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\t'const float cutoffAngle = 1.6110731556870734;',\n\t\t'const float steepness = 1.5;',\n\t\t'const float EE = 1000.0;',\n\n\t\t'float sunIntensity( float zenithAngleCos ) {',\n\t\t'\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\n\t\t'\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\n\t\t'}',\n\n\t\t'vec3 totalMie( float T ) {',\n\t\t'\tfloat c = ( 0.2 * T ) * 10E-18;',\n\t\t'\treturn 0.434 * c * MieConst;',\n\t\t'}',\n\n\t\t'void main() {',\n\n\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t'\tvWorldPosition = worldPosition.xyz;',\n\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\t\t'\tgl_Position.z = gl_Position.w;', // set z to camera.far\n\n\t\t'\tvSunDirection = normalize( sunPosition );',\n\n\t\t'\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\n\n\t\t'\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );',\n\n\t\t'\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n\n\t\t// extinction (absorbtion + out scattering)\n\t\t// rayleigh coefficients\n\t\t'\tvBetaR = totalRayleigh * rayleighCoefficient;',\n\n\t\t// mie coefficients\n\t\t'\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\n\n\t\t'}'\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t'uniform float mieDirectionalG;',\n\t\t'uniform vec3 up;',\n\n\t\t'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t'const float n = 1.0003;', // refractive index of air\n\t\t'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\t'const float rayleighZenithLength = 8.4E3;',\n\t\t'const float mieZenithLength = 1.25E3;',\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\t'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n\t\t// 1.0 / ( 4.0 * pi )\n\t\t'const float ONE_OVER_FOURPI = 0.07957747154594767;',\n\n\t\t'float rayleighPhase( float cosTheta ) {',\n\t\t'\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\n\t\t'}',\n\n\t\t'float hgPhase( float cosTheta, float g ) {',\n\t\t'\tfloat g2 = pow( g, 2.0 );',\n\t\t'\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\n\t\t'\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\n\t\t'}',\n\n\t\t'void main() {',\n\n\t\t'\tvec3 direction = normalize( vWorldPosition - cameraPos );',\n\n\t\t// optical length\n\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t'\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );',\n\t\t'\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\n\t\t'\tfloat sR = rayleighZenithLength * inverse;',\n\t\t'\tfloat sM = mieZenithLength * inverse;',\n\n\t\t// combined extinction factor\n\t\t'\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n\n\t\t// in scattering\n\t\t'\tfloat cosTheta = dot( direction, vSunDirection );',\n\n\t\t'\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\n\t\t'\tvec3 betaRTheta = vBetaR * rPhase;',\n\n\t\t'\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\n\t\t'\tvec3 betaMTheta = vBetaM * mPhase;',\n\n\t\t'\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\n\t\t'\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\n\n\t\t// nightsky\n\t\t'\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]',\n\t\t'\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\n\t\t'\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\n\t\t'\tvec3 L0 = vec3( 0.1 ) * Fex;',\n\n\t\t// composition + solar disc\n\t\t'\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\n\t\t'\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\n\n\t\t'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n\n\t\t'\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\n\n\t\t'\tgl_FragColor = vec4( retColor, 1.0 );',\n\n\t\t'#include <tonemapping_fragment>',\n\t\t'#include <encodings_fragment>',\n\n\t\t'}'\n\t].join( '\\n' )\n\n};\n"]}