{"version":3,"sources":["DRACOExporter.js"],"names":[],"mappings":"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","file":"DRACOExporter-compiled.js","sourcesContent":["console.warn( \"THREE.DRACOExporter: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\n/* global DracoEncoderModule */\n\nTHREE.DRACOExporter = function () {};\n\nTHREE.DRACOExporter.prototype = {\n\n\tconstructor: THREE.DRACOExporter,\n\n\tparse: function ( geometry, options ) {\n\n\n\t\tif ( DracoEncoderModule === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOExporter: required the draco_decoder to work.' );\n\n\t\t}\n\n\t\tif ( options === undefined ) {\n\n\t\t\toptions = {\n\n\t\t\t\tdecodeSpeed: 5,\n\t\t\t\tencodeSpeed: 5,\n\t\t\t\tencoderMethod: THREE.DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n\t\t\t\tquantization: [ 16, 8, 8, 8, 8 ],\n\t\t\t\texportUvs: true,\n\t\t\t\texportNormals: true,\n\t\t\t\texportColor: false,\n\n\t\t\t};\n\n\t\t}\n\n\t\tvar dracoEncoder = DracoEncoderModule();\n\t\tvar encoder = new dracoEncoder.Encoder();\n\t\tvar builder = new dracoEncoder.MeshBuilder();\n\t\tvar mesh = new dracoEncoder.Mesh();\n\n\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\tvar bufferGeometry = new THREE.BufferGeometry();\n\t\t\tbufferGeometry.fromGeometry( geometry );\n\t\t\tgeometry = bufferGeometry;\n\n\t\t}\n\n\t\tif ( geometry.isBufferGeometry !== true ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or THREE.BufferGeometry instance.' );\n\n\t\t}\n\n\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array );\n\n\t\tvar faces = geometry.getIndex();\n\n\t\tif ( faces !== null ) {\n\n\t\t\tbuilder.AddFacesToMesh( mesh, faces.count / 3, faces.array );\n\n\t\t} else {\n\n\t\t\tvar faces = new ( vertices.count > 65535 ? Uint32Array : Uint16Array )( vertices.count );\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tfaces[ i ] = i;\n\n\t\t\t}\n\n\t\t\tbuilder.AddFacesToMesh( mesh, vertices.count, faces );\n\n\t\t}\n\n\t\tif ( options.exportNormals === true ) {\n\n\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( options.exportUvs === true ) {\n\n\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( options.exportColor === true ) {\n\n\t\t\tvar colors = geometry.getAttribute( 'color' );\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//Compress using draco encoder\n\n\t\tvar encodedData = new dracoEncoder.DracoInt8Array();\n\n\t\t//Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n\t\tencoder.SetSpeedOptions( options.encodeSpeed || 5, options.decodeSpeed || 5 );\n\n\t\t// Sets the desired encoding method for a given geometry.\n\n\t\tif ( options.encoderMethod !== undefined ) {\n\n\t\t\tencoder.SetEncodingMethod( options.encoderMethod );\n\n\t\t}\n\n\t\t// Sets the quantization (number of bits used to represent) compression options for a named attribute.\n\t\t// The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\t\tif ( options.quantization !== undefined ) {\n\n\t\t\tfor ( var i = 0; i < 5; i ++ ) {\n\n\t\t\t\tif ( options.quantization[ i ] !== undefined ) {\n\n\t\t\t\t\tencoder.SetAttributeQuantization( i, options.quantization[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar length = encoder.EncodeMeshToDracoBuffer( mesh, encodedData );\n\t\tdracoEncoder.destroy( mesh );\n\n\t\tif ( length === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOExporter: Draco encoding failed.' );\n\n\t\t}\n\n\t\t//Copy encoded data to buffer.\n\t\tvar outputData = new Int8Array( new ArrayBuffer( length ) );\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\toutputData[ i ] = encodedData.GetValue( i );\n\n\t\t}\n\n\t\tdracoEncoder.destroy( encodedData );\n\t\tdracoEncoder.destroy( encoder );\n\t\tdracoEncoder.destroy( builder );\n\n\t\treturn outputData;\n\n\t}\n\n};\n\n// Encoder methods\n\nTHREE.DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\nTHREE.DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\n\n// Geometry type\n\nTHREE.DRACOExporter.POINT_CLOUD = 0;\nTHREE.DRACOExporter.TRIANGULAR_MESH = 1;\n\n// Attribute type\n\nTHREE.DRACOExporter.INVALID = - 1;\nTHREE.DRACOExporter.POSITION = 0;\nTHREE.DRACOExporter.NORMAL = 1;\nTHREE.DRACOExporter.COLOR = 2;\nTHREE.DRACOExporter.TEX_COORD = 3;\nTHREE.DRACOExporter.GENERIC = 4;\n"]}