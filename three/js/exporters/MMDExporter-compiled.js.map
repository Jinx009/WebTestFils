{"version":3,"sources":["MMDExporter.js"],"names":[],"mappings":"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","file":"MMDExporter-compiled.js","sourcesContent":["console.warn( \"THREE.MMDExporter: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nTHREE.MMDExporter = function () {\n\n\t// Unicode to Shift_JIS table\n\tvar u2sTable;\n\n\tfunction unicodeToShiftjis( str ) {\n\n\t\tif ( u2sTable === undefined ) {\n\n\t\t\tvar encoder = new MMDParser.CharsetEncoder(); // eslint-disable-line no-undef\n\t\t\tvar table = encoder.s2uTable;\n\t\t\tu2sTable = {};\n\n\t\t\tvar keys = Object.keys( table );\n\n\t\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tvar key = keys[ i ];\n\n\t\t\t\tvar value = table[ key ];\n\t\t\t\tkey = parseInt( key );\n\n\t\t\t\tu2sTable[ value ] = key;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0, il = str.length; i < il; i ++ ) {\n\n\t\t\tvar code = str.charCodeAt( i );\n\n\t\t\tvar value = u2sTable[ code ];\n\n\t\t\tif ( value === undefined ) {\n\n\t\t\t\tthrow 'cannot convert charcode 0x' + code.toString( 16 );\n\n\t\t\t} else if ( value > 0xff ) {\n\n\t\t\t\tarray.push( ( value >> 8 ) & 0xff );\n\t\t\t\tarray.push( value & 0xff );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( value & 0xff );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn new Uint8Array( array );\n\n\t}\n\n\tfunction getBindBones( skin ) {\n\n\t\t// any more efficient ways?\n\t\tvar poseSkin = skin.clone();\n\t\tposeSkin.pose();\n\t\treturn poseSkin.skeleton.bones;\n\n\t}\n\n\t/* TODO: implement\n\t// mesh -> pmd\n\tthis.parsePmd = function ( object ) {\n\n\t};\n\t*/\n\n\t/* TODO: implement\n\t// mesh -> pmx\n\tthis.parsePmx = function ( object ) {\n\n\t};\n\t*/\n\n\t/*\n\t * skeleton -> vpd\n\t * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n\t */\n\tthis.parseVpd = function ( skin, outputShiftJis, useOriginalBones ) {\n\n\t\tif ( skin.isSkinnedMesh !== true ) {\n\n\t\t\tconsole.warn( 'THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction toStringsFromNumber( num ) {\n\n\t\t\tif ( Math.abs( num ) < 1e-6 ) num = 0;\n\n\t\t\tvar a = num.toString();\n\n\t\t\tif ( a.indexOf( '.' ) === - 1 ) {\n\n\t\t\t\ta += '.';\n\n\t\t\t}\n\n\t\t\ta += '000000';\n\n\t\t\tvar index = a.indexOf( '.' );\n\n\t\t\tvar d = a.slice( 0, index );\n\t\t\tvar p = a.slice( index + 1, index + 7 );\n\n\t\t\treturn d + '.' + p;\n\n\t\t}\n\n\t\tfunction toStringsFromArray( array ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\ta.push( toStringsFromNumber( array[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn a.join( ',' );\n\n\t\t}\n\n\t\tskin.updateMatrixWorld( true );\n\n\t\tvar bones = skin.skeleton.bones;\n\t\tvar bones2 = getBindBones( skin );\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar quaternion2 = new THREE.Quaternion();\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\tvar array = [];\n\t\tarray.push( 'Vocaloid Pose Data file' );\n\t\tarray.push( '' );\n\t\tarray.push( ( skin.name !== '' ? skin.name.replace( /\\s/g, '_' ) : 'skin' ) + '.osm;' );\n\t\tarray.push( bones.length + ';' );\n\t\tarray.push( '' );\n\n\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\t\t\tvar bone2 = bones2[ i ];\n\n\t\t\t/*\n\t\t\t * use the bone matrix saved before solving IK.\n\t\t\t * see CCDIKSolver for the detail.\n\t\t\t */\n\t\t\tif ( useOriginalBones === true &&\n\t\t\t\tbone.userData.ik !== undefined &&\n\t\t\t\tbone.userData.ik.originalMatrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( bone.userData.ik.originalMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tmatrix.copy( bone.matrix );\n\n\t\t\t}\n\n\t\t\tposition.setFromMatrixPosition( matrix );\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tvar pArray = position.sub( bone2.position ).toArray();\n\t\t\tvar qArray = quaternion2.copy( bone2.quaternion ).conjugate().multiply( quaternion ).toArray();\n\n\t\t\t// right to left\n\t\t\tpArray[ 2 ] = - pArray[ 2 ];\n\t\t\tqArray[ 0 ] = - qArray[ 0 ];\n\t\t\tqArray[ 1 ] = - qArray[ 1 ];\n\n\t\t\tarray.push( 'Bone' + i + '{' + bone.name );\n\t\t\tarray.push( '  ' + toStringsFromArray( pArray ) + ';' );\n\t\t\tarray.push( '  ' + toStringsFromArray( qArray ) + ';' );\n\t\t\tarray.push( '}' );\n\t\t\tarray.push( '' );\n\n\t\t}\n\n\t\tarray.push( '' );\n\n\t\tvar lines = array.join( '\\n' );\n\n\t\treturn ( outputShiftJis === true ) ? unicodeToShiftjis( lines ) : lines;\n\n\t};\n\n\t/* TODO: implement\n\t// animation + skeleton -> vmd\n\tthis.parseVmd = function ( object ) {\n\n\t};\n\t*/\n\n};\n"]}