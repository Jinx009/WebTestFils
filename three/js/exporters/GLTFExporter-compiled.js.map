{"version":3,"sources":["GLTFExporter.js"],"names":[],"mappings":"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","file":"GLTFExporter-compiled.js","sourcesContent":["console.warn( \"THREE.GLTFExporter: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\nvar WEBGL_CONSTANTS = {\n\tPOINTS: 0x0000,\n\tLINES: 0x0001,\n\tLINE_LOOP: 0x0002,\n\tLINE_STRIP: 0x0003,\n\tTRIANGLES: 0x0004,\n\tTRIANGLE_STRIP: 0x0005,\n\tTRIANGLE_FAN: 0x0006,\n\n\tUNSIGNED_BYTE: 0x1401,\n\tUNSIGNED_SHORT: 0x1403,\n\tFLOAT: 0x1406,\n\tUNSIGNED_INT: 0x1405,\n\tARRAY_BUFFER: 0x8892,\n\tELEMENT_ARRAY_BUFFER: 0x8893,\n\n\tNEAREST: 0x2600,\n\tLINEAR: 0x2601,\n\tNEAREST_MIPMAP_NEAREST: 0x2700,\n\tLINEAR_MIPMAP_NEAREST: 0x2701,\n\tNEAREST_MIPMAP_LINEAR: 0x2702,\n\tLINEAR_MIPMAP_LINEAR: 0x2703,\n\n\tCLAMP_TO_EDGE: 33071,\n\tMIRRORED_REPEAT: 33648,\n\tREPEAT: 10497\n};\n\nvar THREE_TO_WEBGL = {};\n\nTHREE_TO_WEBGL[ THREE.NearestFilter ] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[ THREE.NearestMipmapNearestFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ THREE.NearestMipmapLinearFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ THREE.LinearFilter ] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[ THREE.LinearMipmapNearestFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ THREE.LinearMipmapLinearFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n\nTHREE_TO_WEBGL[ THREE.ClampToEdgeWrapping ] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[ THREE.RepeatWrapping ] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[ THREE.MirroredRepeatWrapping ] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n\nvar PATH_PROPERTIES = {\n\tscale: 'scale',\n\tposition: 'translation',\n\tquaternion: 'rotation',\n\tmorphTargetInfluences: 'weights'\n};\n\n//------------------------------------------------------------------------------\n// GLTF Exporter\n//------------------------------------------------------------------------------\nTHREE.GLTFExporter = function () {};\n\nTHREE.GLTFExporter.prototype = {\n\n\tconstructor: THREE.GLTFExporter,\n\n\t/**\n\t * Parse scenes and generate GLTF output\n\t * @param  {THREE.Scene or [THREE.Scenes]} input   THREE.Scene or Array of THREE.Scenes\n\t * @param  {Function} onDone  Callback on completed\n\t * @param  {Object} options options\n\t */\n\tparse: function ( input, onDone, options ) {\n\n\t\tvar DEFAULT_OPTIONS = {\n\t\t\tbinary: false,\n\t\t\ttrs: false,\n\t\t\tonlyVisible: true,\n\t\t\ttruncateDrawRange: true,\n\t\t\tembedImages: true,\n\t\t\tmaxTextureSize: Infinity,\n\t\t\tanimations: [],\n\t\t\tforcePowerOfTwoTextures: false,\n\t\t\tincludeCustomExtensions: false\n\t\t};\n\n\t\toptions = Object.assign( {}, DEFAULT_OPTIONS, options );\n\n\t\tif ( options.animations.length > 0 ) {\n\n\t\t\t// Only TRS properties, and not matrices, may be targeted by animation.\n\t\t\toptions.trs = true;\n\n\t\t}\n\n\t\tvar outputJSON = {\n\n\t\t\tasset: {\n\n\t\t\t\tversion: \"2.0\",\n\t\t\t\tgenerator: \"THREE.GLTFExporter\"\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar byteOffset = 0;\n\t\tvar buffers = [];\n\t\tvar pending = [];\n\t\tvar nodeMap = new Map();\n\t\tvar skins = [];\n\t\tvar extensionsUsed = {};\n\t\tvar cachedData = {\n\n\t\t\tmeshes: new Map(),\n\t\t\tattributes: new Map(),\n\t\t\tattributesNormalized: new Map(),\n\t\t\tmaterials: new Map(),\n\t\t\ttextures: new Map(),\n\t\t\timages: new Map()\n\n\t\t};\n\n\t\tvar cachedCanvas;\n\n\t\tvar uids = new Map();\n\t\tvar uid = 0;\n\n\t\t/**\n\t\t * Assign and return a temporal unique id for an object\n\t\t * especially which doesn't have .uuid\n\t\t * @param  {Object} object\n\t\t * @return {Integer}\n\t\t */\n\t\tfunction getUID( object ) {\n\n\t\t\tif ( ! uids.has( object ) ) uids.set( object, uid ++ );\n\n\t\t\treturn uids.get( object );\n\n\t\t}\n\n\t\t/**\n\t\t * Compare two arrays\n\t\t * @param  {Array} array1 Array 1 to compare\n\t\t * @param  {Array} array2 Array 2 to compare\n\t\t * @return {Boolean}        Returns true if both arrays are equal\n\t\t */\n\t\tfunction equalArray( array1, array2 ) {\n\n\t\t\treturn ( array1.length === array2.length ) && array1.every( function ( element, index ) {\n\n\t\t\t\treturn element === array2[ index ];\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * Converts a string to an ArrayBuffer.\n\t\t * @param  {string} text\n\t\t * @return {ArrayBuffer}\n\t\t */\n\t\tfunction stringToArrayBuffer( text ) {\n\n\t\t\tif ( window.TextEncoder !== undefined ) {\n\n\t\t\t\treturn new TextEncoder().encode( text ).buffer;\n\n\t\t\t}\n\n\t\t\tvar array = new Uint8Array( new ArrayBuffer( text.length ) );\n\n\t\t\tfor ( var i = 0, il = text.length; i < il; i ++ ) {\n\n\t\t\t\tvar value = text.charCodeAt( i );\n\n\t\t\t\t// Replacing multi-byte character with space(0x20).\n\t\t\t\tarray[ i ] = value > 0xFF ? 0x20 : value;\n\n\t\t\t}\n\n\t\t\treturn array.buffer;\n\n\t\t}\n\n\t\t/**\n\t\t * Get the min and max vectors from the given attribute\n\t\t * @param  {THREE.BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n\t\t * @param  {Integer} start\n\t\t * @param  {Integer} count\n\t\t * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n\t\t */\n\t\tfunction getMinMax( attribute, start, count ) {\n\n\t\t\tvar output = {\n\n\t\t\t\tmin: new Array( attribute.itemSize ).fill( Number.POSITIVE_INFINITY ),\n\t\t\t\tmax: new Array( attribute.itemSize ).fill( Number.NEGATIVE_INFINITY )\n\n\t\t\t};\n\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\tvar value = attribute.array[ i * attribute.itemSize + a ];\n\t\t\t\t\toutput.min[ a ] = Math.min( output.min[ a ], value );\n\t\t\t\t\toutput.max[ a ] = Math.max( output.max[ a ], value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\t/**\n\t\t * Checks if image size is POT.\n\t\t *\n\t\t * @param {Image} image The image to be checked.\n\t\t * @returns {Boolean} Returns true if image size is POT.\n\t\t *\n\t\t */\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn THREE.MathUtils.isPowerOfTwo( image.width ) && THREE.MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\t/**\n\t\t * Checks if normal attribute values are normalized.\n\t\t *\n\t\t * @param {THREE.BufferAttribute} normal\n\t\t * @returns {Boolean}\n\t\t *\n\t\t */\n\t\tfunction isNormalizedNormalAttribute( normal ) {\n\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\tfor ( var i = 0, il = normal.count; i < il; i ++ ) {\n\n\t\t\t\t// 0.0005 is from glTF-validator\n\t\t\t\tif ( Math.abs( v.fromArray( normal.array, i * 3 ).length() - 1.0 ) > 0.0005 ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t/**\n\t\t * Creates normalized normal buffer attribute.\n\t\t *\n\t\t * @param {THREE.BufferAttribute} normal\n\t\t * @returns {THREE.BufferAttribute}\n\t\t *\n\t\t */\n\t\tfunction createNormalizedNormalAttribute( normal ) {\n\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\treturn cachedData.attributesNormalized.get( normal );\n\n\t\t\t}\n\n\t\t\tvar attribute = normal.clone();\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\tfor ( var i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t\tv.fromArray( attribute.array, i * 3 );\n\n\t\t\t\tif ( v.x === 0 && v.y === 0 && v.z === 0 ) {\n\n\t\t\t\t\t// if values can't be normalized set (1, 0, 0)\n\t\t\t\t\tv.setX( 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv.normalize();\n\n\t\t\t\t}\n\n\t\t\t\tv.toArray( attribute.array, i * 3 );\n\n\t\t\t}\n\n\t\t\tcachedData.attributesNormalized.set( normal, attribute );\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\t/**\n\t\t * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n\t\t * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n\t\t *\n\t\t * @param {Integer} bufferSize The size the original buffer.\n\t\t * @returns {Integer} new buffer size with required padding.\n\t\t *\n\t\t */\n\t\tfunction getPaddedBufferSize( bufferSize ) {\n\n\t\t\treturn Math.ceil( bufferSize / 4 ) * 4;\n\n\t\t}\n\n\t\t/**\n\t\t * Returns a buffer aligned to 4-byte boundary.\n\t\t *\n\t\t * @param {ArrayBuffer} arrayBuffer Buffer to pad\n\t\t * @param {Integer} paddingByte (Optional)\n\t\t * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n\t\t */\n\t\tfunction getPaddedArrayBuffer( arrayBuffer, paddingByte ) {\n\n\t\t\tpaddingByte = paddingByte || 0;\n\n\t\t\tvar paddedLength = getPaddedBufferSize( arrayBuffer.byteLength );\n\n\t\t\tif ( paddedLength !== arrayBuffer.byteLength ) {\n\n\t\t\t\tvar array = new Uint8Array( paddedLength );\n\t\t\t\tarray.set( new Uint8Array( arrayBuffer ) );\n\n\t\t\t\tif ( paddingByte !== 0 ) {\n\n\t\t\t\t\tfor ( var i = arrayBuffer.byteLength; i < paddedLength; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = paddingByte;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn array.buffer;\n\n\t\t\t}\n\n\t\t\treturn arrayBuffer;\n\n\t\t}\n\n\t\t/**\n\t\t * Serializes a userData.\n\t\t *\n\t\t * @param {THREE.Object3D|THREE.Material} object\n\t\t * @param {Object} gltfProperty\n\t\t */\n\t\tfunction serializeUserData( object, gltfProperty ) {\n\n\t\t\tif ( Object.keys( object.userData ).length === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar json = JSON.parse( JSON.stringify( object.userData ) );\n\n\t\t\t\tif ( options.includeCustomExtensions && json.gltfExtensions ) {\n\n\t\t\t\t\tif ( gltfProperty.extensions === undefined ) {\n\n\t\t\t\t\t\tgltfProperty.extensions = {};\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var extensionName in json.gltfExtensions ) {\n\n\t\t\t\t\t\tgltfProperty.extensions[ extensionName ] = json.gltfExtensions[ extensionName ];\n\t\t\t\t\t\textensionsUsed[ extensionName ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete json.gltfExtensions;\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( json ).length > 0 ) {\n\n\t\t\t\t\tgltfProperty.extras = json;\n\n\t\t\t\t}\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' +\n\t\t\t\t\t'won\\'t be serialized because of JSON.stringify error - ' + error.message );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Applies a texture transform, if present, to the map definition. Requires\n\t\t * the KHR_texture_transform extension.\n\t\t */\n\t\tfunction applyTextureTransform( mapDef, texture ) {\n\n\t\t\tvar didTransform = false;\n\t\t\tvar transformDef = {};\n\n\t\t\tif ( texture.offset.x !== 0 || texture.offset.y !== 0 ) {\n\n\t\t\t\ttransformDef.offset = texture.offset.toArray();\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( texture.rotation !== 0 ) {\n\n\t\t\t\ttransformDef.rotation = texture.rotation;\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( texture.repeat.x !== 1 || texture.repeat.y !== 1 ) {\n\n\t\t\t\ttransformDef.scale = texture.repeat.toArray();\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( didTransform ) {\n\n\t\t\t\tmapDef.extensions = mapDef.extensions || {};\n\t\t\t\tmapDef.extensions[ 'KHR_texture_transform' ] = transformDef;\n\t\t\t\textensionsUsed[ 'KHR_texture_transform' ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Process a buffer to append to the default one.\n\t\t * @param  {ArrayBuffer} buffer\n\t\t * @return {Integer}\n\t\t */\n\t\tfunction processBuffer( buffer ) {\n\n\t\t\tif ( ! outputJSON.buffers ) {\n\n\t\t\t\toutputJSON.buffers = [ { byteLength: 0 } ];\n\n\t\t\t}\n\n\t\t\t// All buffers are merged before export.\n\t\t\tbuffers.push( buffer );\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\t/**\n\t\t * Process and generate a BufferView\n\t\t * @param  {THREE.BufferAttribute} attribute\n\t\t * @param  {number} componentType\n\t\t * @param  {number} start\n\t\t * @param  {number} count\n\t\t * @param  {number} target (Optional) Target usage of the BufferView\n\t\t * @return {Object}\n\t\t */\n\t\tfunction processBufferView( attribute, componentType, start, count, target ) {\n\n\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t}\n\n\t\t\t// Create a new dataview and dump the attribute's array into it\n\n\t\t\tvar componentSize;\n\n\t\t\tif ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\tcomponentSize = 1;\n\n\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\tcomponentSize = 2;\n\n\t\t\t} else {\n\n\t\t\t\tcomponentSize = 4;\n\n\t\t\t}\n\n\t\t\tvar byteLength = getPaddedBufferSize( count * attribute.itemSize * componentSize );\n\t\t\tvar dataView = new DataView( new ArrayBuffer( byteLength ) );\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\tvar value;\n\n\t\t\t\t\tif ( attribute.itemSize > 4 ) {\n\n\t\t\t\t\t\t // no support for interleaved data for itemSize > 4\n\n\t\t\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\n\t\t\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\n\t\t\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\n\t\t\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( componentType === WEBGL_CONSTANTS.FLOAT ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_INT ) {\n\n\t\t\t\t\t\tdataView.setUint32( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\t\t\tdataView.setUint16( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\t\t\tdataView.setUint8( offset, value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += componentSize;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar gltfBufferView = {\n\n\t\t\t\tbuffer: processBuffer( dataView.buffer ),\n\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\tbyteLength: byteLength\n\n\t\t\t};\n\n\t\t\tif ( target !== undefined ) gltfBufferView.target = target;\n\n\t\t\tif ( target === WEBGL_CONSTANTS.ARRAY_BUFFER ) {\n\n\t\t\t\t// Only define byteStride for vertex attributes.\n\t\t\t\tgltfBufferView.byteStride = attribute.itemSize * componentSize;\n\n\t\t\t}\n\n\t\t\tbyteOffset += byteLength;\n\n\t\t\toutputJSON.bufferViews.push( gltfBufferView );\n\n\t\t\t// @TODO Merge bufferViews where possible.\n\t\t\tvar output = {\n\n\t\t\t\tid: outputJSON.bufferViews.length - 1,\n\t\t\t\tbyteLength: 0\n\n\t\t\t};\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\t/**\n\t\t * Process and generate a BufferView from an image Blob.\n\t\t * @param {Blob} blob\n\t\t * @return {Promise<Integer>}\n\t\t */\n\t\tfunction processBufferViewImage( blob ) {\n\n\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\tvar buffer = getPaddedArrayBuffer( reader.result );\n\n\t\t\t\t\tvar bufferView = {\n\t\t\t\t\t\tbuffer: processBuffer( buffer ),\n\t\t\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\t\t\tbyteLength: buffer.byteLength\n\t\t\t\t\t};\n\n\t\t\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t\t\t\toutputJSON.bufferViews.push( bufferView );\n\n\t\t\t\t\tresolve( outputJSON.bufferViews.length - 1 );\n\n\t\t\t\t};\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * Process attribute to generate an accessor\n\t\t * @param  {THREE.BufferAttribute} attribute Attribute to process\n\t\t * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n\t\t * @param  {Integer} start (Optional)\n\t\t * @param  {Integer} count (Optional)\n\t\t * @return {Integer}           Index of the processed accessor on the \"accessors\" array\n\t\t */\n\t\tfunction processAccessor( attribute, geometry, start, count ) {\n\n\t\t\tvar types = {\n\n\t\t\t\t1: 'SCALAR',\n\t\t\t\t2: 'VEC2',\n\t\t\t\t3: 'VEC3',\n\t\t\t\t4: 'VEC4',\n\t\t\t\t16: 'MAT4'\n\n\t\t\t};\n\n\t\t\tvar componentType;\n\n\t\t\t// Detect the component type of the attribute array (float, uint or ushort)\n\t\t\tif ( attribute.array.constructor === Float32Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.FLOAT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint32Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint16Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint8Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Unsupported bufferAttribute component type.' );\n\n\t\t\t}\n\n\t\t\tif ( start === undefined ) start = 0;\n\t\t\tif ( count === undefined ) count = attribute.count;\n\n\t\t\t// @TODO Indexed buffer geometry with drawRange not supported yet\n\t\t\tif ( options.truncateDrawRange && geometry !== undefined && geometry.index === null ) {\n\n\t\t\t\tvar end = start + count;\n\t\t\t\tvar end2 = geometry.drawRange.count === Infinity\n\t\t\t\t\t? attribute.count\n\t\t\t\t\t: geometry.drawRange.start + geometry.drawRange.count;\n\n\t\t\t\tstart = Math.max( start, geometry.drawRange.start );\n\t\t\t\tcount = Math.min( end, end2 ) - start;\n\n\t\t\t\tif ( count < 0 ) count = 0;\n\n\t\t\t}\n\n\t\t\t// Skip creating an accessor if the attribute doesn't have data to export\n\t\t\tif ( count === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar minMax = getMinMax( attribute, start, count );\n\n\t\t\tvar bufferViewTarget;\n\n\t\t\t// If geometry isn't provided, don't infer the target usage of the bufferView. For\n\t\t\t// animation samplers, target must not be set.\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tbufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n\n\t\t\t}\n\n\t\t\tvar bufferView = processBufferView( attribute, componentType, start, count, bufferViewTarget );\n\n\t\t\tvar gltfAccessor = {\n\n\t\t\t\tbufferView: bufferView.id,\n\t\t\t\tbyteOffset: bufferView.byteOffset,\n\t\t\t\tcomponentType: componentType,\n\t\t\t\tcount: count,\n\t\t\t\tmax: minMax.max,\n\t\t\t\tmin: minMax.min,\n\t\t\t\ttype: types[ attribute.itemSize ]\n\n\t\t\t};\n\n\t\t\tif ( attribute.normalized === true ) {\n\n\t\t\t\tgltfAccessor.normalized = true;\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.accessors ) {\n\n\t\t\t\toutputJSON.accessors = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.accessors.push( gltfAccessor );\n\n\t\t\treturn outputJSON.accessors.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process image\n\t\t * @param  {Image} image to process\n\t\t * @param  {Integer} format of the image (e.g. THREE.RGBFormat, THREE.RGBAFormat etc)\n\t\t * @param  {Boolean} flipY before writing out the image\n\t\t * @return {Integer}     Index of the processed texture in the \"images\" array\n\t\t */\n\t\tfunction processImage( image, format, flipY ) {\n\n\t\t\tif ( ! cachedData.images.has( image ) ) {\n\n\t\t\t\tcachedData.images.set( image, {} );\n\n\t\t\t}\n\n\t\t\tvar cachedImages = cachedData.images.get( image );\n\t\t\tvar mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n\t\t\tvar key = mimeType + \":flipY/\" + flipY.toString();\n\n\t\t\tif ( cachedImages[ key ] !== undefined ) {\n\n\t\t\t\treturn cachedImages[ key ];\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.images ) {\n\n\t\t\t\toutputJSON.images = [];\n\n\t\t\t}\n\n\t\t\tvar gltfImage = { mimeType: mimeType };\n\n\t\t\tif ( options.embedImages ) {\n\n\t\t\t\tvar canvas = cachedCanvas = cachedCanvas || document.createElement( 'canvas' );\n\n\t\t\t\tcanvas.width = Math.min( image.width, options.maxTextureSize );\n\t\t\t\tcanvas.height = Math.min( image.height, options.maxTextureSize );\n\n\t\t\t\tif ( options.forcePowerOfTwoTextures && ! isPowerOfTwo( canvas ) ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Resized non-power-of-two image.', image );\n\n\t\t\t\t\tcanvas.width = THREE.MathUtils.floorPowerOfTwo( canvas.width );\n\t\t\t\t\tcanvas.height = THREE.MathUtils.floorPowerOfTwo( canvas.height );\n\n\t\t\t\t}\n\n\t\t\t\tvar ctx = canvas.getContext( '2d' );\n\n\t\t\t\tif ( flipY === true ) {\n\n\t\t\t\t\tctx.translate( 0, canvas.height );\n\t\t\t\t\tctx.scale( 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t\tpending.push( new Promise( function ( resolve ) {\n\n\t\t\t\t\t\tcanvas.toBlob( function ( blob ) {\n\n\t\t\t\t\t\t\tprocessBufferViewImage( blob ).then( function ( bufferViewIndex ) {\n\n\t\t\t\t\t\t\t\tgltfImage.bufferView = bufferViewIndex;\n\n\t\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}, mimeType );\n\n\t\t\t\t\t} ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgltfImage.uri = canvas.toDataURL( mimeType );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgltfImage.uri = image.src;\n\n\t\t\t}\n\n\t\t\toutputJSON.images.push( gltfImage );\n\n\t\t\tvar index = outputJSON.images.length - 1;\n\t\t\tcachedImages[ key ] = index;\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process sampler\n\t\t * @param  {Texture} map Texture to process\n\t\t * @return {Integer}     Index of the processed texture in the \"samplers\" array\n\t\t */\n\t\tfunction processSampler( map ) {\n\n\t\t\tif ( ! outputJSON.samplers ) {\n\n\t\t\t\toutputJSON.samplers = [];\n\n\t\t\t}\n\n\t\t\tvar gltfSampler = {\n\n\t\t\t\tmagFilter: THREE_TO_WEBGL[ map.magFilter ],\n\t\t\t\tminFilter: THREE_TO_WEBGL[ map.minFilter ],\n\t\t\t\twrapS: THREE_TO_WEBGL[ map.wrapS ],\n\t\t\t\twrapT: THREE_TO_WEBGL[ map.wrapT ]\n\n\t\t\t};\n\n\t\t\toutputJSON.samplers.push( gltfSampler );\n\n\t\t\treturn outputJSON.samplers.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process texture\n\t\t * @param  {Texture} map Map to process\n\t\t * @return {Integer}     Index of the processed texture in the \"textures\" array\n\t\t */\n\t\tfunction processTexture( map ) {\n\n\t\t\tif ( cachedData.textures.has( map ) ) {\n\n\t\t\t\treturn cachedData.textures.get( map );\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.textures ) {\n\n\t\t\t\toutputJSON.textures = [];\n\n\t\t\t}\n\n\t\t\tvar gltfTexture = {\n\n\t\t\t\tsampler: processSampler( map ),\n\t\t\t\tsource: processImage( map.image, map.format, map.flipY )\n\n\t\t\t};\n\n\t\t\tif ( map.name ) {\n\n\t\t\t\tgltfTexture.name = map.name;\n\n\t\t\t}\n\n\t\t\toutputJSON.textures.push( gltfTexture );\n\n\t\t\tvar index = outputJSON.textures.length - 1;\n\t\t\tcachedData.textures.set( map, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process material\n\t\t * @param  {THREE.Material} material Material to process\n\t\t * @return {Integer}      Index of the processed material in the \"materials\" array\n\t\t */\n\t\tfunction processMaterial( material ) {\n\n\t\t\tif ( cachedData.materials.has( material ) ) {\n\n\t\t\t\treturn cachedData.materials.get( material );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: THREE.ShaderMaterial not supported.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.materials ) {\n\n\t\t\t\toutputJSON.materials = [];\n\n\t\t\t}\n\n\t\t\t// @QUESTION Should we avoid including any attribute that has the default value?\n\t\t\tvar gltfMaterial = {\n\n\t\t\t\tpbrMetallicRoughness: {}\n\n\t\t\t};\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_unlit: {} };\n\n\t\t\t\textensionsUsed[ 'KHR_materials_unlit' ] = true;\n\n\t\t\t} else if ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n\n\t\t\t\textensionsUsed[ 'KHR_materials_pbrSpecularGlossiness' ] = true;\n\n\t\t\t} else if ( ! material.isMeshStandardMaterial ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.' );\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.baseColorFactor\n\t\t\tvar color = material.color.toArray().concat( [ material.opacity ] );\n\n\t\t\tif ( ! equalArray( color, [ 1, 1, 1, 1 ] ) ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n\n\t\t\t} else if ( material.isMeshBasicMaterial ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.0;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n\n\t\t\t} else {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n\n\t\t\t}\n\n\t\t\t// pbrSpecularGlossiness diffuse, specular and glossiness factor\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\tif ( gltfMaterial.pbrMetallicRoughness.baseColorFactor ) {\n\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n\n\t\t\t\t}\n\n\t\t\t\tvar specularFactor = [ 1, 1, 1 ];\n\t\t\t\tmaterial.specular.toArray( specularFactor, 0 );\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.metallicRoughnessTexture\n\t\t\tif ( material.metalnessMap || material.roughnessMap ) {\n\n\t\t\t\tif ( material.metalnessMap === material.roughnessMap ) {\n\n\t\t\t\t\tvar metalRoughMapDef = { index: processTexture( material.metalnessMap ) };\n\t\t\t\t\tapplyTextureTransform( metalRoughMapDef, material.metalnessMap );\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\t\t\tif ( material.map ) {\n\n\t\t\t\tvar baseColorMapDef = { index: processTexture( material.map ) };\n\t\t\t\tapplyTextureTransform( baseColorMapDef, material.map );\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n\n\t\t\t\t}\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n\n\t\t\t}\n\n\t\t\t// pbrSpecularGlossiness specular map\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial && material.specularMap ) {\n\n\t\t\t\tvar specularMapDef = { index: processTexture( material.specularMap ) };\n\t\t\t\tapplyTextureTransform( specularMapDef, material.specularMap );\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\t// emissiveFactor\n\t\t\t\tvar emissive = material.emissive.clone().multiplyScalar( material.emissiveIntensity ).toArray();\n\n\t\t\t\tif ( ! equalArray( emissive, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\tgltfMaterial.emissiveFactor = emissive;\n\n\t\t\t\t}\n\n\t\t\t\t// emissiveTexture\n\t\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\t\tvar emissiveMapDef = { index: processTexture( material.emissiveMap ) };\n\t\t\t\t\tapplyTextureTransform( emissiveMapDef, material.emissiveMap );\n\t\t\t\t\tgltfMaterial.emissiveTexture = emissiveMapDef;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normalTexture\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tvar normalMapDef = { index: processTexture( material.normalMap ) };\n\n\t\t\t\tif ( material.normalScale && material.normalScale.x !== - 1 ) {\n\n\t\t\t\t\tif ( material.normalScale.x !== material.normalScale.y ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnormalMapDef.scale = material.normalScale.x;\n\n\t\t\t\t}\n\n\t\t\t\tapplyTextureTransform( normalMapDef, material.normalMap );\n\n\t\t\t\tgltfMaterial.normalTexture = normalMapDef;\n\n\t\t\t}\n\n\t\t\t// occlusionTexture\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tvar occlusionMapDef = {\n\t\t\t\t\tindex: processTexture( material.aoMap ),\n\t\t\t\t\ttexCoord: 1\n\t\t\t\t};\n\n\t\t\t\tif ( material.aoMapIntensity !== 1.0 ) {\n\n\t\t\t\t\tocclusionMapDef.strength = material.aoMapIntensity;\n\n\t\t\t\t}\n\n\t\t\t\tapplyTextureTransform( occlusionMapDef, material.aoMap );\n\n\t\t\t\tgltfMaterial.occlusionTexture = occlusionMapDef;\n\n\t\t\t}\n\n\t\t\t// alphaMode\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tgltfMaterial.alphaMode = 'BLEND';\n\n\t\t\t} else {\n\n\t\t\t\tif ( material.alphaTest > 0.0 ) {\n\n\t\t\t\t\tgltfMaterial.alphaMode = 'MASK';\n\t\t\t\t\tgltfMaterial.alphaCutoff = material.alphaTest;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// doubleSided\n\t\t\tif ( material.side === THREE.DoubleSide ) {\n\n\t\t\t\tgltfMaterial.doubleSided = true;\n\n\t\t\t}\n\n\t\t\tif ( material.name !== '' ) {\n\n\t\t\t\tgltfMaterial.name = material.name;\n\n\t\t\t}\n\n\t\t\tserializeUserData( material, gltfMaterial );\n\n\t\t\toutputJSON.materials.push( gltfMaterial );\n\n\t\t\tvar index = outputJSON.materials.length - 1;\n\t\t\tcachedData.materials.set( material, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process mesh\n\t\t * @param  {THREE.Mesh} mesh Mesh to process\n\t\t * @return {Integer}      Index of the processed mesh in the \"meshes\" array\n\t\t */\n\t\tfunction processMesh( mesh ) {\n\n\t\t\tvar meshCacheKeyParts = [ mesh.geometry.uuid ];\n\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\tfor ( var i = 0, l = mesh.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tmeshCacheKeyParts.push( mesh.material[ i ].uuid\t);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmeshCacheKeyParts.push( mesh.material.uuid );\n\n\t\t\t}\n\n\t\t\tvar meshCacheKey = meshCacheKeyParts.join( ':' );\n\t\t\tif ( cachedData.meshes.has( meshCacheKey ) ) {\n\n\t\t\t\treturn cachedData.meshes.get( meshCacheKey );\n\n\t\t\t}\n\n\t\t\tvar geometry = mesh.geometry;\n\n\t\t\tvar mode;\n\n\t\t\t// Use the correct mode\n\t\t\tif ( mesh.isLineSegments ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINES;\n\n\t\t\t} else if ( mesh.isLineLoop ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_LOOP;\n\n\t\t\t} else if ( mesh.isLine ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_STRIP;\n\n\t\t\t} else if ( mesh.isPoints ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.POINTS;\n\n\t\t\t} else {\n\n\t\t\t\tmode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n\n\t\t\t}\n\n\t\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: Exporting THREE.Geometry will increase file size. Use THREE.BufferGeometry instead.' );\n\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( mesh );\n\n\t\t\t}\n\n\t\t\tvar gltfMesh = {};\n\n\t\t\tvar attributes = {};\n\t\t\tvar primitives = [];\n\t\t\tvar targets = [];\n\n\t\t\t// Conversion between attributes names in threejs and gltf spec\n\t\t\tvar nameConversion = {\n\n\t\t\t\tuv: 'TEXCOORD_0',\n\t\t\t\tuv2: 'TEXCOORD_1',\n\t\t\t\tcolor: 'COLOR_0',\n\t\t\t\tskinWeight: 'WEIGHTS_0',\n\t\t\t\tskinIndex: 'JOINTS_0'\n\n\t\t\t};\n\n\t\t\tvar originalNormal = geometry.getAttribute( 'normal' );\n\n\t\t\tif ( originalNormal !== undefined && ! isNormalizedNormalAttribute( originalNormal ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.' );\n\n\t\t\t\tgeometry.setAttribute( 'normal', createNormalizedNormalAttribute( originalNormal ) );\n\n\t\t\t}\n\n\t\t\t// @QUESTION Detect if .vertexColors = true?\n\t\t\t// For every attribute create an accessor\n\t\t\tvar modifiedAttribute = null;\n\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t// Ignore morph target attributes, which are exported later.\n\t\t\t\tif ( attributeName.substr( 0, 5 ) === 'morph' ) continue;\n\n\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\tattributeName = nameConversion[ attributeName ] || attributeName.toUpperCase();\n\n\t\t\t\t// Prefix all geometry attributes except the ones specifically\n\t\t\t\t// listed in the spec; non-spec attributes are considered custom.\n\t\t\t\tvar validVertexAttributes =\n\t\t\t\t\t\t/^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n\t\t\t\tif ( ! validVertexAttributes.test( attributeName ) ) {\n\n\t\t\t\t\tattributeName = '_' + attributeName;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\tattributes[ attributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\t\t\t\tmodifiedAttribute = null;\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tif ( attributeName === 'JOINTS_0' &&\n\t\t\t\t\t! ( array instanceof Uint16Array ) &&\n\t\t\t\t\t! ( array instanceof Uint8Array ) ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.' );\n\t\t\t\t\tmodifiedAttribute = new THREE.BufferAttribute( new Uint16Array( array ), attribute.itemSize, attribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tvar accessor = processAccessor( modifiedAttribute || attribute, geometry );\n\t\t\t\tif ( accessor !== null ) {\n\n\t\t\t\t\tattributes[ attributeName ] = accessor;\n\t\t\t\t\tcachedData.attributes.set( getUID( attribute ), accessor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( originalNormal !== undefined ) geometry.setAttribute( 'normal', originalNormal );\n\n\t\t\t// Skip if no exportable attributes found\n\t\t\tif ( Object.keys( attributes ).length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Morph targets\n\t\t\tif ( mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0 ) {\n\n\t\t\t\tvar weights = [];\n\t\t\t\tvar targetNames = [];\n\t\t\t\tvar reverseDictionary = {};\n\n\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) {\n\n\t\t\t\t\tfor ( var key in mesh.morphTargetDictionary ) {\n\n\t\t\t\t\t\treverseDictionary[ mesh.morphTargetDictionary[ key ] ] = key;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < mesh.morphTargetInfluences.length; ++ i ) {\n\n\t\t\t\t\tvar target = {};\n\n\t\t\t\t\tvar warned = false;\n\n\t\t\t\t\tfor ( var attributeName in geometry.morphAttributes ) {\n\n\t\t\t\t\t\t// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n\t\t\t\t\t\t// Three.js doesn't support TANGENT yet.\n\n\t\t\t\t\t\tif ( attributeName !== 'position' && attributeName !== 'normal' ) {\n\n\t\t\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Only POSITION and NORMAL morph are supported.' );\n\t\t\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar attribute = geometry.morphAttributes[ attributeName ][ i ];\n\t\t\t\t\t\tvar gltfAttributeName = attributeName.toUpperCase();\n\n\t\t\t\t\t\t// Three.js morph attribute has absolute values while the one of glTF has relative values.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// glTF 2.0 Specification:\n\t\t\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n\t\t\t\t\t\tvar baseAttribute = geometry.attributes[ attributeName ];\n\n\t\t\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\t\t\ttarget[ gltfAttributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Clones attribute not to override\n\t\t\t\t\t\tvar relativeAttribute = attribute.clone();\n\n\t\t\t\t\t\tif ( ! geometry.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = attribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\trelativeAttribute.setXYZ(\n\t\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\t\tattribute.getX( j ) - baseAttribute.getX( j ),\n\t\t\t\t\t\t\t\t\tattribute.getY( j ) - baseAttribute.getY( j ),\n\t\t\t\t\t\t\t\t\tattribute.getZ( j ) - baseAttribute.getZ( j )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget[ gltfAttributeName ] = processAccessor( relativeAttribute, geometry );\n\t\t\t\t\t\tcachedData.attributes.set( getUID( baseAttribute ), target[ gltfAttributeName ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargets.push( target );\n\n\t\t\t\t\tweights.push( mesh.morphTargetInfluences[ i ] );\n\t\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) targetNames.push( reverseDictionary[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tgltfMesh.weights = weights;\n\n\t\t\t\tif ( targetNames.length > 0 ) {\n\n\t\t\t\t\tgltfMesh.extras = {};\n\t\t\t\t\tgltfMesh.extras.targetNames = targetNames;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar isMultiMaterial = Array.isArray( mesh.material );\n\n\t\t\tif ( isMultiMaterial && geometry.groups.length === 0 ) return null;\n\n\t\t\tvar materials = isMultiMaterial ? mesh.material : [ mesh.material ];\n\t\t\tvar groups = isMultiMaterial ? geometry.groups : [ { materialIndex: 0, start: undefined, count: undefined } ];\n\n\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tvar primitive = {\n\t\t\t\t\tmode: mode,\n\t\t\t\t\tattributes: attributes,\n\t\t\t\t};\n\n\t\t\t\tserializeUserData( geometry, primitive );\n\n\t\t\t\tif ( targets.length > 0 ) primitive.targets = targets;\n\n\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\tvar cacheKey = getUID( geometry.index );\n\n\t\t\t\t\tif ( groups[ i ].start !== undefined || groups[ i ].count !== undefined ) {\n\n\t\t\t\t\t\tcacheKey += ':' + groups[ i ].start + ':' + groups[ i ].count;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cachedData.attributes.has( cacheKey ) ) {\n\n\t\t\t\t\t\tprimitive.indices = cachedData.attributes.get( cacheKey );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tprimitive.indices = processAccessor( geometry.index, geometry, groups[ i ].start, groups[ i ].count );\n\t\t\t\t\t\tcachedData.attributes.set( cacheKey, primitive.indices );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.indices === null ) delete primitive.indices;\n\n\t\t\t\t}\n\n\t\t\t\tvar material = processMaterial( materials[ groups[ i ].materialIndex ] );\n\n\t\t\t\tif ( material !== null ) {\n\n\t\t\t\t\tprimitive.material = material;\n\n\t\t\t\t}\n\n\t\t\t\tprimitives.push( primitive );\n\n\t\t\t}\n\n\t\t\tgltfMesh.primitives = primitives;\n\n\t\t\tif ( ! outputJSON.meshes ) {\n\n\t\t\t\toutputJSON.meshes = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.meshes.push( gltfMesh );\n\n\t\t\tvar index = outputJSON.meshes.length - 1;\n\t\t\tcachedData.meshes.set( meshCacheKey, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process camera\n\t\t * @param  {THREE.Camera} camera Camera to process\n\t\t * @return {Integer}      Index of the processed mesh in the \"camera\" array\n\t\t */\n\t\tfunction processCamera( camera ) {\n\n\t\t\tif ( ! outputJSON.cameras ) {\n\n\t\t\t\toutputJSON.cameras = [];\n\n\t\t\t}\n\n\t\t\tvar isOrtho = camera.isOrthographicCamera;\n\n\t\t\tvar gltfCamera = {\n\n\t\t\t\ttype: isOrtho ? 'orthographic' : 'perspective'\n\n\t\t\t};\n\n\t\t\tif ( isOrtho ) {\n\n\t\t\t\tgltfCamera.orthographic = {\n\n\t\t\t\t\txmag: camera.right * 2,\n\t\t\t\t\tymag: camera.top * 2,\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tgltfCamera.perspective = {\n\n\t\t\t\t\taspectRatio: camera.aspect,\n\t\t\t\t\tyfov: THREE.MathUtils.degToRad( camera.fov ),\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( camera.name !== '' ) {\n\n\t\t\t\tgltfCamera.name = camera.type;\n\n\t\t\t}\n\n\t\t\toutputJSON.cameras.push( gltfCamera );\n\n\t\t\treturn outputJSON.cameras.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Creates glTF animation entry from AnimationClip object.\n\t\t *\n\t\t * Status:\n\t\t * - Only properties listed in PATH_PROPERTIES may be animated.\n\t\t *\n\t\t * @param {THREE.AnimationClip} clip\n\t\t * @param {THREE.Object3D} root\n\t\t * @return {number}\n\t\t */\n\t\tfunction processAnimation( clip, root ) {\n\n\t\t\tif ( ! outputJSON.animations ) {\n\n\t\t\t\toutputJSON.animations = [];\n\n\t\t\t}\n\n\t\t\tclip = THREE.GLTFExporter.Utils.mergeMorphTargetTracks( clip.clone(), root );\n\n\t\t\tvar tracks = clip.tracks;\n\t\t\tvar channels = [];\n\t\t\tvar samplers = [];\n\n\t\t\tfor ( var i = 0; i < tracks.length; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ];\n\t\t\t\tvar trackBinding = THREE.PropertyBinding.parseTrackName( track.name );\n\t\t\t\tvar trackNode = THREE.PropertyBinding.findNode( root, trackBinding.nodeName );\n\t\t\t\tvar trackProperty = PATH_PROPERTIES[ trackBinding.propertyName ];\n\n\t\t\t\tif ( trackBinding.objectName === 'bones' ) {\n\n\t\t\t\t\tif ( trackNode.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\ttrackNode = trackNode.skeleton.getBoneByName( trackBinding.objectIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttrackNode = undefined;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! trackNode || ! trackProperty ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Could not export animation track \"%s\".', track.name );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar inputItemSize = 1;\n\t\t\t\tvar outputItemSize = track.values.length / track.times.length;\n\n\t\t\t\tif ( trackProperty === PATH_PROPERTIES.morphTargetInfluences ) {\n\n\t\t\t\t\toutputItemSize /= trackNode.morphTargetInfluences.length;\n\n\t\t\t\t}\n\n\t\t\t\tvar interpolation;\n\n\t\t\t\t// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n\n\t\t\t\t// Detecting glTF cubic spline interpolant by checking factory method's special property\n\t\t\t\t// GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n\t\t\t\t// valid value from .getInterpolation().\n\t\t\t\tif ( track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true ) {\n\n\t\t\t\t\tinterpolation = 'CUBICSPLINE';\n\n\t\t\t\t\t// itemSize of CUBICSPLINE keyframe is 9\n\t\t\t\t\t// (VEC3 * 3: inTangent, splineVertex, and outTangent)\n\t\t\t\t\t// but needs to be stored as VEC3 so dividing by 3 here.\n\t\t\t\t\toutputItemSize /= 3;\n\n\t\t\t\t} else if ( track.getInterpolation() === THREE.InterpolateDiscrete ) {\n\n\t\t\t\t\tinterpolation = 'STEP';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinterpolation = 'LINEAR';\n\n\t\t\t\t}\n\n\t\t\t\tsamplers.push( {\n\n\t\t\t\t\tinput: processAccessor( new THREE.BufferAttribute( track.times, inputItemSize ) ),\n\t\t\t\t\toutput: processAccessor( new THREE.BufferAttribute( track.values, outputItemSize ) ),\n\t\t\t\t\tinterpolation: interpolation\n\n\t\t\t\t} );\n\n\t\t\t\tchannels.push( {\n\n\t\t\t\t\tsampler: samplers.length - 1,\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tnode: nodeMap.get( trackNode ),\n\t\t\t\t\t\tpath: trackProperty\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toutputJSON.animations.push( {\n\n\t\t\t\tname: clip.name || 'clip_' + outputJSON.animations.length,\n\t\t\t\tsamplers: samplers,\n\t\t\t\tchannels: channels\n\n\t\t\t} );\n\n\t\t\treturn outputJSON.animations.length - 1;\n\n\t\t}\n\n\t\tfunction processSkin( object ) {\n\n\t\t\tvar node = outputJSON.nodes[ nodeMap.get( object ) ];\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton === undefined ) return null;\n\n\t\t\tvar rootJoint = object.skeleton.bones[ 0 ];\n\n\t\t\tif ( rootJoint === undefined ) return null;\n\n\t\t\tvar joints = [];\n\t\t\tvar inverseBindMatrices = new Float32Array( skeleton.bones.length * 16 );\n\n\t\t\tfor ( var i = 0; i < skeleton.bones.length; ++ i ) {\n\n\t\t\t\tjoints.push( nodeMap.get( skeleton.bones[ i ] ) );\n\n\t\t\t\tskeleton.boneInverses[ i ].toArray( inverseBindMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( outputJSON.skins === undefined ) {\n\n\t\t\t\toutputJSON.skins = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.skins.push( {\n\n\t\t\t\tinverseBindMatrices: processAccessor( new THREE.BufferAttribute( inverseBindMatrices, 16 ) ),\n\t\t\t\tjoints: joints,\n\t\t\t\tskeleton: nodeMap.get( rootJoint )\n\n\t\t\t} );\n\n\t\t\tvar skinIndex = node.skin = outputJSON.skins.length - 1;\n\n\t\t\treturn skinIndex;\n\n\t\t}\n\n\t\tfunction processLight( light ) {\n\n\t\t\tvar lightDef = {};\n\n\t\t\tif ( light.name ) lightDef.name = light.name;\n\n\t\t\tlightDef.color = light.color.toArray();\n\n\t\t\tlightDef.intensity = light.intensity;\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tlightDef.type = 'directional';\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tlightDef.type = 'point';\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tlightDef.type = 'spot';\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\t\t\t\tlightDef.spot = {};\n\t\t\t\tlightDef.spot.innerConeAngle = ( light.penumbra - 1.0 ) * light.angle * - 1.0;\n\t\t\t\tlightDef.spot.outerConeAngle = light.angle;\n\n\t\t\t}\n\n\t\t\tif ( light.decay !== undefined && light.decay !== 2 ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '\n\t\t\t\t\t+ 'and expects light.decay=2.' );\n\n\t\t\t}\n\n\t\t\tif ( light.target\n\t\t\t\t\t&& ( light.target.parent !== light\n\t\t\t\t\t || light.target.position.x !== 0\n\t\t\t\t\t || light.target.position.y !== 0\n\t\t\t\t\t || light.target.position.z !== - 1 ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light direction may be lost. For best results, '\n\t\t\t\t\t+ 'make light.target a child of the light with position 0,0,-1.' );\n\n\t\t\t}\n\n\t\t\tvar lights = outputJSON.extensions[ 'KHR_lights_punctual' ].lights;\n\t\t\tlights.push( lightDef );\n\t\t\treturn lights.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process Object3D node\n\t\t * @param  {THREE.Object3D} node Object3D to processNode\n\t\t * @return {Integer}      Index of the node in the nodes list\n\t\t */\n\t\tfunction processNode( object ) {\n\n\t\t\tif ( ! outputJSON.nodes ) {\n\n\t\t\t\toutputJSON.nodes = [];\n\n\t\t\t}\n\n\t\t\tvar gltfNode = {};\n\n\t\t\tif ( options.trs ) {\n\n\t\t\t\tvar rotation = object.quaternion.toArray();\n\t\t\t\tvar position = object.position.toArray();\n\t\t\t\tvar scale = object.scale.toArray();\n\n\t\t\t\tif ( ! equalArray( rotation, [ 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\t\tgltfNode.rotation = rotation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! equalArray( position, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\tgltfNode.translation = position;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! equalArray( scale, [ 1, 1, 1 ] ) ) {\n\n\t\t\t\t\tgltfNode.scale = scale;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.matrixAutoUpdate ) {\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! equalArray( object.matrix.elements, [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\t\tgltfNode.matrix = object.matrix.elements;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// We don't export empty strings name because it represents no-name in Three.js.\n\t\t\tif ( object.name !== '' ) {\n\n\t\t\t\tgltfNode.name = String( object.name );\n\n\t\t\t}\n\n\t\t\tserializeUserData( object, gltfNode );\n\n\t\t\tif ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tvar mesh = processMesh( object );\n\n\t\t\t\tif ( mesh !== null ) {\n\n\t\t\t\t\tgltfNode.mesh = mesh;\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isCamera ) {\n\n\t\t\t\tgltfNode.camera = processCamera( object );\n\n\t\t\t} else if ( object.isDirectionalLight || object.isPointLight || object.isSpotLight ) {\n\n\t\t\t\tif ( ! extensionsUsed[ 'KHR_lights_punctual' ] ) {\n\n\t\t\t\t\toutputJSON.extensions = outputJSON.extensions || {};\n\t\t\t\t\toutputJSON.extensions[ 'KHR_lights_punctual' ] = { lights: [] };\n\t\t\t\t\textensionsUsed[ 'KHR_lights_punctual' ] = true;\n\n\t\t\t\t}\n\n\t\t\t\tgltfNode.extensions = gltfNode.extensions || {};\n\t\t\t\tgltfNode.extensions[ 'KHR_lights_punctual' ] = { light: processLight( object ) };\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tskins.push( object );\n\n\t\t\t}\n\n\t\t\tif ( object.children.length > 0 ) {\n\n\t\t\t\tvar children = [];\n\n\t\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = object.children[ i ];\n\n\t\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\t\tchildren.push( node );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( children.length > 0 ) {\n\n\t\t\t\t\tgltfNode.children = children;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\toutputJSON.nodes.push( gltfNode );\n\n\t\t\tvar nodeIndex = outputJSON.nodes.length - 1;\n\t\t\tnodeMap.set( object, nodeIndex );\n\n\t\t\treturn nodeIndex;\n\n\t\t}\n\n\t\t/**\n\t\t * Process Scene\n\t\t * @param  {THREE.Scene} node Scene to process\n\t\t */\n\t\tfunction processScene( scene ) {\n\n\t\t\tif ( ! outputJSON.scenes ) {\n\n\t\t\t\toutputJSON.scenes = [];\n\t\t\t\toutputJSON.scene = 0;\n\n\t\t\t}\n\n\t\t\tvar gltfScene = {};\n\n\t\t\tif ( scene.name !== '' ) {\n\n\t\t\t\tgltfScene.name = scene.name;\n\n\t\t\t}\n\n\t\t\toutputJSON.scenes.push( gltfScene );\n\n\t\t\tvar nodes = [];\n\n\t\t\tfor ( var i = 0, l = scene.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = scene.children[ i ];\n\n\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\tnodes.push( node );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodes.length > 0 ) {\n\n\t\t\t\tgltfScene.nodes = nodes;\n\n\t\t\t}\n\n\t\t\tserializeUserData( scene, gltfScene );\n\n\t\t}\n\n\t\t/**\n\t\t * Creates a THREE.Scene to hold a list of objects and parse it\n\t\t * @param  {Array} objects List of objects to process\n\t\t */\n\t\tfunction processObjects( objects ) {\n\n\t\t\tvar scene = new THREE.Scene();\n\t\t\tscene.name = 'AuxScene';\n\n\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t// We push directly to children instead of calling `add` to prevent\n\t\t\t\t// modify the .parent and break its original scene and hierarchy\n\t\t\t\tscene.children.push( objects[ i ] );\n\n\t\t\t}\n\n\t\t\tprocessScene( scene );\n\n\t\t}\n\n\t\tfunction processInput( input ) {\n\n\t\t\tinput = input instanceof Array ? input : [ input ];\n\n\t\t\tvar objectsWithoutScene = [];\n\n\t\t\tfor ( var i = 0; i < input.length; i ++ ) {\n\n\t\t\t\tif ( input[ i ] instanceof THREE.Scene ) {\n\n\t\t\t\t\tprocessScene( input[ i ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobjectsWithoutScene.push( input[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectsWithoutScene.length > 0 ) {\n\n\t\t\t\tprocessObjects( objectsWithoutScene );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < skins.length; ++ i ) {\n\n\t\t\t\tprocessSkin( skins[ i ] );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < options.animations.length; ++ i ) {\n\n\t\t\t\tprocessAnimation( options.animations[ i ], input[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tprocessInput( input );\n\n\t\tPromise.all( pending ).then( function () {\n\n\t\t\t// Merge buffers.\n\t\t\tvar blob = new Blob( buffers, { type: 'application/octet-stream' } );\n\n\t\t\t// Declare extensions.\n\t\t\tvar extensionsUsedList = Object.keys( extensionsUsed );\n\t\t\tif ( extensionsUsedList.length > 0 ) outputJSON.extensionsUsed = extensionsUsedList;\n\n\t\t\t// Update bytelength of the single buffer.\n\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) outputJSON.buffers[ 0 ].byteLength = blob.size;\n\n\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n\t\t\t\tvar GLB_HEADER_BYTES = 12;\n\t\t\t\tvar GLB_HEADER_MAGIC = 0x46546C67;\n\t\t\t\tvar GLB_VERSION = 2;\n\n\t\t\t\tvar GLB_CHUNK_PREFIX_BYTES = 8;\n\t\t\t\tvar GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\n\t\t\t\tvar GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\n\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t// Binary chunk.\n\t\t\t\t\tvar binaryChunk = getPaddedArrayBuffer( reader.result );\n\t\t\t\t\tvar binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );\n\n\t\t\t\t\t// JSON chunk.\n\t\t\t\t\tvar jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( outputJSON ) ), 0x20 );\n\t\t\t\t\tvar jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );\n\n\t\t\t\t\t// GLB header.\n\t\t\t\t\tvar header = new ArrayBuffer( GLB_HEADER_BYTES );\n\t\t\t\t\tvar headerView = new DataView( header );\n\t\t\t\t\theaderView.setUint32( 0, GLB_HEADER_MAGIC, true );\n\t\t\t\t\theaderView.setUint32( 4, GLB_VERSION, true );\n\t\t\t\t\tvar totalByteLength = GLB_HEADER_BYTES\n\t\t\t\t\t\t+ jsonChunkPrefix.byteLength + jsonChunk.byteLength\n\t\t\t\t\t\t+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n\t\t\t\t\theaderView.setUint32( 8, totalByteLength, true );\n\n\t\t\t\t\tvar glbBlob = new Blob( [\n\t\t\t\t\t\theader,\n\t\t\t\t\t\tjsonChunkPrefix,\n\t\t\t\t\t\tjsonChunk,\n\t\t\t\t\t\tbinaryChunkPrefix,\n\t\t\t\t\t\tbinaryChunk\n\t\t\t\t\t], { type: 'application/octet-stream' } );\n\n\t\t\t\t\tvar glbReader = new window.FileReader();\n\t\t\t\t\tglbReader.readAsArrayBuffer( glbBlob );\n\t\t\t\t\tglbReader.onloadend = function () {\n\n\t\t\t\t\t\tonDone( glbReader.result );\n\n\t\t\t\t\t};\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) {\n\n\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\treader.readAsDataURL( blob );\n\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\tvar base64data = reader.result;\n\t\t\t\t\t\toutputJSON.buffers[ 0 ].uri = base64data;\n\t\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n};\n\nTHREE.GLTFExporter.Utils = {\n\n\tinsertKeyframe: function ( track, time ) {\n\n\t\tvar tolerance = 0.001; // 1ms\n\t\tvar valueSize = track.getValueSize();\n\n\t\tvar times = new track.TimeBufferType( track.times.length + 1 );\n\t\tvar values = new track.ValueBufferType( track.values.length + valueSize );\n\t\tvar interpolant = track.createInterpolant( new track.ValueBufferType( valueSize ) );\n\n\t\tvar index;\n\n\t\tif ( track.times.length === 0 ) {\n\n\t\t\ttimes[ 0 ] = time;\n\n\t\t\tfor ( var i = 0; i < valueSize; i ++ ) {\n\n\t\t\t\tvalues[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time < track.times[ 0 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ 0 ] - time ) < tolerance ) return 0;\n\n\t\t\ttimes[ 0 ] = time;\n\t\t\ttimes.set( track.times, 1 );\n\n\t\t\tvalues.set( interpolant.evaluate( time ), 0 );\n\t\t\tvalues.set( track.values, valueSize );\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time > track.times[ track.times.length - 1 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ track.times.length - 1 ] - time ) < tolerance ) {\n\n\t\t\t\treturn track.times.length - 1;\n\n\t\t\t}\n\n\t\t\ttimes[ times.length - 1 ] = time;\n\t\t\ttimes.set( track.times, 0 );\n\n\t\t\tvalues.set( track.values, 0 );\n\t\t\tvalues.set( interpolant.evaluate( time ), track.values.length );\n\n\t\t\tindex = times.length - 1;\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < track.times.length; i ++ ) {\n\n\t\t\t\tif ( Math.abs( track.times[ i ] - time ) < tolerance ) return i;\n\n\t\t\t\tif ( track.times[ i ] < time && track.times[ i + 1 ] > time ) {\n\n\t\t\t\t\ttimes.set( track.times.slice( 0, i + 1 ), 0 );\n\t\t\t\t\ttimes[ i + 1 ] = time;\n\t\t\t\t\ttimes.set( track.times.slice( i + 1 ), i + 2 );\n\n\t\t\t\t\tvalues.set( track.values.slice( 0, ( i + 1 ) * valueSize ), 0 );\n\t\t\t\t\tvalues.set( interpolant.evaluate( time ), ( i + 1 ) * valueSize );\n\t\t\t\t\tvalues.set( track.values.slice( ( i + 1 ) * valueSize ), ( i + 2 ) * valueSize );\n\n\t\t\t\t\tindex = i + 1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttrack.times = times;\n\t\ttrack.values = values;\n\n\t\treturn index;\n\n\t},\n\n\tmergeMorphTargetTracks: function ( clip, root ) {\n\n\t\tvar tracks = [];\n\t\tvar mergedTracks = {};\n\t\tvar sourceTracks = clip.tracks;\n\n\t\tfor ( var i = 0; i < sourceTracks.length; ++ i ) {\n\n\t\t\tvar sourceTrack = sourceTracks[ i ];\n\t\t\tvar sourceTrackBinding = THREE.PropertyBinding.parseTrackName( sourceTrack.name );\n\t\t\tvar sourceTrackNode = THREE.PropertyBinding.findNode( root, sourceTrackBinding.nodeName );\n\n\t\t\tif ( sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined ) {\n\n\t\t\t\t// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n\t\t\t\ttracks.push( sourceTrack );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete\n\t\t\t\t&& sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear ) {\n\n\t\t\t\tif ( sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\t// This should never happen, because glTF morph target animations\n\t\t\t\t\t// affect all targets already.\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.' );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.' );\n\n\t\t\t\tsourceTrack = sourceTrack.clone();\n\t\t\t\tsourceTrack.setInterpolation( THREE.InterpolateLinear );\n\n\t\t\t}\n\n\t\t\tvar targetCount = sourceTrackNode.morphTargetInfluences.length;\n\t\t\tvar targetIndex = sourceTrackNode.morphTargetDictionary[ sourceTrackBinding.propertyIndex ];\n\n\t\t\tif ( targetIndex === undefined ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex );\n\n\t\t\t}\n\n\t\t\tvar mergedTrack;\n\n\t\t\t// If this is the first time we've seen this object, create a new\n\t\t\t// track to store merged keyframe data for each morph target.\n\t\t\tif ( mergedTracks[ sourceTrackNode.uuid ] === undefined ) {\n\n\t\t\t\tmergedTrack = sourceTrack.clone();\n\n\t\t\t\tvar values = new mergedTrack.ValueBufferType( targetCount * mergedTrack.times.length );\n\n\t\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\t\tvalues[ j * targetCount + targetIndex ] = mergedTrack.values[ j ];\n\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration the intended target node\n\t\t\t\t// of our original un-merged morphTarget animation.\n\t\t\t\tmergedTrack.name = sourceTrackBinding.nodeName + '.morphTargetInfluences';\n\t\t\t\tmergedTrack.values = values;\n\n\t\t\t\tmergedTracks[ sourceTrackNode.uuid ] = mergedTrack;\n\t\t\t\ttracks.push( mergedTrack );\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar sourceInterpolant = sourceTrack.createInterpolant( new sourceTrack.ValueBufferType( 1 ) );\n\n\t\t\tmergedTrack = mergedTracks[ sourceTrackNode.uuid ];\n\n\t\t\t// For every existing keyframe of the merged track, write a (possibly\n\t\t\t// interpolated) value from the source track.\n\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\tmergedTrack.values[ j * targetCount + targetIndex ] = sourceInterpolant.evaluate( mergedTrack.times[ j ] );\n\n\t\t\t}\n\n\t\t\t// For every existing keyframe of the source track, write a (possibly\n\t\t\t// new) keyframe to the merged track. Values from the previous loop may\n\t\t\t// be written again, but keyframes are de-duplicated.\n\t\t\tfor ( var j = 0; j < sourceTrack.times.length; j ++ ) {\n\n\t\t\t\tvar keyframeIndex = this.insertKeyframe( mergedTrack, sourceTrack.times[ j ] );\n\t\t\t\tmergedTrack.values[ keyframeIndex * targetCount + targetIndex ] = sourceTrack.values[ j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\treturn clip;\n\n\t}\n\n};\n"]}