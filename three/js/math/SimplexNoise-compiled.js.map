{"version":3,"sources":["SimplexNoise.js"],"names":[],"mappings":"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","file":"SimplexNoise-compiled.js","sourcesContent":["console.warn( \"THREE.SimplexNoise: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nTHREE.SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nTHREE.SimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nTHREE.SimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nTHREE.SimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nTHREE.SimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nTHREE.SimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nTHREE.SimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t}\n\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n"]}