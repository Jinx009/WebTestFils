{"version":3,"sources":["ConvexHull.js"],"names":[],"mappings":"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","file":"ConvexHull-compiled.js","sourcesContent":["console.warn( \"THREE.ConvexHull: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nTHREE.ConvexHull = ( function () {\n\n\tvar Visible = 0;\n\tvar Deleted = 1;\n\n\tvar v1 = new THREE.Vector3();\n\n\tfunction ConvexHull() {\n\n\t\tthis.tolerance = - 1;\n\n\t\tthis.faces = []; // the generated faces of the convex hull\n\t\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\n\n\t\t// the vertex lists work as follows:\n\t\t//\n\t\t// let 'a' and 'b' be 'Face' instances\n\t\t// let 'v' be points wrapped as instance of 'Vertex'\n\t\t//\n\t\t//     [v, v, ..., v, v, v, ...]\n\t\t//      ^             ^\n\t\t//      |             |\n\t\t//  a.outside     b.outside\n\t\t//\n\t\tthis.assigned = new VertexList();\n\t\tthis.unassigned = new VertexList();\n\n\t\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\n\n\t}\n\n\tObject.assign( ConvexHull.prototype, {\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tif ( Array.isArray( points ) !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.ConvexHull: Points parameter is not an array.' );\n\n\t\t\t}\n\n\t\t\tif ( points.length < 4 ) {\n\n\t\t\t\tconsole.error( 'THREE.ConvexHull: The algorithm needs at least four points.' );\n\n\t\t\t}\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.vertices.push( new VertexNode( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.compute();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tvar points = [];\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar i, l, point;\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tpoint = vertices[ i ].clone();\n\t\t\t\t\t\t\tpoint.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tpoint = new THREE.Vector3();\n\n\t\t\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this.setFromPoints( points );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar faces = this.faces;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// compute signed distance and check on what half space the point lies\n\n\t\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectRay: function ( ray, target ) {\n\n\t\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n\n\t\t\tvar faces = this.faces;\n\n\t\t\tvar tNear = - Infinity;\n\t\t\tvar tFar = Infinity;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// interpret faces as planes for the further computation\n\n\t\t\t\tvar vN = face.distanceToPoint( ray.origin );\n\t\t\t\tvar vD = face.normal.dot( ray.direction );\n\n\t\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n\t\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\n\n\t\t\t\tif ( vN > 0 && vD >= 0 ) return null;\n\n\t\t\t\t// compute the distance from the ray’s origin to the intersection with the plane\n\n\t\t\t\tvar t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\n\n\t\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\n\t\t\t\t// lies \"behind\" the origin\n\n\t\t\t\tif ( t <= 0 ) continue;\n\n\t\t\t\t// now categorized plane as front-facing or back-facing\n\n\t\t\t\tif ( vD > 0 ) {\n\n\t\t\t\t\t//  plane faces away from the ray, so this plane is a back-face\n\n\t\t\t\t\ttFar = Math.min( t, tFar );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// front-face\n\n\t\t\t\t\ttNear = Math.max( t, tNear );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tNear > tFar ) {\n\n\t\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// evaluate intersection point\n\n\t\t\t// always try tNear first since its the closer intersection point\n\n\t\t\tif ( tNear !== - Infinity ) {\n\n\t\t\t\tray.at( tNear, target );\n\n\t\t\t} else {\n\n\t\t\t\tray.at( tFar, target );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersectsRay: function ( ray ) {\n\n\t\t\treturn this.intersectRay( ray, v1 ) !== null;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.faces = [];\n\t\t\tthis.vertices = [];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\t\taddVertexToFace: function ( vertex, face ) {\n\n\t\t\tvertex.face = face;\n\n\t\t\tif ( face.outside === null ) {\n\n\t\t\t\tthis.assigned.append( vertex );\n\n\t\t\t} else {\n\n\t\t\t\tthis.assigned.insertBefore( face.outside, vertex );\n\n\t\t\t}\n\n\t\t\tface.outside = vertex;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\t\tremoveVertexFromFace: function ( vertex, face ) {\n\n\t\t\tif ( vertex === face.outside ) {\n\n\t\t\t\t// fix face.outside link\n\n\t\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\n\n\t\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\n\n\t\t\t\t\tface.outside = vertex.next;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// vertex was the only outside vertex that face had\n\n\t\t\t\t\tface.outside = null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.assigned.remove( vertex );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\t\tremoveAllVerticesFromFace: function ( face ) {\n\n\t\t\tif ( face.outside !== null ) {\n\n\t\t\t\t// reference to the first and last vertex of this face\n\n\t\t\t\tvar start = face.outside;\n\t\t\t\tvar end = face.outside;\n\n\t\t\t\twhile ( end.next !== null && end.next.face === face ) {\n\n\t\t\t\t\tend = end.next;\n\n\t\t\t\t}\n\n\t\t\t\tthis.assigned.removeSubList( start, end );\n\n\t\t\t\t// fix references\n\n\t\t\t\tstart.prev = end.next = null;\n\t\t\t\tface.outside = null;\n\n\t\t\t\treturn start;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Removes all the visible vertices that 'face' is able to see\n\n\t\tdeleteFaceVertices: function ( face, absorbingFace ) {\n\n\t\t\tvar faceVertices = this.removeAllVerticesFromFace( face );\n\n\t\t\tif ( faceVertices !== undefined ) {\n\n\t\t\t\tif ( absorbingFace === undefined ) {\n\n\t\t\t\t\t// mark the vertices to be reassigned to some other face\n\n\t\t\t\t\tthis.unassigned.appendChain( faceVertices );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\n\n\t\t\t\t\tvar vertex = faceVertices;\n\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n\t\t\t\t\t\t// will be changed by upcoming method calls\n\n\t\t\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\t\t\tvar distance = absorbingFace.distanceToPoint( vertex.point );\n\n\t\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\n\n\t\t\t\t\t\tif ( distance > this.tolerance ) {\n\n\t\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.unassigned.append( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// now assign next vertex\n\n\t\t\t\t\t\tvertex = nextVertex;\n\n\t\t\t\t\t} while ( vertex !== null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\t\tresolveUnassignedPoints: function ( newFaces ) {\n\n\t\t\tif ( this.unassigned.isEmpty() === false ) {\n\n\t\t\t\tvar vertex = this.unassigned.first();\n\n\t\t\t\tdo {\n\n\t\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\n\n\t\t\t\t\tvar nextVertex = vertex.next;\n\n\t\t\t\t\tvar maxDistance = this.tolerance;\n\n\t\t\t\t\tvar maxFace = null;\n\n\t\t\t\t\tfor ( var i = 0; i < newFaces.length; i ++ ) {\n\n\t\t\t\t\t\tvar face = newFaces[ i ];\n\n\t\t\t\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\t\t\t\tvar distance = face.distanceToPoint( vertex.point );\n\n\t\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\t\tmaxFace = face;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\n\n\t\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvertex = nextVertex;\n\n\t\t\t\t} while ( vertex !== null );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Computes the extremes of a simplex which will be the initial hull\n\n\t\tcomputeExtremes: function () {\n\n\t\t\tvar min = new THREE.Vector3();\n\t\t\tvar max = new THREE.Vector3();\n\n\t\t\tvar minVertices = [];\n\t\t\tvar maxVertices = [];\n\n\t\t\tvar i, l, j;\n\n\t\t\t// initially assume that the first vertex is the min/max\n\n\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\n\n\t\t\t}\n\n\t\t\tmin.copy( this.vertices[ 0 ].point );\n\t\t\tmax.copy( this.vertices[ 0 ].point );\n\n\t\t\t// compute the min/max vertex on all six directions\n\n\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvar point = vertex.point;\n\n\t\t\t\t// update the min coordinates\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\n\n\t\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\t\tminVertices[ j ] = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// update the max coordinates\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\n\n\t\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\t\tmaxVertices[ j ] = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use min/max vectors to compute an optimal epsilon\n\n\t\t\tthis.tolerance = 3 * Number.EPSILON * (\n\t\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\n\t\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\n\t\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\n\t\t\t);\n\n\t\t\treturn { min: minVertices, max: maxVertices };\n\n\t\t},\n\n\t\t// Computes the initial simplex assigning to its faces all the points\n\t\t// that are candidates to form part of the hull\n\n\t\tcomputeInitialHull: function () {\n\n\t\t\tvar line3, plane, closestPoint;\n\n\t\t\treturn function computeInitialHull() {\n\n\t\t\t\tif ( line3 === undefined ) {\n\n\t\t\t\t\tline3 = new THREE.Line3();\n\t\t\t\t\tplane = new THREE.Plane();\n\t\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar vertex, vertices = this.vertices;\n\t\t\t\tvar extremes = this.computeExtremes();\n\t\t\t\tvar min = extremes.min;\n\t\t\t\tvar max = extremes.max;\n\n\t\t\t\tvar v0, v1, v2, v3;\n\t\t\t\tvar i, l, j;\n\n\t\t\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n\t\t\t\t// (max.x - min.x)\n\t\t\t\t// (max.y - min.y)\n\t\t\t\t// (max.z - min.z)\n\n\t\t\t\tvar distance, maxDistance = 0;\n\t\t\t\tvar index = 0;\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tdistance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tindex = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tv0 = min[ index ];\n\t\t\t\tv1 = max[ index ];\n\n\t\t\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n\t\t\t\tmaxDistance = 0;\n\t\t\t\tline3.set( v0.point, v1.point );\n\n\t\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\n\n\t\t\t\t\t\tline3.closestPointToPoint( vertex.point, true, closestPoint );\n\n\t\t\t\t\t\tdistance = closestPoint.distanceToSquared( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tv2 = vertex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\t\t\t\tmaxDistance = - 1;\n\t\t\t\tplane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\n\n\t\t\t\tfor ( i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\n\n\t\t\t\t\t\tdistance = Math.abs( plane.distanceToPoint( vertex.point ) );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tv3 = vertex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar faces = [];\n\n\t\t\t\tif ( plane.distanceToPoint( v3.point ) < 0 ) {\n\n\t\t\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tFace.create( v0, v1, v2 ),\n\t\t\t\t\t\tFace.create( v3, v1, v0 ),\n\t\t\t\t\t\tFace.create( v3, v2, v1 ),\n\t\t\t\t\t\tFace.create( v3, v0, v2 )\n\t\t\t\t\t);\n\n\t\t\t\t\t// set the twin edge\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\n\n\t\t\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tFace.create( v0, v2, v1 ),\n\t\t\t\t\t\tFace.create( v3, v0, v1 ),\n\t\t\t\t\t\tFace.create( v3, v1, v2 ),\n\t\t\t\t\t\tFace.create( v3, v2, v0 )\n\t\t\t\t\t);\n\n\t\t\t\t\t// set the twin edge\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tj = ( i + 1 ) % 3;\n\n\t\t\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\n\n\t\t\t\t\t\t// join face[ i ] with face[ i + 1 ]\n\n\t\t\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// the initial hull is the tetrahedron\n\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tthis.faces.push( faces[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t// initial assignment of vertices to the faces of the tetrahedron\n\n\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tvertex = vertices[ i ];\n\n\t\t\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\n\n\t\t\t\t\t\tmaxDistance = this.tolerance;\n\t\t\t\t\t\tvar maxFace = null;\n\n\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\tdistance = this.faces[ j ].distanceToPoint( vertex.point );\n\n\t\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\t\tmaxFace = this.faces[ j ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// Removes inactive faces\n\n\t\treindexFaces: function () {\n\n\t\t\tvar activeFaces = [];\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\t\tactiveFaces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.faces = activeFaces;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Finds the next vertex to create faces with the current hull\n\n\t\tnextVertexToAdd: function () {\n\n\t\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n\n\t\t\tif ( this.assigned.isEmpty() === false ) {\n\n\t\t\t\tvar eyeVertex, maxDistance = 0;\n\n\t\t\t\t// grap the first available face and start with the first visible vertex of that face\n\n\t\t\t\tvar eyeFace = this.assigned.first().face;\n\t\t\t\tvar vertex = eyeFace.outside;\n\n\t\t\t\t// now calculate the farthest vertex that face can see\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvar distance = eyeFace.distanceToPoint( vertex.point );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\teyeVertex = vertex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvertex = vertex.next;\n\n\t\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\n\n\t\t\t\treturn eyeVertex;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Computes a chain of half edges in CCW order called the 'horizon'.\n\t\t// For an edge to be part of the horizon it must join a face that can see\n\t\t// 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\t\tcomputeHorizon: function ( eyePoint, crossEdge, face, horizon ) {\n\n\t\t\t// moves face's vertices to the 'unassigned' vertex list\n\n\t\t\tthis.deleteFaceVertices( face );\n\n\t\t\tface.mark = Deleted;\n\n\t\t\tvar edge;\n\n\t\t\tif ( crossEdge === null ) {\n\n\t\t\t\tedge = crossEdge = face.getEdge( 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// start from the next edge since 'crossEdge' was already analyzed\n\t\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\n\n\t\t\t\tedge = crossEdge.next;\n\n\t\t\t}\n\n\t\t\tdo {\n\n\t\t\t\tvar twinEdge = edge.twin;\n\t\t\t\tvar oppositeFace = twinEdge.face;\n\n\t\t\t\tif ( oppositeFace.mark === Visible ) {\n\n\t\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\n\n\t\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\n\n\t\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\n\n\t\t\t\t\t\thorizon.push( edge );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tedge = edge.next;\n\n\t\t\t} while ( edge !== crossEdge );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\t\taddAdjoiningFace: function ( eyeVertex, horizonEdge ) {\n\n\t\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\n\n\t\t\tvar face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\n\n\t\t\tthis.faces.push( face );\n\n\t\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n\t\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\n\n\t\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\n\n\n\t\t},\n\n\t\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\n\t\t//  horizon opposite face and the face on the left/right\n\n\t\taddNewFaces: function ( eyeVertex, horizon ) {\n\n\t\t\tthis.newFaces = [];\n\n\t\t\tvar firstSideEdge = null;\n\t\t\tvar previousSideEdge = null;\n\n\t\t\tfor ( var i = 0; i < horizon.length; i ++ ) {\n\n\t\t\t\tvar horizonEdge = horizon[ i ];\n\n\t\t\t\t// returns the right side edge\n\n\t\t\t\tvar sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\n\n\t\t\t\tif ( firstSideEdge === null ) {\n\n\t\t\t\t\tfirstSideEdge = sideEdge;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n\n\t\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\n\n\t\t\t\t}\n\n\t\t\t\tthis.newFaces.push( sideEdge.face );\n\t\t\t\tpreviousSideEdge = sideEdge;\n\n\t\t\t}\n\n\t\t\t// perform final join of new faces\n\n\t\t\tfirstSideEdge.next.setTwin( previousSideEdge );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Adds a vertex to the hull\n\n\t\taddVertexToHull: function ( eyeVertex ) {\n\n\t\t\tvar horizon = [];\n\n\t\t\tthis.unassigned.clear();\n\n\t\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n\t\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\n\n\t\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\n\n\t\t\tthis.addNewFaces( eyeVertex, horizon );\n\n\t\t\t// reassign 'unassigned' vertices to the new faces\n\n\t\t\tthis.resolveUnassignedPoints( this.newFaces );\n\n\t\t\treturn\tthis;\n\n\t\t},\n\n\t\tcleanup: function () {\n\n\t\t\tthis.assigned.clear();\n\t\t\tthis.unassigned.clear();\n\t\t\tthis.newFaces = [];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompute: function () {\n\n\t\t\tvar vertex;\n\n\t\t\tthis.computeInitialHull();\n\n\t\t\t// add all available vertices gradually to the hull\n\n\t\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\n\n\t\t\t\tthis.addVertexToHull( vertex );\n\n\t\t\t}\n\n\t\t\tthis.reindexFaces();\n\n\t\t\tthis.cleanup();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Face() {\n\n\t\tthis.normal = new THREE.Vector3();\n\t\tthis.midpoint = new THREE.Vector3();\n\t\tthis.area = 0;\n\n\t\tthis.constant = 0; // signed distance from face to the origin\n\t\tthis.outside = null; // reference to a vertex in a vertex list this face can see\n\t\tthis.mark = Visible;\n\t\tthis.edge = null;\n\n\t}\n\n\tObject.assign( Face, {\n\n\t\tcreate: function ( a, b, c ) {\n\n\t\t\tvar face = new Face();\n\n\t\t\tvar e0 = new HalfEdge( a, face );\n\t\t\tvar e1 = new HalfEdge( b, face );\n\t\t\tvar e2 = new HalfEdge( c, face );\n\n\t\t\t// join edges\n\n\t\t\te0.next = e2.prev = e1;\n\t\t\te1.next = e0.prev = e2;\n\t\t\te2.next = e1.prev = e0;\n\n\t\t\t// main half edge reference\n\n\t\t\tface.edge = e0;\n\n\t\t\treturn face.compute();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Face.prototype, {\n\n\t\tgetEdge: function ( i ) {\n\n\t\t\tvar edge = this.edge;\n\n\t\t\twhile ( i > 0 ) {\n\n\t\t\t\tedge = edge.next;\n\t\t\t\ti --;\n\n\t\t\t}\n\n\t\t\twhile ( i < 0 ) {\n\n\t\t\t\tedge = edge.prev;\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn edge;\n\n\t\t},\n\n\t\tcompute: function () {\n\n\t\t\tvar triangle;\n\n\t\t\treturn function compute() {\n\n\t\t\t\tif ( triangle === undefined ) triangle = new THREE.Triangle();\n\n\t\t\t\tvar a = this.edge.tail();\n\t\t\t\tvar b = this.edge.head();\n\t\t\t\tvar c = this.edge.next.head();\n\n\t\t\t\ttriangle.set( a.point, b.point, c.point );\n\n\t\t\t\ttriangle.getNormal( this.normal );\n\t\t\t\ttriangle.getMidpoint( this.midpoint );\n\t\t\t\tthis.area = triangle.getArea();\n\n\t\t\t\tthis.constant = this.normal.dot( this.midpoint );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) - this.constant;\n\n\t\t}\n\n\t} );\n\n\t// Entity for a Doubly-Connected Edge List (DCEL).\n\n\tfunction HalfEdge( vertex, face ) {\n\n\t\tthis.vertex = vertex;\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\t\tthis.twin = null;\n\t\tthis.face = face;\n\n\t}\n\n\tObject.assign( HalfEdge.prototype, {\n\n\t\thead: function () {\n\n\t\t\treturn this.vertex;\n\n\t\t},\n\n\t\ttail: function () {\n\n\t\t\treturn this.prev ? this.prev.vertex : null;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\tvar head = this.head();\n\t\t\tvar tail = this.tail();\n\n\t\t\tif ( tail !== null ) {\n\n\t\t\t\treturn tail.point.distanceTo( head.point );\n\n\t\t\t}\n\n\t\t\treturn - 1;\n\n\t\t},\n\n\t\tlengthSquared: function () {\n\n\t\t\tvar head = this.head();\n\t\t\tvar tail = this.tail();\n\n\t\t\tif ( tail !== null ) {\n\n\t\t\t\treturn tail.point.distanceToSquared( head.point );\n\n\t\t\t}\n\n\t\t\treturn - 1;\n\n\t\t},\n\n\t\tsetTwin: function ( edge ) {\n\n\t\t\tthis.twin = edge;\n\t\t\tedge.twin = this;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// A vertex as a double linked list node.\n\n\tfunction VertexNode( point ) {\n\n\t\tthis.point = point;\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\t\tthis.face = null; // the face that is able to see this vertex\n\n\t}\n\n\t// A double linked list that contains vertex nodes.\n\n\tfunction VertexList() {\n\n\t\tthis.head = null;\n\t\tthis.tail = null;\n\n\t}\n\n\tObject.assign( VertexList.prototype, {\n\n\t\tfirst: function () {\n\n\t\t\treturn this.head;\n\n\t\t},\n\n\t\tlast: function () {\n\n\t\t\treturn this.tail;\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.head = this.tail = null;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Inserts a vertex before the target vertex\n\n\t\tinsertBefore: function ( target, vertex ) {\n\n\t\t\tvertex.prev = target.prev;\n\t\t\tvertex.next = target;\n\n\t\t\tif ( vertex.prev === null ) {\n\n\t\t\t\tthis.head = vertex;\n\n\t\t\t} else {\n\n\t\t\t\tvertex.prev.next = vertex;\n\n\t\t\t}\n\n\t\t\ttarget.prev = vertex;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Inserts a vertex after the target vertex\n\n\t\tinsertAfter: function ( target, vertex ) {\n\n\t\t\tvertex.prev = target;\n\t\t\tvertex.next = target.next;\n\n\t\t\tif ( vertex.next === null ) {\n\n\t\t\t\tthis.tail = vertex;\n\n\t\t\t} else {\n\n\t\t\t\tvertex.next.prev = vertex;\n\n\t\t\t}\n\n\t\t\ttarget.next = vertex;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Appends a vertex to the end of the linked list\n\n\t\tappend: function ( vertex ) {\n\n\t\t\tif ( this.head === null ) {\n\n\t\t\t\tthis.head = vertex;\n\n\t\t\t} else {\n\n\t\t\t\tthis.tail.next = vertex;\n\n\t\t\t}\n\n\t\t\tvertex.prev = this.tail;\n\t\t\tvertex.next = null; // the tail has no subsequent vertex\n\n\t\t\tthis.tail = vertex;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Appends a chain of vertices where 'vertex' is the head.\n\n\t\tappendChain: function ( vertex ) {\n\n\t\t\tif ( this.head === null ) {\n\n\t\t\t\tthis.head = vertex;\n\n\t\t\t} else {\n\n\t\t\t\tthis.tail.next = vertex;\n\n\t\t\t}\n\n\t\t\tvertex.prev = this.tail;\n\n\t\t\t// ensure that the 'tail' reference points to the last vertex of the chain\n\n\t\t\twhile ( vertex.next !== null ) {\n\n\t\t\t\tvertex = vertex.next;\n\n\t\t\t}\n\n\t\t\tthis.tail = vertex;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Removes a vertex from the linked list\n\n\t\tremove: function ( vertex ) {\n\n\t\t\tif ( vertex.prev === null ) {\n\n\t\t\t\tthis.head = vertex.next;\n\n\t\t\t} else {\n\n\t\t\t\tvertex.prev.next = vertex.next;\n\n\t\t\t}\n\n\t\t\tif ( vertex.next === null ) {\n\n\t\t\t\tthis.tail = vertex.prev;\n\n\t\t\t} else {\n\n\t\t\t\tvertex.next.prev = vertex.prev;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\t\tremoveSubList: function ( a, b ) {\n\n\t\t\tif ( a.prev === null ) {\n\n\t\t\t\tthis.head = b.next;\n\n\t\t\t} else {\n\n\t\t\t\ta.prev.next = b.next;\n\n\t\t\t}\n\n\t\t\tif ( b.next === null ) {\n\n\t\t\t\tthis.tail = a.prev;\n\n\t\t\t} else {\n\n\t\t\t\tb.next.prev = a.prev;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\treturn this.head === null;\n\n\t\t}\n\n\t} );\n\n\treturn ConvexHull;\n\n} )();\n"]}