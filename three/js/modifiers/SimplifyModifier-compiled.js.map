{"version":3,"sources":["SimplifyModifier.js"],"names":[],"mappings":"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","file":"SimplifyModifier-compiled.js","sourcesContent":["console.warn( \"THREE.SimplifyModifier: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\nTHREE.SimplifyModifier = function () {};\n\n( function () {\n\n\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\tfunction pushIfUnique( array, object ) {\n\n\t\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n\t}\n\n\tfunction removeFromArray( array, object ) {\n\n\t\tvar k = array.indexOf( object );\n\t\tif ( k > - 1 ) array.splice( k, 1 );\n\n\t}\n\n\tfunction computeEdgeCollapseCost( u, v ) {\n\n\t\t// if we collapse edge uv by moving u to v then how\n\t\t// much different will the model change, i.e. the \"error\".\n\n\t\tvar edgelength = v.position.distanceTo( u.position );\n\t\tvar curvature = 0;\n\n\t\tvar sideFaces = [];\n\t\tvar i, il = u.faces.length, face, sideFace;\n\n\t\t// find the \"sides\" triangles that are on the edge uv\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tface = u.faces[ i ];\n\n\t\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\t\tsideFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use the triangle facing most away from the sides\n\t\t// to determine our curvature term\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tvar minCurvature = 1;\n\t\t\tface = u.faces[ i ];\n\n\t\t\tfor ( var j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\t\tsideFace = sideFaces[ j ];\n\t\t\t\t// use dot product of face normals.\n\t\t\t\tvar dotProd = face.normal.dot( sideFace.normal );\n\t\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t\t}\n\n\t\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t\t}\n\n\t\t// crude approach in attempt to preserve borders\n\t\t// though it seems not to be totally correct\n\t\tvar borders = 0;\n\t\tif ( sideFaces.length < 2 ) {\n\n\t\t\t// we add some arbitrary cost for borders,\n\t\t\t// borders += 10;\n\t\t\tcurvature = 1;\n\n\t\t}\n\n\t\tvar amt = edgelength * curvature + borders;\n\n\t\treturn amt;\n\n\t}\n\n\tfunction computeEdgeCostAtVertex( v ) {\n\n\t\t// compute the edge collapse cost for all edges that start\n\t\t// from vertex v.  Since we are only interested in reducing\n\t\t// the object by selecting the min cost edge at each step, we\n\t\t// only cache the cost of the least cost edge at this vertex\n\t\t// (in member variable collapse) as well as the value of the\n\t\t// cost (in member variable collapseCost).\n\n\t\tif ( v.neighbors.length === 0 ) {\n\n\t\t\t// collapse if no neighbors.\n\t\t\tv.collapseNeighbor = null;\n\t\t\tv.collapseCost = - 0.01;\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tv.collapseCost = 100000;\n\t\tv.collapseNeighbor = null;\n\n\t\t// search all neighboring edges for \"least cost\" edge\n\t\tfor ( var i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\t\tvar collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.collapseCost = collapseCost;\n\t\t\t\tv.minCost = collapseCost;\n\t\t\t\tv.totalCost = 0;\n\t\t\t\tv.costCount = 0;\n\n\t\t\t}\n\n\t\t\tv.costCount ++;\n\t\t\tv.totalCost += collapseCost;\n\n\t\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\tv.minCost = collapseCost;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// we average the cost of collapsing at this vertex\n\t\tv.collapseCost = v.totalCost / v.costCount;\n\t\t// v.collapseCost = v.minCost;\n\n\t}\n\n\tfunction removeVertex( v, vertices ) {\n\n\t\tconsole.assert( v.faces.length === 0 );\n\n\t\twhile ( v.neighbors.length ) {\n\n\t\t\tvar n = v.neighbors.pop();\n\t\t\tremoveFromArray( n.neighbors, v );\n\n\t\t}\n\n\t\tremoveFromArray( vertices, v );\n\n\t}\n\n\tfunction removeFace( f, faces ) {\n\n\t\tremoveFromArray( faces, f );\n\n\t\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\t\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\t\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t\t// TODO optimize this!\n\t\tvar vs = [ f.v1, f.v2, f.v3 ];\n\t\tvar v1, v2;\n\n\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\tv1 = vs[ i ];\n\t\t\tv2 = vs[ ( i + 1 ) % 3 ];\n\n\t\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\t\tv1.removeIfNonNeighbor( v2 );\n\t\t\tv2.removeIfNonNeighbor( v1 );\n\n\t\t}\n\n\t}\n\n\tfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t\t// Collapse the edge uv by moving vertex u onto v\n\n\t\tif ( ! v ) {\n\n\t\t\t// u is a vertex all by itself so just delete it..\n\t\t\tremoveVertex( u, vertices );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar i;\n\t\tvar tmpVertices = [];\n\n\t\tfor ( i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t\t}\n\n\n\t\t// delete triangles on edge uv:\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tif ( u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update remaining triangles to have v instead of u\n\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t\t}\n\n\n\t\tremoveVertex( u, vertices );\n\n\t\t// recompute the edge collapse costs in neighborhood\n\t\tfor ( i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t\t}\n\n\t}\n\n\n\n\tfunction minimumCostEdge( vertices ) {\n\n\t\t// O(n * n) approach. TODO optimize this\n\n\t\tvar least = vertices[ 0 ];\n\n\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\t\tleast = vertices[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn least;\n\n\t}\n\n\t// we use a triangle class to represent structure of face slightly differently\n\n\tfunction Triangle( v1, v2, v3, a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t\tthis.normal = new THREE.Vector3();\n\n\t\tthis.computeNormal();\n\n\t\tv1.faces.push( this );\n\t\tv1.addUniqueNeighbor( v2 );\n\t\tv1.addUniqueNeighbor( v3 );\n\n\t\tv2.faces.push( this );\n\t\tv2.addUniqueNeighbor( v1 );\n\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\tv3.faces.push( this );\n\t\tv3.addUniqueNeighbor( v1 );\n\t\tv3.addUniqueNeighbor( v2 );\n\n\t}\n\n\tTriangle.prototype.computeNormal = function () {\n\n\t\tvar vA = this.v1.position;\n\t\tvar vB = this.v2.position;\n\t\tvar vC = this.v3.position;\n\n\t\tcb.subVectors( vC, vB );\n\t\tab.subVectors( vA, vB );\n\t\tcb.cross( ab ).normalize();\n\n\t\tthis.normal.copy( cb );\n\n\t};\n\n\tTriangle.prototype.hasVertex = function ( v ) {\n\n\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t};\n\n\tTriangle.prototype.replaceVertex = function ( oldv, newv ) {\n\n\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\tremoveFromArray( oldv.faces, this );\n\t\tnewv.faces.push( this );\n\n\n\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\tthis.computeNormal();\n\n\t};\n\n\tfunction Vertex( v, id ) {\n\n\t\tthis.position = v;\n\n\t\tthis.id = id; // old index id\n\n\t\tthis.faces = []; // faces vertex is connected\n\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t}\n\n\tVertex.prototype.addUniqueNeighbor = function ( vertex ) {\n\n\t\tpushIfUnique( this.neighbors, vertex );\n\n\t};\n\n\tVertex.prototype.removeIfNonNeighbor = function ( n ) {\n\n\t\tvar neighbors = this.neighbors;\n\t\tvar faces = this.faces;\n\n\t\tvar offset = neighbors.indexOf( n );\n\t\tif ( offset === - 1 ) return;\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t}\n\n\t\tneighbors.splice( offset, 1 );\n\n\t};\n\n\tTHREE.SimplifyModifier.prototype.modify = function ( geometry, count ) {\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t}\n\n\t\tgeometry.mergeVertices();\n\n\t\tvar oldVertices = geometry.vertices; // Three Position\n\t\tvar oldFaces = geometry.faces; // Three Face\n\n\t\t// conversion\n\t\tvar vertices = [];\n\t\tvar faces = [];\n\n\t\tvar i, il;\n\n\t\t//\n\t\t// put data of original geometry in different data structures\n\t\t//\n\n\t\t// add vertices\n\n\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = new Vertex( oldVertices[ i ], i );\n\t\t\tvertices.push( vertex );\n\n\t\t}\n\n\t\t// add faces\n\n\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\tvar face = oldFaces[ i ];\n\n\t\t\tvar a = face.a;\n\t\t\tvar b = face.b;\n\t\t\tvar c = face.c;\n\n\t\t\tvar triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\tfaces.push( triangle );\n\n\t\t}\n\n\t\t// compute all edge collapse costs\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t}\n\n\t\tvar nextVertex;\n\n\t\tvar z = count;\n\n\t\twhile ( z -- ) {\n\n\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t}\n\n\t\t//\n\n\t\tvar simplifiedGeometry = new THREE.BufferGeometry();\n\t\tvar position = [];\n\t\tvar index = [];\n\n\t\t//\n\n\t\tfor ( i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tvar vertex = vertices[ i ].position;\n\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = vertices.indexOf( face.v1 );\n\t\t\tvar b = vertices.indexOf( face.v2 );\n\t\t\tvar c = vertices.indexOf( face.v3 );\n\n\t\t\tindex.push( a, b, c );\n\n\t\t}\n\n\t\t//\n\n\t\tsimplifiedGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\tsimplifiedGeometry.setIndex( index );\n\n\t\treturn simplifiedGeometry;\n\n\t};\n\n} )();\n"]}