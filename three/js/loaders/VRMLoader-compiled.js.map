{"version":3,"sources":["VRMLoader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,0SAAd;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,SAAN,GAAoB,YAAY;;AAE/B,UAAS,SAAT,CAAoB,OAApB,EAA8B;;AAE7B,MAAK,MAAM,UAAN,KAAqB,SAA1B,EAAsC;;AAErC,SAAM,IAAI,KAAJ,CAAW,2CAAX,CAAN;AAEA;;AAED,QAAM,MAAN,CAAa,IAAb,CAAmB,IAAnB,EAAyB,OAAzB;;AAEA,OAAK,UAAL,GAAkB,IAAI,MAAM,UAAV,CAAsB,KAAK,OAA3B,CAAlB;AAEA;;AAED,WAAU,SAAV,GAAsB,OAAO,MAAP,CAAe,OAAO,MAAP,CAAe,MAAM,MAAN,CAAa,SAA5B,CAAf,EAAwD;;AAE7E,eAAa,SAFgE;;AAI7E,QAAM,UAAW,GAAX,EAAgB,MAAhB,EAAwB,UAAxB,EAAoC,OAApC,EAA8C;;AAEnD,OAAI,QAAQ,IAAZ;;AAEA,QAAK,UAAL,CAAgB,IAAhB,CAAsB,GAAtB,EAA2B,UAAW,IAAX,EAAkB;;AAE5C,QAAI;;AAEH,WAAM,KAAN,CAAa,IAAb,EAAmB,MAAnB;AAEA,KAJD,CAIE,OAAQ,CAAR,EAAY;;AAEb,SAAK,OAAL,EAAe;;AAEd,cAAS,CAAT;AAEA,MAJD,MAIO;;AAEN,cAAQ,KAAR,CAAe,CAAf;AAEA;;AAED,WAAM,OAAN,CAAc,SAAd,CAAyB,GAAzB;AAEA;AAED,IAtBD,EAsBG,UAtBH,EAsBe,OAtBf;AAwBA,GAhC4E;;AAkC7E,kBAAgB,UAAW,WAAX,EAAyB;;AAExC,QAAK,UAAL,CAAgB,cAAhB,CAAgC,WAAhC;AACA,UAAO,IAAP;AAEA,GAvC4E;;AAyC7E,SAAO,UAAW,IAAX,EAAiB,MAAjB,EAA0B;;AAEhC;AACA;AACA;;AAEA;;AAEA,UAAQ,IAAR;AAEA;;AAnD4E,EAAxD,CAAtB;;AAuDA,QAAO,SAAP;AAEA,CAzEiB,EAAlB","file":"VRMLoader-compiled.js","sourcesContent":["console.warn( \"THREE.VRMLoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n// VRM Specification: https://dwango.github.io/vrm/vrm_spec/\n//\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nTHREE.VRMLoader = ( function () {\n\n\tfunction VRMLoader( manager ) {\n\n\t\tif ( THREE.GLTFLoader === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.VRMLoader: Import THREE.GLTFLoader.' );\n\n\t\t}\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.gltfLoader = new THREE.GLTFLoader( this.manager );\n\n\t}\n\n\tVRMLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: VRMLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.gltfLoader.load( url, function ( gltf ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( gltf, onLoad );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.gltfLoader.setDRACOLoader( dracoLoader );\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( gltf, onLoad ) {\n\n\t\t\t// var gltfParser = gltf.parser;\n\t\t\t// var gltfExtensions = gltf.userData.gltfExtensions || {};\n\t\t\t// var vrmExtension = gltfExtensions.VRM || {};\n\n\t\t\t// handle VRM Extension here\n\n\t\t\tonLoad( gltf );\n\n\t\t}\n\n\t} );\n\n\treturn VRMLoader;\n\n} )();\n"]}