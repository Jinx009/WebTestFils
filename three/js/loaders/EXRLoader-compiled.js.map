{"version":3,"sources":["EXRLoader.js"],"names":[],"mappings":"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","file":"EXRLoader-compiled.js","sourcesContent":["console.warn( \"THREE.EXRLoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\nTHREE.EXRLoader = function ( manager ) {\n\n\tTHREE.DataTextureLoader.call( this, manager );\n\n\tthis.type = THREE.FloatType;\n\n};\n\nTHREE.EXRLoader.prototype = Object.assign( Object.create( THREE.DataTextureLoader.prototype ), {\n\n\tconstructor: THREE.EXRLoader,\n\n\tparse: function ( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst NBITS = 16;\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tvar tmpDataView = new DataView( new ArrayBuffer( 8 ) );\n\n\t\tfunction frexp( value ) {\n\n\t\t\tif ( value === 0 ) return [ value, 0 ];\n\n\t\t\ttmpDataView.setFloat64( 0, value );\n\n\t\t\tvar bits = ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF;\n\t\t\tif ( bits === 0 ) { // denormal\n\n\t\t\t\ttmpDataView.setFloat64( 0, value * Math.pow( 2, 64 ) ); // exp + 64\n\t\t\t\tbits = ( ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF ) - 64;\n\n\t\t\t}\n\n\t\t\tvar exponent = bits - 1022;\n\t\t\tvar mantissa = ldexp( value, - exponent );\n\n\t\t\treturn [ mantissa, exponent ];\n\n\t\t}\n\n\t\tfunction ldexp( mantissa, exponent ) {\n\n\t\t\tvar steps = Math.min( 3, Math.ceil( Math.abs( exponent ) / 1023 ) );\n\t\t\tvar result = mantissa;\n\n\t\t\tfor ( var i = 0; i < steps; i ++ )\n\t\t\t\tresult *= Math.pow( 2, Math.floor( ( exponent + i ) / steps ) );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tvar k = 0;\n\n\t\t\tfor ( var i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( var i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( var i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tvar c = 0;\n\n\t\t\tfor ( var i = 58; i > 0; -- i ) {\n\n\t\t\t\tvar nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tvar l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tvar p = inOffset;\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tvar l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tvar zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tvar zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tvar c = hufCode( hcode[ im ] );\n\t\t\t\tvar l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tvar pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tvar p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( var i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tvar plOffset = 0;\n\n\t\t\t\t\tfor ( var i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tvar pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tvar cs = ( c >> lc );\n\t\t\t\tvar cs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tvar s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tvar ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tvar ls = Int16( l );\n\t\t\tvar hs = Int16( h );\n\n\t\t\tvar hi = hs;\n\t\t\tvar ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tvar as = ai;\n\t\t\tvar bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wdec16( l, h ) {\n\n\t\t\tvar m = UInt16( l );\n\t\t\tvar d = UInt16( h );\n\n\t\t\tvar bb = ( m - ( d >> 1 ) ) & MOD_MASK;\n\t\t\tvar aa = ( d + bb - A_OFFSET ) & MOD_MASK;\n\n\t\t\twdec14Return.a = aa;\n\t\t\twdec14Return.b = bb;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\n\n\t\t\tvar w14 = mx < ( 1 << 14 );\n\t\t\tvar n = ( nx > ny ) ? ny : nx;\n\t\t\tvar p = 1;\n\t\t\tvar p2;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tvar py = 0;\n\t\t\t\tvar ey = py + oy * ( ny - p2 );\n\t\t\t\tvar oy1 = oy * p;\n\t\t\t\tvar oy2 = oy * p2;\n\t\t\t\tvar ox1 = ox * p;\n\t\t\t\tvar ox2 = ox * p2;\n\t\t\t\tvar i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\t\t\t\t\t\tvar p10 = px + oy1;\n\t\t\t\t\t\tvar p11 = p10 + ox1;\n\n\t\t\t\t\t\tif ( w14 ) {\n\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tvar p10 = px + oy1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\t\t\tvar outBufferEndOffset = no;\n\t\t\tvar inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tvar index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tvar pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tvar l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tvar pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tvar outOffset = { value: 0 };\n\t\t\tvar initialInOffset = inOffset.value;\n\n\t\t\tvar im = parseUint32( inDataView, inOffset );\n\t\t\tvar iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tvar nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow 'Something wrong with HUF_ENCSIZE';\n\n\t\t\t}\n\n\t\t\tvar freq = new Array( HUF_ENCSIZE );\n\t\t\tvar hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tvar ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow 'Something wrong with hufUncompress';\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( var i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( var t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tvar d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tvar t1 = 0;\n\t\t\tvar t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tvar s = 0;\n\t\t\tvar stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tvar size = source.byteLength;\n\t\t\tvar out = new Array();\n\t\t\tvar p = 0;\n\n\t\t\tvar reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tvar l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tvar count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tvar value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( var i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\tvar width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tvar height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tvar numComp = 3;\n\n\t\t\tvar numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tvar numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tvar numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tvar leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tvar leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tvar currAcComp = { value: 0 };\n\t\t\tvar currDcComp = new Array( numComp );\n\t\t\tvar dctData = new Array( numComp );\n\t\t\tvar halfZigBlock = new Array( numComp );\n\t\t\tvar rowBlock = new Array( numComp );\n\t\t\tvar rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tvar maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tvar maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tvar halfRow = new Uint16Array( width );\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( var comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tvar type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( var y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tvar acValue;\n\t\t\tvar dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tvar alpha = new Array( 4 );\n\t\t\tvar beta = new Array( 4 );\n\t\t\tvar theta = new Array( 4 );\n\t\t\tvar gamma = new Array( 4 );\n\n\t\t\tfor ( var row = 0; row < 8; ++ row ) {\n\n\t\t\t\tvar rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( var column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tvar y = data[ 0 ][ i ];\n\t\t\t\tvar cb = data[ 1 ][ i ];\n\t\t\t\tvar cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = encodeFloat16( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tvar compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tvar rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tvar compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof Inflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t}\n\n\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\n\t\t\tvar rawBuffer = new Uint8Array( inflate.decompress().buffer );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\n\t\t\tvar tmpBufSize = info.width * scanlineBlockSize * ( EXRHeader.channels.length * info.type );\n\t\t\tvar outBuffer = new Uint16Array( tmpBufSize );\n\t\t\tvar bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar pizChannelData = new Array( info.channels );\n\t\t\tfor ( var i = 0; i < info.channels; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.width;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\t\t\tvar minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tvar maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( var i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tvar lut = new Uint16Array( USHORT_RANGE );\n\t\t\tvar maxValue = reverseLutFromBitmap( bitmap, lut );\n\n\t\t\tvar length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( var j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size,\n\t\t\t\t\t\tmaxValue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tvar tmpOffset = 0;\n\t\t\tvar tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( var y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( var c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tvar cd = pizChannelData[ c ];\n\n\t\t\t\t\tvar n = cd.nx * cd.size;\n\t\t\t\t\tvar cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPXR( info ) {\n\n\t\t\tvar compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof Inflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t}\n\n\t\t\tconst inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\tconst rawBuffer = new Uint8Array( inflate.decompress().buffer );\n\n\t\t\tconst sz = info.lines * info.channels * info.width;\n\t\t\tconst tmpBuffer = ( info.type == 1 ) ? new Uint16Array( sz ) : new Uint32Array( sz );\n\n\t\t\tlet tmpBufferEnd = 0;\n\t\t\tlet writePtr = 0;\n\t\t\tconst ptr = new Array( 4 );\n\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tlet pixel = 0;\n\n\t\t\t\t\tswitch ( info.type ) {\n\n\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\t\t\tvar outBuffer = new Uint8Array( info.width * info.lines * ( EXRHeader.channels.length * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tvar dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n\n\t\t\t// Read channel ruleset information\n\t\t\tvar channelRules = new Array();\n\t\t\tvar ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tvar value = parseUint8( inDataView, inOffset );\n\t\t\t\tvar compression = ( value >> 2 ) & 3;\n\t\t\t\tvar csc = ( value >> 4 ) - 1;\n\t\t\t\tvar index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tvar type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tvar channels = EXRHeader.channels;\n\t\t\tvar channelData = new Array( info.channels );\n\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ] = {};\n\t\t\t\tvar channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.width;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tvar cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( var offset = 0; offset < info.channels; ++ offset ) {\n\n\t\t\t\tvar cd = channelData[ offset ];\n\n\t\t\t\tfor ( var i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tvar rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( inflate.decompress().buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tvar zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tvar dcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tvar inflate = new Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\tvar rleBuffer = decodeRunLength( inflate.decompress().buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar rowOffsets = new Array( channelData.length );\n\t\t\tfor ( var i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( var chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( var i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tvar row = 0;\n\t\t\t\t\t\tvar rleOffset = 0;\n\n\t\t\t\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tvar rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( var x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( var byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow 'EXRLoader.parse: unsupported channel compression';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tvar uintBuffer = new Uint8Array( buffer );\n\t\t\tvar endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseUlong( dataView, offset ) {\n\n\t\t\tvar uLong = dataView.getUint32( 0, true );\n\n\t\t\toffset.value = offset.value + ULONG_SIZE;\n\n\t\t\treturn uLong;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tvar x = parseInt32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tvar x = parseUint32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tvar Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tvar Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tvar Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tvar Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseInt64( dataView, offset ) {\n\n\t\t\tvar int = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn int;\n\n\t\t}\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tvar float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn encodeFloat16( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tvar exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\t// http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\t\tfunction encodeFloat16( val ) {\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code.\n\t\t\t*/\n\n\t\t\ttmpDataView.setFloat32( 0, val );\n\t\t\tvar x = tmpDataView.getInt32( 0 );\n\n\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\tif ( e > 142 ) {\n\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\tif ( e < 113 ) {\n\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tvar Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tvar startOffset = offset.value;\n\t\t\tvar channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar pixelType = parseInt32( dataView, offset );\n\t\t\t\tvar pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tvar xSampling = parseInt32( dataView, offset );\n\t\t\t\tvar ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tvar redX = parseFloat32( dataView, offset );\n\t\t\tvar redY = parseFloat32( dataView, offset );\n\t\t\tvar greenX = parseFloat32( dataView, offset );\n\t\t\tvar greenY = parseFloat32( dataView, offset );\n\t\t\tvar blueX = parseFloat32( dataView, offset );\n\t\t\tvar blueY = parseFloat32( dataView, offset );\n\t\t\tvar whiteX = parseFloat32( dataView, offset );\n\t\t\tvar whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tvar compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tvar compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tvar xMin = parseUint32( dataView, offset );\n\t\t\tvar yMin = parseUint32( dataView, offset );\n\t\t\tvar xMax = parseUint32( dataView, offset );\n\t\t\tvar yMax = parseUint32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tvar lineOrders = [\n\t\t\t\t'INCREASING_Y'\n\t\t\t];\n\n\t\t\tvar lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tvar x = parseFloat32( dataView, offset );\n\t\t\tvar y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseV3f( dataView, offset ) {\n\n\t\t\tvar x = parseFloat32( dataView, offset );\n\t\t\tvar y = parseFloat32( dataView, offset );\n\t\t\tvar z = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y, z ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'v3f' ) {\n\n\t\t\t\treturn parseV3f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else if ( type === 'preview' ) {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn 'skipped';\n\n\t\t\t} else {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bufferDataView = new DataView( buffer );\n\t\tvar uInt8Array = new Uint8Array( buffer );\n\n\t\tvar EXRHeader = {};\n\n\t\tbufferDataView.getUint32( 0, true ); // magic\n\t\tbufferDataView.getUint8( 4, true ); // versionByteZero\n\t\tbufferDataView.getUint8( 5, true ); // fullMask\n\n\t\t// start of header\n\n\t\tvar offset = { value: 8 }; // start at 8, after magic stuff\n\n\t\tvar keepReading = true;\n\n\t\twhile ( keepReading ) {\n\n\t\t\tvar attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\tif ( attributeName == 0 ) {\n\n\t\t\t\tkeepReading = false;\n\n\t\t\t} else {\n\n\t\t\t\tvar attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar attributeSize = parseUint32( bufferDataView, offset );\n\t\t\t\tvar attributeValue = parseValue( bufferDataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\tif ( attributeValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( `EXRLoader.parse: skipped unknown header attribute type \\'${ attributeType }\\'.` );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// offsets\n\t\tvar dataWindowHeight = EXRHeader.dataWindow.yMax + 1;\n\n\t\tvar uncompress;\n\t\tvar scanlineBlockSize;\n\n\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\tcase 'NO_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRAW;\n\t\t\t\tbreak;\n\n\t\t\tcase 'RLE_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIPS_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIP_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 16;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PIZ_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressPIZ;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PXR24_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 16;\n\t\t\t\tuncompress = uncompressPXR;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAA_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAB_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 256;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n\n\t\t}\n\n\t\tvar size_t;\n\t\tvar getValue;\n\n\t\t// mixed pixelType not supported\n\t\tvar pixelType = EXRHeader.channels[ 0 ].pixelType;\n\n\t\tif ( pixelType === 1 ) { // half\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase THREE.UnsignedByteType:\n\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\tgetValue = parseFloat16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\tgetValue = parseUint16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( pixelType === 2 ) { // float\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase THREE.UnsignedByteType:\n\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\tgetValue = parseFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\tgetValue = decodeFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow 'EXRLoader.parse: unsupported pixelType ' + pixelType + ' for ' + EXRHeader.compression + '.';\n\n\t\t}\n\n\t\tvar numBlocks = dataWindowHeight / scanlineBlockSize;\n\n\t\tfor ( var i = 0; i < numBlocks; i ++ ) {\n\n\t\t\tparseUlong( bufferDataView, offset ); // scanlineOffset\n\n\t\t}\n\n\t\t// we should be passed the scanline offset table, start reading pixel data\n\n\t\tvar width = EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1;\n\t\tvar height = EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1;\n\t\t// Firefox only supports RGBA (half) float textures\n\t\t// var numChannels = EXRHeader.channels.length;\n\t\tvar numChannels = 4;\n\t\tvar size = width * height * numChannels;\n\n\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\tswitch ( this.type ) {\n\n\t\t\tcase THREE.UnsignedByteType:\n\t\t\tcase THREE.FloatType:\n\n\t\t\t\tvar byteArray = new Float32Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 1, 0, size );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\tvar byteArray = new Uint16Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar channelOffsets = {\n\t\t\tR: 0,\n\t\t\tG: 1,\n\t\t\tB: 2,\n\t\t\tA: 3\n\t\t};\n\n\t\tvar compressionInfo = {\n\n\t\t\tsize: 0,\n\t\t\twidth: width,\n\t\t\tlines: scanlineBlockSize,\n\n\t\t\toffset: offset,\n\t\t\tarray: uInt8Array,\n\t\t\tviewer: bufferDataView,\n\n\t\t\ttype: pixelType,\n\t\t\tchannels: EXRHeader.channels.length,\n\n\t\t};\n\n\t\tvar line;\n\t\tvar size;\n\t\tvar viewer;\n\t\tvar tmpOffset = { value: 0 };\n\n\t\tfor ( var scanlineBlockIdx = 0; scanlineBlockIdx < height / scanlineBlockSize; scanlineBlockIdx ++ ) {\n\n\t\t\tline = parseUint32( bufferDataView, offset ); // line_no\n\t\t\tsize = parseUint32( bufferDataView, offset ); // data_len\n\n\t\t\tcompressionInfo.lines = ( line + scanlineBlockSize > height ) ? height - line : scanlineBlockSize;\n\t\t\tcompressionInfo.offset = offset;\n\t\t\tcompressionInfo.size = size;\n\n\t\t\tviewer = uncompress( compressionInfo );\n\n\t\t\toffset.value += size;\n\n\t\t\tfor ( var line_y = 0; line_y < scanlineBlockSize; line_y ++ ) {\n\n\t\t\t\tvar true_y = line_y + ( scanlineBlockIdx * scanlineBlockSize );\n\n\t\t\t\tif ( true_y >= height ) break;\n\n\t\t\t\tfor ( var channelID = 0; channelID < EXRHeader.channels.length; channelID ++ ) {\n\n\t\t\t\t\tvar cOff = channelOffsets[ EXRHeader.channels[ channelID ].name ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\t\tvar idx = ( line_y * ( EXRHeader.channels.length * width ) ) + ( channelID * width ) + x;\n\t\t\t\t\t\ttmpOffset.value = idx * size_t;\n\n\t\t\t\t\t\tvar val = getValue( viewer, tmpOffset );\n\n\t\t\t\t\t\tbyteArray[ ( ( ( height - 1 - true_y ) * ( width * numChannels ) ) + ( x * numChannels ) ) + cOff ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.type === THREE.UnsignedByteType ) {\n\n\t\t\tlet v, i;\n\t\t\tconst size = byteArray.length;\n\t\t\tconst RGBEArray = new Uint8Array( size );\n\n\t\t\tfor ( let h = 0; h < height; ++ h ) {\n\n\t\t\t\tfor ( let w = 0; w < width; ++ w ) {\n\n\t\t\t\t\ti = h * width * 4 + w * 4;\n\n\t\t\t\t\tconst red = byteArray[ i ];\n\t\t\t\t\tconst green = byteArray[ i + 1 ];\n\t\t\t\t\tconst blue = byteArray[ i + 2 ];\n\n\t\t\t\t\tv = ( red > green ) ? red : green;\n\t\t\t\t\tv = ( blue > v ) ? blue : v;\n\n\t\t\t\t\tif ( v < 1e-32 ) {\n\n\t\t\t\t\t\tRGBEArray[ i ] = RGBEArray[ i + 1 ] = RGBEArray[ i + 2 ] = RGBEArray[ i + 3 ] = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst res = frexp( v );\n\t\t\t\t\t\tv = res[ 0 ] * 256 / v;\n\n\t\t\t\t\t\tRGBEArray[ i ] = red * v;\n\t\t\t\t\t\tRGBEArray[ i + 1 ] = green * v;\n\t\t\t\t\t\tRGBEArray[ i + 2 ] = blue * v;\n\t\t\t\t\t\tRGBEArray[ i + 3 ] = res[ 1 ] + 128;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbyteArray = RGBEArray;\n\n\t\t}\n\n\t\tconst format = ( this.type === THREE.UnsignedByteType ) ? THREE.RGBEFormat : ( numChannels === 4 ) ? THREE.RGBAFormat : THREE.RGBFormat;\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: byteArray,\n\t\t\tformat: format,\n\t\t\ttype: this.type\n\t\t};\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = THREE.RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.FloatType:\n\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = false;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn THREE.DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n"]}