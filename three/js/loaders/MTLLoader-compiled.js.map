{"version":3,"sources":["MTLLoader.js"],"names":[],"mappings":"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","file":"MTLLoader-compiled.js","sourcesContent":["console.warn( \"THREE.MTLLoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Loads a Wavefront .mtl file specifying materials\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n\tTHREE.Loader.call( this, manager );\n\n};\n\nTHREE.MTLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\tconstructor: THREE.MTLLoader,\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( this.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setResourcePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setResourcePath() explicitly prior to parse.\n\t */\n\tparse: function ( text, path ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n} );\n\n/**\n * Create a new THREE.MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( \"alphaMap\", value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\t\tvar loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n"]}