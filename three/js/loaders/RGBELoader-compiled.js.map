{"version":3,"sources":["RGBELoader.js"],"names":[],"mappings":"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","file":"RGBELoader-compiled.js","sourcesContent":["console.warn( \"THREE.RGBELoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nTHREE.RGBELoader = function ( manager ) {\n\n\tTHREE.DataTextureLoader.call( this, manager );\n\n\tthis.type = THREE.UnsignedByteType;\n\n};\n\nTHREE.RGBELoader.prototype = Object.assign( Object.create( THREE.DataTextureLoader.prototype ), {\n\n\tconstructor: THREE.RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"THREE.RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"THREE.RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"THREE.RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"THREE.RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = THREE.RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = THREE.UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = THREE.RGBFormat;\n\t\t\t\t\t\tvar type = THREE.FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = THREE.RGBFormat;\n\t\t\t\t\t\tvar type = THREE.HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = THREE.RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn THREE.DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n"]}