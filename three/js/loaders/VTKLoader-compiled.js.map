{"version":3,"sources":["VTKLoader.js"],"names":[],"mappings":"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","file":"VTKLoader-compiled.js","sourcesContent":["console.warn( \"THREE.VTKLoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.VTKLoader = function ( manager ) {\n\n\tTHREE.Loader.call( this, manager );\n\n};\n\nTHREE.VTKLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\tconstructor: THREE.VTKLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( data ) {\n\n\t\tfunction parseASCII( data ) {\n\n\t\t\t// connectivity of the triangles\n\t\t\tvar indices = [];\n\n\t\t\t// triangles vertices\n\t\t\tvar positions = [];\n\n\t\t\t// red, green, blue colors in the range 0 to 1\n\t\t\tvar colors = [];\n\n\t\t\t// normal vector, one per vertex\n\t\t\tvar normals = [];\n\n\t\t\tvar result;\n\n\t\t\t// pattern for detecting the end of a number sequence\n\t\t\tvar patWord = /^[^\\d.\\s-]+/;\n\n\t\t\t// pattern for reading vertices, 3 floats or integers\n\t\t\tvar pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n\n\t\t\t// pattern for connectivity, an integer followed by any number of ints\n\t\t\t// the first integer is the number of polygon nodes\n\t\t\tvar patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n\n\t\t\t// indicates start of vertex data section\n\t\t\tvar patPOINTS = /^POINTS /;\n\n\t\t\t// indicates start of polygon connectivity section\n\t\t\tvar patPOLYGONS = /^POLYGONS /;\n\n\t\t\t// indicates start of triangle strips section\n\t\t\tvar patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n\n\t\t\t// POINT_DATA number_of_values\n\t\t\tvar patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n\n\t\t\t// CELL_DATA number_of_polys\n\t\t\tvar patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n\n\t\t\t// Start of color section\n\t\t\tvar patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n\n\t\t\t// NORMALS Normals float\n\t\t\tvar patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n\n\t\t\tvar inPointsSection = false;\n\t\t\tvar inPolygonsSection = false;\n\t\t\tvar inTriangleStripSection = false;\n\t\t\tvar inPointDataSection = false;\n\t\t\tvar inCellDataSection = false;\n\t\t\tvar inColorSection = false;\n\t\t\tvar inNormalsSection = false;\n\n\t\t\tvar lines = data.split( '\\n' );\n\n\t\t\tfor ( var i in lines ) {\n\n\t\t\t\tvar line = lines[ i ].trim();\n\n\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\n\n\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\n\n\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\n\n\t\t\t\t} else if ( inPointsSection ) {\n\n\t\t\t\t\t// get the vertices\n\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\tvar x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\tvar y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\tvar z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\tpositions.push( x, y, z );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( inPolygonsSection ) {\n\n\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t// numVertices i0 i1 i2 ...\n\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\n\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\n\n\t\t\t\t\t\tif ( numVertices >= 3 ) {\n\n\t\t\t\t\t\t\tvar i0 = parseInt( inds[ 0 ] );\n\t\t\t\t\t\t\tvar i1, i2;\n\t\t\t\t\t\t\tvar k = 1;\n\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\n\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; ++ j ) {\n\n\t\t\t\t\t\t\t\ti1 = parseInt( inds[ k ] );\n\t\t\t\t\t\t\t\ti2 = parseInt( inds[ k + 1 ] );\n\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\t\t\t\t\t\t\t\tk ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( inTriangleStripSection ) {\n\n\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t// numVertices i0 i1 i2 ...\n\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\n\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\n\n\t\t\t\t\t\tif ( numVertices >= 3 ) {\n\n\t\t\t\t\t\t\tvar i0, i1, i2;\n\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\n\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; j ++ ) {\n\n\t\t\t\t\t\t\t\tif ( j % 2 === 1 ) {\n\n\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\n\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 2 ] );\n\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 1 ] );\n\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\n\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 1 ] );\n\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 2 ] );\n\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( inPointDataSection || inCellDataSection ) {\n\n\t\t\t\t\tif ( inColorSection ) {\n\n\t\t\t\t\t\t// Get the colors\n\n\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\t\tvar r = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\tvar g = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\tvar b = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\tcolors.push( r, g, b );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( inNormalsSection ) {\n\n\t\t\t\t\t\t// Get the normal vectors\n\n\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\t\tvar nx = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\tvar ny = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\tvar nz = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\tnormals.push( nx, ny, nz );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( patPOLYGONS.exec( line ) !== null ) {\n\n\t\t\t\t\tinPolygonsSection = true;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t} else if ( patPOINTS.exec( line ) !== null ) {\n\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinPointsSection = true;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t} else if ( patTRIANGLE_STRIPS.exec( line ) !== null ) {\n\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinTriangleStripSection = true;\n\n\t\t\t\t} else if ( patPOINT_DATA.exec( line ) !== null ) {\n\n\t\t\t\t\tinPointDataSection = true;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t} else if ( patCELL_DATA.exec( line ) !== null ) {\n\n\t\t\t\t\tinCellDataSection = true;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t} else if ( patCOLOR_SCALARS.exec( line ) !== null ) {\n\n\t\t\t\t\tinColorSection = true;\n\t\t\t\t\tinNormalsSection = false;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t} else if ( patNORMALS.exec( line ) !== null ) {\n\n\t\t\t\t\tinNormalsSection = true;\n\t\t\t\t\tinColorSection = false;\n\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.setIndex( indices );\n\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\n\t\t\tif ( normals.length === positions.length ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( colors.length !== indices.length ) {\n\n\t\t\t\t// stagger\n\n\t\t\t\tif ( colors.length === positions.length ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// cell\n\n\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\tvar numTriangles = geometry.attributes.position.count / 3;\n\n\t\t\t\tif ( colors.length === ( numTriangles * 3 ) ) {\n\n\t\t\t\t\tvar newColors = [];\n\n\t\t\t\t\tfor ( var i = 0; i < numTriangles; i ++ ) {\n\n\t\t\t\t\t\tvar r = colors[ 3 * i + 0 ];\n\t\t\t\t\t\tvar g = colors[ 3 * i + 1 ];\n\t\t\t\t\t\tvar b = colors[ 3 * i + 2 ];\n\n\t\t\t\t\t\tnewColors.push( r, g, b );\n\t\t\t\t\t\tnewColors.push( r, g, b );\n\t\t\t\t\t\tnewColors.push( r, g, b );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( newColors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction parseBinary( data ) {\n\n\t\t\tvar count, pointIndex, i, numberOfPoints, s;\n\t\t\tvar buffer = new Uint8Array( data );\n\t\t\tvar dataView = new DataView( data );\n\n\t\t\t// Points and normals, by default, are empty\n\t\t\tvar points = [];\n\t\t\tvar normals = [];\n\t\t\tvar indices = [];\n\n\t\t\t// Going to make a big array of strings\n\t\t\tvar vtk = [];\n\t\t\tvar index = 0;\n\n\t\t\tfunction findString( buffer, start ) {\n\n\t\t\t\tvar index = start;\n\t\t\t\tvar c = buffer[ index ];\n\t\t\t\tvar s = [];\n\t\t\t\twhile ( c !== 10 ) {\n\n\t\t\t\t\ts.push( String.fromCharCode( c ) );\n\t\t\t\t\tindex ++;\n\t\t\t\t\tc = buffer[ index ];\n\n\t\t\t\t}\n\n\t\t\t\treturn { start: start,\n\t\t\t\t\tend: index,\n\t\t\t\t\tnext: index + 1,\n\t\t\t\t\tparsedString: s.join( '' ) };\n\n\t\t\t}\n\n\t\t\tvar state, line;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\t// Get a string\n\t\t\t\tstate = findString( buffer, index );\n\t\t\t\tline = state.parsedString;\n\n\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\n\n\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\n\n\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\n\n\t\t\t\t} else if ( line.indexOf( 'POINTS' ) === 0 ) {\n\n\t\t\t\t\tvtk.push( line );\n\t\t\t\t\t// Add the points\n\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\n\n\t\t\t\t\t// Each point is 3 4-byte floats\n\t\t\t\t\tcount = numberOfPoints * 4 * 3;\n\n\t\t\t\t\tpoints = new Float32Array( numberOfPoints * 3 );\n\n\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\n\n\t\t\t\t\t\tpoints[ 3 * i ] = dataView.getFloat32( pointIndex, false );\n\t\t\t\t\t\tpoints[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\n\t\t\t\t\t\tpoints[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\n\t\t\t\t\t\tpointIndex = pointIndex + 12;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// increment our next pointer\n\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t} else if ( line.indexOf( 'TRIANGLE_STRIPS' ) === 0 ) {\n\n\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\n\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\n\t\t\t\t\t// 4 byte integers\n\t\t\t\t\tcount = size * 4;\n\n\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\n\n\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\n\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\n\t\t\t\t\t\tvar strip = [];\n\t\t\t\t\t\tpointIndex += 4;\n\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\n\n\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\n\t\t\t\t\t\t\tpointIndex += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// retrieves the n-2 triangles from the triangle strip\n\t\t\t\t\t\tfor ( var j = 0; j < indexCount - 2; j ++ ) {\n\n\t\t\t\t\t\t\tif ( j % 2 ) {\n\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t\t} else {\n\n\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// increment our next pointer\n\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t} else if ( line.indexOf( 'POLYGONS' ) === 0 ) {\n\n\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\n\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\n\t\t\t\t\t// 4 byte integers\n\t\t\t\t\tcount = size * 4;\n\n\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\n\n\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\n\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\n\t\t\t\t\t\tvar strip = [];\n\t\t\t\t\t\tpointIndex += 4;\n\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\n\n\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\n\t\t\t\t\t\t\tpointIndex += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// divide the polygon in n-2 triangle\n\t\t\t\t\t\tfor ( var j = 1; j < indexCount - 1; j ++ ) {\n\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ 0 ];\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// increment our next pointer\n\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t} else if ( line.indexOf( 'POINT_DATA' ) === 0 ) {\n\n\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\n\n\t\t\t\t\t// Grab the next line\n\t\t\t\t\tstate = findString( buffer, state.next );\n\n\t\t\t\t\t// Now grab the binary data\n\t\t\t\t\tcount = numberOfPoints * 4 * 3;\n\n\t\t\t\t\tnormals = new Float32Array( numberOfPoints * 3 );\n\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\n\n\t\t\t\t\t\tnormals[ 3 * i ] = dataView.getFloat32( pointIndex, false );\n\t\t\t\t\t\tnormals[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\n\t\t\t\t\t\tnormals[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\n\t\t\t\t\t\tpointIndex += 12;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Increment past our data\n\t\t\t\t\tstate.next = state.next + count;\n\n\t\t\t\t}\n\n\t\t\t\t// Increment index\n\t\t\t\tindex = state.next;\n\n\t\t\t\tif ( index >= buffer.byteLength ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( points, 3 ) );\n\n\t\t\tif ( normals.length === points.length ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction Float32Concat( first, second ) {\n\n\t\t    var firstLength = first.length, result = new Float32Array( firstLength + second.length );\n\n\t\t    result.set( first );\n\t\t    result.set( second, firstLength );\n\n\t\t    return result;\n\n\t\t}\n\n\t\tfunction Int32Concat( first, second ) {\n\n\t\t    var firstLength = first.length, result = new Int32Array( firstLength + second.length );\n\n\t\t    result.set( first );\n\t\t    result.set( second, firstLength );\n\n\t\t    return result;\n\n\t\t}\n\n\t\tfunction parseXML( stringFile ) {\n\n\t\t\t// Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n\n\t\t\tfunction xmlToJson( xml ) {\n\n\t\t\t\t// Create the return object\n\t\t\t\tvar obj = {};\n\n\t\t\t\tif ( xml.nodeType === 1 ) { // element\n\n\t\t\t\t\t// do attributes\n\n\t\t\t\t\tif ( xml.attributes ) {\n\n\t\t\t\t\t\tif ( xml.attributes.length > 0 ) {\n\n\t\t\t\t\t\t\tobj[ 'attributes' ] = {};\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < xml.attributes.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar attribute = xml.attributes.item( j );\n\t\t\t\t\t\t\t\tobj[ 'attributes' ][ attribute.nodeName ] = attribute.nodeValue.trim();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( xml.nodeType === 3 ) { // text\n\n\t\t\t\t\tobj = xml.nodeValue.trim();\n\n\t\t\t\t}\n\n\t\t\t\t// do children\n\t\t\t\tif ( xml.hasChildNodes() ) {\n\n\t\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\t\tvar item = xml.childNodes.item( i );\n\t\t\t\t\t\tvar nodeName = item.nodeName;\n\n\t\t\t\t\t\tif ( typeof obj[ nodeName ] === 'undefined' ) {\n\n\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\n\n\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ] = tmp;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( typeof obj[ nodeName ].push === 'undefined' ) {\n\n\t\t\t\t\t\t\t\tvar old = obj[ nodeName ];\n\t\t\t\t\t\t\t\tobj[ nodeName ] = [ old ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\n\n\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ].push( tmp );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\n\t\t\t}\n\n\t\t\t// Taken from Base64-js\n\t\t\tfunction Base64toByteArray( b64 ) {\n\n\t\t\t\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\t\t\t\tvar i;\n\t\t\t\tvar lookup = [];\n\t\t\t\tvar revLookup = [];\n\t\t\t\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\t\tvar len = code.length;\n\n\t\t\t\tfor ( i = 0; i < len; i ++ ) {\n\n\t\t\t\t\tlookup[ i ] = code[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < len; ++ i ) {\n\n\t\t\t\t\trevLookup[ code.charCodeAt( i ) ] = i;\n\n\t\t\t\t}\n\n\t\t\t\trevLookup[ '-'.charCodeAt( 0 ) ] = 62;\n\t\t\t\trevLookup[ '_'.charCodeAt( 0 ) ] = 63;\n\n\t\t\t\tvar j, l, tmp, placeHolders, arr;\n\t\t\t\tvar len = b64.length;\n\n\t\t\t\tif ( len % 4 > 0 ) {\n\n\t\t\t\t\tthrow new Error( 'Invalid string. Length must be a multiple of 4' );\n\n\t\t\t\t}\n\n\t\t\t\tplaceHolders = b64[ len - 2 ] === '=' ? 2 : b64[ len - 1 ] === '=' ? 1 : 0;\n\t\t\t\tarr = new Arr( len * 3 / 4 - placeHolders );\n\t\t\t\tl = placeHolders > 0 ? len - 4 : len;\n\n\t\t\t\tvar L = 0;\n\n\t\t\t\tfor ( i = 0, j = 0; i < l; i += 4, j += 3 ) {\n\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 18 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 12 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] << 6 ) | revLookup[ b64.charCodeAt( i + 3 ) ];\n\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF0000 ) >> 16;\n\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF00 ) >> 8;\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t}\n\n\t\t\t\tif ( placeHolders === 2 ) {\n\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 2 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] >> 4 );\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t} else if ( placeHolders === 1 ) {\n\n\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 10 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 4 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] >> 2 );\n\t\t\t\t\tarr[ L ++ ] = ( tmp >> 8 ) & 0xFF;\n\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t}\n\n\t\t\t\treturn arr;\n\n\t\t\t}\n\n\t\t\tfunction parseDataArray( ele, compressed ) {\n\n\t\t\t\tvar numBytes = 0;\n\n\t\t\t\tif ( json.attributes.header_type === 'UInt64' ) {\n\n\t\t\t\t\tnumBytes = 8;\n\n\t\t\t\t}\telse if ( json.attributes.header_type === 'UInt32' ) {\n\n\t\t\t\t\tnumBytes = 4;\n\n\t\t\t\t}\n\n\n\t\t\t\t// Check the format\n\t\t\t\tif ( ele.attributes.format === 'binary' && compressed ) {\n\n\t\t\t\t\tvar rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\tvar txt = new Float32Array( );\n\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\tvar txt = new Int32Array( );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// VTP data with the header has the following structure:\n\t\t\t\t\t// [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n\t\t\t\t\t//\n\t\t\t\t\t// Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n\t\t\t\t\t// [#blocks] = Number of blocks\n\t\t\t\t\t// [#u-size] = Block size before compression\n\t\t\t\t\t// [#p-size] = Size of last partial block (zero if it not needed)\n\t\t\t\t\t// [#c-size-i] = Size in bytes of block i after compression\n\t\t\t\t\t//\n\t\t\t\t\t// The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n\t\t\t\t\t// computed by summing the compressed block sizes from preceding blocks according to the header.\n\n\t\t\t\t\trawData = ele[ '#text' ];\n\n\t\t\t\t\tbyteData = Base64toByteArray( rawData );\n\n\t\t\t\t\tblocks = byteData[ 0 ];\n\t\t\t\t\tfor ( var i = 1; i < numBytes - 1; i ++ ) {\n\n\t\t\t\t\t\tblocks = blocks | ( byteData[ i ] << ( i * numBytes ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\theaderSize = ( blocks + 3 ) * numBytes;\n\t\t\t\t\tpadding = ( ( headerSize % 3 ) > 0 ) ? 3 - ( headerSize % 3 ) : 0;\n\t\t\t\t\theaderSize = headerSize + padding;\n\n\t\t\t\t\tdataOffsets = [];\n\t\t\t\t\tcurrentOffset = headerSize;\n\t\t\t\t\tdataOffsets.push( currentOffset );\n\n\t\t\t\t\t// Get the blocks sizes after the compression.\n\t\t\t\t\t// There are three blocks before c-size-i, so we skip 3*numBytes\n\t\t\t\t\tcSizeStart = 3 * numBytes;\n\n\t\t\t\t\tfor ( var i = 0; i < blocks; i ++ ) {\n\n\t\t\t\t\t\tvar currentBlockSize = byteData[ i * numBytes + cSizeStart ];\n\n\t\t\t\t\t\tfor ( var j = 1; j < numBytes - 1; j ++ ) {\n\n\t\t\t\t\t\t\t// Each data point consists of 8 bytes regardless of the header type\n\t\t\t\t\t\t\tcurrentBlockSize = currentBlockSize | ( byteData[ i * numBytes + cSizeStart + j ] << ( j * 8 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentOffset = currentOffset + currentBlockSize;\n\t\t\t\t\t\tdataOffsets.push( currentOffset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < dataOffsets.length - 1; i ++ ) {\n\n\t\t\t\t\t\tvar inflate = new Inflate( byteData.slice( dataOffsets[ i ], dataOffsets[ i + 1 ] ), { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\t\t\tcontent = inflate.decompress();\n\t\t\t\t\t\tcontent = content.buffer;\n\n\t\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\t\tcontent = new Float32Array( content );\n\t\t\t\t\t\t\ttxt = Float32Concat( txt, content );\n\n\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\t\tcontent = new Int32Array( content );\n\t\t\t\t\t\t\ttxt = Int32Concat( txt, content );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete ele[ '#text' ];\n\n\t\t\t\t\tif ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\n\n\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\n\n\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ele.attributes.format === 'binary' && ! compressed ) {\n\n\t\t\t\t\t\tvar content = Base64toByteArray( ele[ '#text' ] );\n\n\t\t\t\t\t\t//  VTP data for the uncompressed case has the following structure:\n\t\t\t\t\t\t// [#bytes][DATA]\n\t\t\t\t\t\t// where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n\t\t\t\t\t\tcontent = content.slice( numBytes ).buffer;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ele[ '#text' ] ) {\n\n\t\t\t\t\t\t\tvar content = ele[ '#text' ].split( /\\s+/ ).filter( function ( el ) {\n\n\t\t\t\t\t\t\t\tif ( el !== '' ) return el;\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar content = new Int32Array( 0 ).buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete ele[ '#text' ];\n\n\t\t\t\t\t// Get the content and optimize it\n\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\tvar txt = new Float32Array( content );\n\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int32' ) {\n\n\t\t\t\t\t\tvar txt = new Int32Array( content );\n\n\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\tvar txt = new Int32Array( content );\n\n\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\n\n\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\n\n\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // endif ( ele.attributes.format === 'binary' && compressed )\n\n\t\t\t\treturn txt;\n\n\t\t\t}\n\n\t\t\t// Main part\n\t\t\t// Get Dom\n\t\t\tvar dom = null;\n\n\t\t\tif ( window.DOMParser ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tdom = ( new DOMParser() ).parseFromString( stringFile, 'text/xml' );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tdom = null;\n\n\t\t\t\t}\n\n\t\t\t} else if ( window.ActiveXObject ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tdom = new ActiveXObject( 'Microsoft.XMLDOM' ); // eslint-disable-line no-undef\n\t\t\t\t\tdom.async = false;\n\n\t\t\t\t\tif ( ! dom.loadXML( /* xml */ ) ) {\n\n\t\t\t\t\t\tthrow new Error( dom.parseError.reason + dom.parseError.srcText );\n\n\t\t\t\t\t}\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tdom = null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Cannot parse xml string!' );\n\n\t\t\t}\n\n\t\t\t// Get the doc\n\t\t\tvar doc = dom.documentElement;\n\t\t\t// Convert to json\n\t\t\tvar json = xmlToJson( doc );\n\t\t\tvar points = [];\n\t\t\tvar normals = [];\n\t\t\tvar indices = [];\n\n\t\t\tif ( json.PolyData ) {\n\n\t\t\t\tvar piece = json.PolyData.Piece;\n\t\t\t\tvar compressed = json.attributes.hasOwnProperty( 'compressor' );\n\n\t\t\t\t// Can be optimized\n\t\t\t\t// Loop through the sections\n\t\t\t\tvar sections = [ 'PointData', 'Points', 'Strips', 'Polys' ];// +['CellData', 'Verts', 'Lines'];\n\t\t\t\tvar sectionIndex = 0, numberOfSections = sections.length;\n\n\t\t\t\twhile ( sectionIndex < numberOfSections ) {\n\n\t\t\t\t\tvar section = piece[ sections[ sectionIndex ] ];\n\n\t\t\t\t\t// If it has a DataArray in it\n\n\t\t\t\t\tif ( section && section.DataArray ) {\n\n\t\t\t\t\t\t// Depending on the number of DataArrays\n\n\t\t\t\t\t\tif ( Object.prototype.toString.call( section.DataArray ) === '[object Array]' ) {\n\n\t\t\t\t\t\t\tvar arr = section.DataArray;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar arr = [ section.DataArray ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar dataArrayIndex = 0, numberOfDataArrays = arr.length;\n\n\t\t\t\t\t\twhile ( dataArrayIndex < numberOfDataArrays ) {\n\n\t\t\t\t\t\t\t// Parse the DataArray\n\t\t\t\t\t\t\tif ( ( '#text' in arr[ dataArrayIndex ] ) && ( arr[ dataArrayIndex ][ '#text' ].length > 0 ) ) {\n\n\t\t\t\t\t\t\t\tarr[ dataArrayIndex ].text = parseDataArray( arr[ dataArrayIndex ], compressed );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdataArrayIndex ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch ( sections[ sectionIndex ] ) {\n\n\t\t\t\t\t\t\t// if iti is point data\n\t\t\t\t\t\t\tcase 'PointData':\n\n\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\n\t\t\t\t\t\t\t\tvar normalsName = section.attributes.Normals;\n\n\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\n\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = arr.length; i < len; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( normalsName === arr[ i ].attributes.Name ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar components = arr[ i ].attributes.NumberOfComponents;\n\t\t\t\t\t\t\t\t\t\t\tnormals = new Float32Array( numberOfPoints * components );\n\t\t\t\t\t\t\t\t\t\t\tnormals.set( arr[ i ].text, 0 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// if it is points\n\t\t\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\n\n\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\n\n\t\t\t\t\t\t\t\t\tvar components = section.DataArray.attributes.NumberOfComponents;\n\t\t\t\t\t\t\t\t\tpoints = new Float32Array( numberOfPoints * components );\n\t\t\t\t\t\t\t\t\tpoints.set( section.DataArray.text, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// if it is strips\n\t\t\t\t\t\t\tcase 'Strips':\n\n\t\t\t\t\t\t\t\tvar numberOfStrips = parseInt( piece.attributes.NumberOfStrips );\n\n\t\t\t\t\t\t\t\tif ( numberOfStrips > 0 ) {\n\n\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\n\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\n\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\n\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\n\n\t\t\t\t\t\t\t\t\tvar size = numberOfStrips + connectivity.length;\n\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\n\t\t\t\t\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = numberOfStrips; i < len; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar strip = [];\n\n\t\t\t\t\t\t\t\t\t\tfor ( var s = 0, len1 = offset[ i ], len0 = 0; s < len1 - len0; s ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tstrip.push( connectivity[ s ] );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tfor ( var j = 0, len1 = offset[ i ], len0 = 0; j < len1 - len0 - 2; j ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( j % 2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t// if it is polys\n\t\t\t\t\t\t\tcase 'Polys':\n\n\t\t\t\t\t\t\t\tvar numberOfPolys = parseInt( piece.attributes.NumberOfPolys );\n\n\t\t\t\t\t\t\t\tif ( numberOfPolys > 0 ) {\n\n\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\n\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\n\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\n\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\n\n\t\t\t\t\t\t\t\t\tvar size = numberOfPolys + connectivity.length;\n\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfPolys );\n\t\t\t\t\t\t\t\t\tvar indicesIndex = 0, connectivityIndex = 0;\n\t\t\t\t\t\t\t\t\tvar i = 0, len = numberOfPolys, len0 = 0;\n\n\t\t\t\t\t\t\t\t\twhile ( i < len ) {\n\n\t\t\t\t\t\t\t\t\t\tvar poly = [];\n\t\t\t\t\t\t\t\t\t\tvar s = 0, len1 = offset[ i ];\n\n\t\t\t\t\t\t\t\t\t\twhile ( s < len1 - len0 ) {\n\n\t\t\t\t\t\t\t\t\t\t\tpoly.push( connectivity[ connectivityIndex ++ ] );\n\t\t\t\t\t\t\t\t\t\t\ts ++;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tvar j = 1;\n\n\t\t\t\t\t\t\t\t\t\twhile ( j < len1 - len0 - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ 0 ];\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j ];\n\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j + 1 ];\n\t\t\t\t\t\t\t\t\t\t\tj ++;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\ti ++;\n\t\t\t\t\t\t\t\t\t\tlen0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsectionIndex ++;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( points, 3 ) );\n\n\t\t\t\tif ( normals.length === points.length ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unsupported DATASET type' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get the 5 first lines of the files to check if there is the key word binary\n\t\tvar meta = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 250 ) ).split( '\\n' );\n\n\t\tif ( meta[ 0 ].indexOf( 'xml' ) !== - 1 ) {\n\n\t\t\treturn parseXML( THREE.LoaderUtils.decodeText( data ) );\n\n\t\t} else if ( meta[ 2 ].includes( 'ASCII' ) ) {\n\n\t\t\treturn parseASCII( THREE.LoaderUtils.decodeText( data ) );\n\n\t\t} else {\n\n\t\t\treturn parseBinary( data );\n\n\t\t}\n\n\t}\n\n} );\n"]}