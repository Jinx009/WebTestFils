{"version":3,"sources":["TGALoader.js"],"names":[],"mappings":"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","file":"TGALoader-compiled.js","sourcesContent":["console.warn( \"THREE.TGALoader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.TGALoader = function ( manager ) {\n\n\tTHREE.Loader.call( this, manager );\n\n};\n\nTHREE.TGALoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\tconstructor: THREE.TGALoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttexture.image = scope.parse( buffer );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tparse: function ( buffer ) {\n\n\t\t// reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n\n\t\tfunction tgaCheckHeader( header ) {\n\n\t\t\tswitch ( header.image_type ) {\n\n\t\t\t\t// check indexed type\n\n\t\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\t\tif ( header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for indexed type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// check colormap type\n\n\t\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\t\tif ( header.colormap_type ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for colormap type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// What the need of a file without data ?\n\n\t\t\t\tcase TGA_TYPE_NO_DATA:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t\t\t\t// Invalid type ?\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type \"%s\".', header.image_type );\n\n\t\t\t}\n\n\t\t\t// check image width and height\n\n\t\t\tif ( header.width <= 0 || header.height <= 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid image size.' );\n\n\t\t\t}\n\n\t\t\t// check image pixel size\n\n\t\t\tif ( header.pixel_size !== 8 && header.pixel_size !== 16 &&\n\t\t\t\theader.pixel_size !== 24 && header.pixel_size !== 32 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// parse tga image buffer\n\n\t\tfunction tgaParse( use_rle, use_pal, header, offset, data ) {\n\n\t\t\tvar pixel_data,\n\t\t\t\tpixel_size,\n\t\t\t\tpixel_total,\n\t\t\t\tpalettes;\n\n\t\t\tpixel_size = header.pixel_size >> 3;\n\t\t\tpixel_total = header.width * header.height * pixel_size;\n\n\t\t\t // read palettes\n\n\t\t\t if ( use_pal ) {\n\n\t\t\t\t palettes = data.subarray( offset, offset += header.colormap_length * ( header.colormap_size >> 3 ) );\n\n\t\t\t }\n\n\t\t\t // read RLE\n\n\t\t\t if ( use_rle ) {\n\n\t\t\t\t pixel_data = new Uint8Array( pixel_total );\n\n\t\t\t\tvar c, count, i;\n\t\t\t\tvar shift = 0;\n\t\t\t\tvar pixels = new Uint8Array( pixel_size );\n\n\t\t\t\twhile ( shift < pixel_total ) {\n\n\t\t\t\t\tc = data[ offset ++ ];\n\t\t\t\t\tcount = ( c & 0x7f ) + 1;\n\n\t\t\t\t\t// RLE pixels\n\n\t\t\t\t\tif ( c & 0x80 ) {\n\n\t\t\t\t\t\t// bind pixel tmp array\n\n\t\t\t\t\t\tfor ( i = 0; i < pixel_size; ++ i ) {\n\n\t\t\t\t\t\t\tpixels[ i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// copy pixel array\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data.set( pixels, shift + i * pixel_size );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += pixel_size * count;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// raw pixels\n\n\t\t\t\t\t\tcount *= pixel_size;\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data[ shift + i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += count;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t } else {\n\n\t\t\t\t// raw pixels\n\n\t\t\t\tpixel_data = data.subarray(\n\t\t\t\t\t offset, offset += ( use_pal ? header.width * header.height : pixel_total )\n\t\t\t\t);\n\n\t\t\t }\n\n\t\t\t return {\n\t\t\t\tpixel_data: pixel_data,\n\t\t\t\tpalettes: palettes\n\t\t\t };\n\n\t\t}\n\n\t\tfunction tgaGetImageData8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes ) {\n\n\t\t\tvar colormap = palettes;\n\t\t\tvar color, i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = colormap[ ( color * 3 ) + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = colormap[ ( color * 3 ) + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = colormap[ ( color * 3 ) + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tvar color, i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\tcolor = image[ i + 0 ] + ( image[ i + 1 ] << 8 ); // Inversed ?\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = ( color & 0x7C00 ) >> 7;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = ( color & 0x03E0 ) >> 2;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = ( color & 0x001F ) >> 3;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = ( color & 0x8000 ) ? 0 : 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData24bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tvar i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 3 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData32bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tvar i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 4 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 3 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tvar color, i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tvar i = 0, x, y;\n\t\t\tvar width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction getTgaRGBA( data, width, height, image, palette ) {\n\n\t\t\tvar x_start,\n\t\t\t\ty_start,\n\t\t\t\tx_step,\n\t\t\t\ty_step,\n\t\t\t\tx_end,\n\t\t\t\ty_end;\n\n\t\t\tswitch ( ( header.flags & TGA_ORIGIN_MASK ) >> TGA_ORIGIN_SHIFT ) {\n\n\t\t\t\tdefault:\n\t\t\t\tcase TGA_ORIGIN_UL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_UR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( use_grey ) {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageDataGrey8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageDataGrey16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageData8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageData16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\ttgaGetImageData24bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 32:\n\t\t\t\t\t\ttgaGetImageData32bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Load image data according to specific method\n\t\t\t// var func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n\t\t\t// func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// TGA constants\n\n\t\tvar TGA_TYPE_NO_DATA = 0,\n\t\t\tTGA_TYPE_INDEXED = 1,\n\t\t\tTGA_TYPE_RGB = 2,\n\t\t\tTGA_TYPE_GREY = 3,\n\t\t\tTGA_TYPE_RLE_INDEXED = 9,\n\t\t\tTGA_TYPE_RLE_RGB = 10,\n\t\t\tTGA_TYPE_RLE_GREY = 11,\n\n\t\t\tTGA_ORIGIN_MASK = 0x30,\n\t\t\tTGA_ORIGIN_SHIFT = 0x04,\n\t\t\tTGA_ORIGIN_BL = 0x00,\n\t\t\tTGA_ORIGIN_BR = 0x01,\n\t\t\tTGA_ORIGIN_UL = 0x02,\n\t\t\tTGA_ORIGIN_UR = 0x03;\n\n\t\tif ( buffer.length < 19 ) console.error( 'THREE.TGALoader: Not enough data to contain header.' );\n\n\t\tvar content = new Uint8Array( buffer ),\n\t\t\toffset = 0,\n\t\t\theader = {\n\t\t\t\tid_length: content[ offset ++ ],\n\t\t\t\tcolormap_type: content[ offset ++ ],\n\t\t\t\timage_type: content[ offset ++ ],\n\t\t\t\tcolormap_index: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_length: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_size: content[ offset ++ ],\n\t\t\t\torigin: [\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8\n\t\t\t\t],\n\t\t\t\twidth: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\theight: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tpixel_size: content[ offset ++ ],\n\t\t\t\tflags: content[ offset ++ ]\n\t\t\t};\n\n\t\t// check tga if it is valid format\n\n\t\ttgaCheckHeader( header );\n\n\t\tif ( header.id_length + offset > buffer.length ) {\n\n\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t}\n\n\t\t// skip the needn't data\n\n\t\toffset += header.id_length;\n\n\t\t// get targa information about RLE compression and palette\n\n\t\tvar use_rle = false,\n\t\t\tuse_pal = false,\n\t\t\tuse_grey = false;\n\n\t\tswitch ( header.image_type ) {\n\n\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tuse_rle = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t//\n\n\t\tvar useOffscreen = typeof OffscreenCanvas !== 'undefined';\n\n\t\tvar canvas = useOffscreen ? new OffscreenCanvas( header.width, header.height ) : document.createElement( 'canvas' );\n\t\tcanvas.width = header.width;\n\t\tcanvas.height = header.height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tvar imageData = context.createImageData( header.width, header.height );\n\n\t\tvar result = tgaParse( use_rle, use_pal, header, offset, content );\n\t\tgetTgaRGBA( imageData.data, header.width, header.height, result.pixel_data, result.palettes );\n\n\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t}\n\n} );\n"]}