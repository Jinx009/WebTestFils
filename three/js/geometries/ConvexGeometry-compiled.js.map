{"version":3,"sources":["ConvexGeometry.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,+SAAd;;AAEA;;AAEA,MAAM,cAAN,GAAuB,UAAW,MAAX,EAAoB;;AAE1C,OAAM,QAAN,CAAe,IAAf,CAAqB,IAArB;;AAEA,MAAK,kBAAL,CAAyB,IAAI,MAAM,oBAAV,CAAgC,MAAhC,CAAzB;AACA,MAAK,aAAL;AAEA,CAPD;;AASA,MAAM,cAAN,CAAqB,SAArB,GAAiC,OAAO,MAAP,CAAe,MAAM,QAAN,CAAe,SAA9B,CAAjC;AACA,MAAM,cAAN,CAAqB,SAArB,CAA+B,WAA/B,GAA6C,MAAM,cAAnD;;AAEA;;AAEA,MAAM,oBAAN,GAA6B,UAAW,MAAX,EAAoB;;AAEhD,OAAM,cAAN,CAAqB,IAArB,CAA2B,IAA3B;;AAEA;;AAEA,KAAI,WAAW,EAAf;AACA,KAAI,UAAU,EAAd;;AAEA,KAAK,MAAM,UAAN,KAAqB,SAA1B,EAAsC;;AAErC,UAAQ,KAAR,CAAe,6EAAf;AAEA;;AAED,KAAI,aAAa,IAAI,MAAM,UAAV,GAAuB,aAAvB,CAAsC,MAAtC,CAAjB;;AAEA;;AAEA,KAAI,QAAQ,WAAW,KAAvB;;AAEA,MAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,MAAM,MAA3B,EAAmC,GAAnC,EAA0C;;AAEzC,MAAI,OAAO,MAAO,CAAP,CAAX;AACA,MAAI,OAAO,KAAK,IAAhB;;AAEA;;AAEA,KAAG;;AAEF,OAAI,QAAQ,KAAK,IAAL,GAAY,KAAxB;;AAEA,YAAS,IAAT,CAAe,MAAM,CAArB,EAAwB,MAAM,CAA9B,EAAiC,MAAM,CAAvC;AACA,WAAQ,IAAR,CAAc,KAAK,MAAL,CAAY,CAA1B,EAA6B,KAAK,MAAL,CAAY,CAAzC,EAA4C,KAAK,MAAL,CAAY,CAAxD;;AAEA,UAAO,KAAK,IAAZ;AAEA,GATD,QASU,SAAS,KAAK,IATxB;AAWA;;AAED;;AAEA,MAAK,YAAL,CAAmB,UAAnB,EAA+B,IAAI,MAAM,sBAAV,CAAkC,QAAlC,EAA4C,CAA5C,CAA/B;AACA,MAAK,YAAL,CAAmB,QAAnB,EAA6B,IAAI,MAAM,sBAAV,CAAkC,OAAlC,EAA2C,CAA3C,CAA7B;AAEA,CA9CD;;AAgDA,MAAM,oBAAN,CAA2B,SAA3B,GAAuC,OAAO,MAAP,CAAe,MAAM,cAAN,CAAqB,SAApC,CAAvC;AACA,MAAM,oBAAN,CAA2B,SAA3B,CAAqC,WAArC,GAAmD,MAAM,oBAAzD","file":"ConvexGeometry-compiled.js","sourcesContent":["console.warn( \"THREE.ConvexGeometry: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n// ConvexGeometry\n\nTHREE.ConvexGeometry = function ( points ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.fromBufferGeometry( new THREE.ConvexBufferGeometry( points ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ConvexGeometry.prototype.constructor = THREE.ConvexGeometry;\n\n// ConvexBufferGeometry\n\nTHREE.ConvexBufferGeometry = function ( points ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\t// buffers\n\n\tvar vertices = [];\n\tvar normals = [];\n\n\tif ( THREE.ConvexHull === undefined ) {\n\n\t\tconsole.error( 'THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.ConvexHull' );\n\n\t}\n\n\tvar convexHull = new THREE.ConvexHull().setFromPoints( points );\n\n\t// generate vertices and normals\n\n\tvar faces = convexHull.faces;\n\n\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\t\tvar edge = face.edge;\n\n\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n\t\tdo {\n\n\t\t\tvar point = edge.head().point;\n\n\t\t\tvertices.push( point.x, point.y, point.z );\n\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\n\n\t\t\tedge = edge.next;\n\n\t\t} while ( edge !== face.edge );\n\n\t}\n\n\t// build geometry\n\n\tthis.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\tthis.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n};\n\nTHREE.ConvexBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.ConvexBufferGeometry.prototype.constructor = THREE.ConvexBufferGeometry;\n"]}