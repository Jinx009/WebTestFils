{"version":3,"sources":["SSAOPass.js"],"names":[],"mappings":"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","file":"SSAOPass-compiled.js","sourcesContent":["console.warn( \"THREE.SSAOPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.SSAOPass = function ( scene, camera, width, height ) {\n\n\tTHREE.Pass.call( this );\n\n\tthis.width = ( width !== undefined ) ? width : 512;\n\tthis.height = ( height !== undefined ) ? height : 512;\n\n\tthis.clear = true;\n\n\tthis.camera = camera;\n\tthis.scene = scene;\n\n\tthis.kernelRadius = 8;\n\tthis.kernelSize = 32;\n\tthis.kernel = [];\n\tthis.noiseTexture = null;\n\tthis.output = 0;\n\n\tthis.minDistance = 0.005;\n\tthis.maxDistance = 0.1;\n\n\t//\n\n\tthis.generateSampleKernel();\n\tthis.generateRandomKernelRotations();\n\n\t// beauty render target with depth buffer\n\n\tvar depthTexture = new THREE.DepthTexture();\n\tdepthTexture.type = THREE.UnsignedShortType;\n\tdepthTexture.minFilter = THREE.NearestFilter;\n\tdepthTexture.maxFilter = THREE.NearestFilter;\n\n\tthis.beautyRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: THREE.LinearFilter,\n\t\tmagFilter: THREE.LinearFilter,\n\t\tformat: THREE.RGBAFormat,\n\t\tdepthTexture: depthTexture,\n\t\tdepthBuffer: true\n\t} );\n\n\t// normal render target\n\n\tthis.normalRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: THREE.NearestFilter,\n\t\tmagFilter: THREE.NearestFilter,\n\t\tformat: THREE.RGBAFormat\n\t} );\n\n\t// ssao render target\n\n\tthis.ssaoRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: THREE.LinearFilter,\n\t\tmagFilter: THREE.LinearFilter,\n\t\tformat: THREE.RGBAFormat\n\t} );\n\n\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t// ssao material\n\n\tif ( THREE.SSAOShader === undefined ) {\n\n\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SSAOShader.' );\n\n\t}\n\n\tthis.ssaoMaterial = new THREE.ShaderMaterial( {\n\t\tdefines: Object.assign( {}, THREE.SSAOShader.defines ),\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOShader.uniforms ),\n\t\tvertexShader: THREE.SSAOShader.vertexShader,\n\t\tfragmentShader: THREE.SSAOShader.fragmentShader,\n\t\tblending: THREE.NoBlending\n\t} );\n\n\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t// normal material\n\n\tthis.normalMaterial = new THREE.MeshNormalMaterial();\n\tthis.normalMaterial.blending = THREE.NoBlending;\n\n\t// blur material\n\n\tthis.blurMaterial = new THREE.ShaderMaterial( {\n\t\tdefines: Object.assign( {}, THREE.SSAOBlurShader.defines ),\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOBlurShader.uniforms ),\n\t\tvertexShader: THREE.SSAOBlurShader.vertexShader,\n\t\tfragmentShader: THREE.SSAOBlurShader.fragmentShader\n\t} );\n\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t// material for rendering the depth\n\n\tthis.depthRenderMaterial = new THREE.ShaderMaterial( {\n\t\tdefines: Object.assign( {}, THREE.SSAODepthShader.defines ),\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAODepthShader.uniforms ),\n\t\tvertexShader: THREE.SSAODepthShader.vertexShader,\n\t\tfragmentShader: THREE.SSAODepthShader.fragmentShader,\n\t\tblending: THREE.NoBlending\n\t} );\n\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t// material for rendering the content of a render target\n\n\tthis.copyMaterial = new THREE.ShaderMaterial( {\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.CopyShader.uniforms ),\n\t\tvertexShader: THREE.CopyShader.vertexShader,\n\t\tfragmentShader: THREE.CopyShader.fragmentShader,\n\t\ttransparent: true,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\tblendSrc: THREE.DstColorFactor,\n\t\tblendDst: THREE.ZeroFactor,\n\t\tblendEquation: THREE.AddEquation,\n\t\tblendSrcAlpha: THREE.DstAlphaFactor,\n\t\tblendDstAlpha: THREE.ZeroFactor,\n\t\tblendEquationAlpha: THREE.AddEquation\n\t} );\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\tthis.originalClearColor = new THREE.Color();\n\n};\n\nTHREE.SSAOPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.SSAOPass,\n\n\tdispose: function () {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.ssaoRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t},\n\n\trender: function ( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty and depth\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// render normals\n\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t// render SSAO\n\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t// render blur\n\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.Blur:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.SSAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = THREE.CustomBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t}\n\n\t},\n\n\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t},\n\n\tgenerateSampleKernel: function () {\n\n\t\tvar kernelSize = this.kernelSize;\n\t\tvar kernel = this.kernel;\n\n\t\tfor ( var i = 0; i < kernelSize; i ++ ) {\n\n\t\t\tvar sample = new THREE.Vector3();\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\tsample.z = Math.random();\n\n\t\t\tsample.normalize();\n\n\t\t\tvar scale = i / kernelSize;\n\t\t\tscale = THREE.MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\tsample.multiplyScalar( scale );\n\n\t\t\tkernel.push( sample );\n\n\t\t}\n\n\t},\n\n\tgenerateRandomKernelRotations: function () {\n\n\t\tvar width = 4, height = 4;\n\n\t\tif ( THREE.SimplexNoise === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SimplexNoise.' );\n\n\t\t}\n\n\t\tvar simplex = new THREE.SimplexNoise();\n\n\t\tvar size = width * height;\n\t\tvar data = new Float32Array( size * 4 );\n\n\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\tvar stride = i * 4;\n\n\t\t\tvar x = ( Math.random() * 2 ) - 1;\n\t\t\tvar y = ( Math.random() * 2 ) - 1;\n\t\t\tvar z = 0;\n\n\t\t\tvar noise = simplex.noise3d( x, y, z );\n\n\t\t\tdata[ stride ] = noise;\n\t\t\tdata[ stride + 1 ] = noise;\n\t\t\tdata[ stride + 2 ] = noise;\n\t\t\tdata[ stride + 3 ] = 1;\n\n\t\t}\n\n\t\tthis.noiseTexture = new THREE.DataTexture( data, width, height, THREE.RGBAFormat, THREE.FloatType );\n\t\tthis.noiseTexture.wrapS = THREE.RepeatWrapping;\n\t\tthis.noiseTexture.wrapT = THREE.RepeatWrapping;\n\n\t}\n\n} );\n\nTHREE.SSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SSAO': 1,\n\t'Blur': 2,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5\n};\n"]}