{"version":3,"sources":["FilmPass.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,ySAAd;;AAEA,MAAM,QAAN,GAAiB,UAAW,cAAX,EAA2B,kBAA3B,EAA+C,cAA/C,EAA+D,SAA/D,EAA2E;;AAE3F,OAAM,IAAN,CAAW,IAAX,CAAiB,IAAjB;;AAEA,KAAK,MAAM,UAAN,KAAqB,SAA1B,EACC,QAAQ,KAAR,CAAe,2CAAf;;AAED,KAAI,SAAS,MAAM,UAAnB;;AAEA,MAAK,QAAL,GAAgB,MAAM,aAAN,CAAoB,KAApB,CAA2B,OAAO,QAAlC,CAAhB;;AAEA,MAAK,QAAL,GAAgB,IAAI,MAAM,cAAV,CAA0B;;AAEzC,YAAU,KAAK,QAF0B;AAGzC,gBAAc,OAAO,YAHoB;AAIzC,kBAAgB,OAAO;;AAJkB,EAA1B,CAAhB;;AAQA,KAAK,cAAc,SAAnB,EAA+B,KAAK,QAAL,CAAc,SAAd,CAAwB,KAAxB,GAAgC,SAAhC;AAC/B,KAAK,mBAAmB,SAAxB,EAAoC,KAAK,QAAL,CAAc,UAAd,CAAyB,KAAzB,GAAiC,cAAjC;AACpC,KAAK,uBAAuB,SAA5B,EAAwC,KAAK,QAAL,CAAc,UAAd,CAAyB,KAAzB,GAAiC,kBAAjC;AACxC,KAAK,mBAAmB,SAAxB,EAAoC,KAAK,QAAL,CAAc,MAAd,CAAqB,KAArB,GAA6B,cAA7B;;AAEpC,MAAK,MAAL,GAAc,IAAI,MAAM,IAAN,CAAW,cAAf,CAA+B,KAAK,QAApC,CAAd;AAEA,CA1BD;;AA4BA,MAAM,QAAN,CAAe,SAAf,GAA2B,OAAO,MAAP,CAAe,OAAO,MAAP,CAAe,MAAM,IAAN,CAAW,SAA1B,CAAf,EAAsD;;AAEhF,cAAa,MAAM,QAF6D;;AAIhF,SAAQ,UAAW,QAAX,EAAqB,WAArB,EAAkC,UAAlC,EAA8C,SAA9C,CAAwD,iBAAxD,EAA4E;;AAEnF,OAAK,QAAL,CAAe,UAAf,EAA4B,KAA5B,GAAoC,WAAW,OAA/C;AACA,OAAK,QAAL,CAAe,MAAf,EAAwB,KAAxB,IAAiC,SAAjC;;AAEA,MAAK,KAAK,cAAV,EAA2B;;AAE1B,YAAS,eAAT,CAA0B,IAA1B;AACA,QAAK,MAAL,CAAY,MAAZ,CAAoB,QAApB;AAEA,GALD,MAKO;;AAEN,YAAS,eAAT,CAA0B,WAA1B;AACA,OAAK,KAAK,KAAV,EAAkB,SAAS,KAAT;AAClB,QAAK,MAAL,CAAY,MAAZ,CAAoB,QAApB;AAEA;AAED;;AAtB+E,CAAtD,CAA3B","file":"FilmPass-compiled.js","sourcesContent":["console.warn( \"THREE.FilmPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\tTHREE.Pass.call( this );\n\n\tif ( THREE.FilmShader === undefined )\n\t\tconsole.error( \"THREE.FilmPass relies on THREE.FilmShader\" );\n\n\tvar shader = THREE.FilmShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\tthis.material = new THREE.ShaderMaterial( {\n\n\t\tuniforms: this.uniforms,\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader\n\n\t} );\n\n\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n};\n\nTHREE.FilmPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.FilmPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\n\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.uniforms[ \"time\" ].value += deltaTime;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n"]}