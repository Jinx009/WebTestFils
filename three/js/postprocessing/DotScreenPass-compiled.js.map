{"version":3,"sources":["DotScreenPass.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,8SAAd;;AAEA,MAAM,aAAN,GAAsB,UAAW,MAAX,EAAmB,KAAnB,EAA0B,KAA1B,EAAkC;;AAEvD,OAAM,IAAN,CAAW,IAAX,CAAiB,IAAjB;;AAEA,KAAK,MAAM,eAAN,KAA0B,SAA/B,EACC,QAAQ,KAAR,CAAe,qDAAf;;AAED,KAAI,SAAS,MAAM,eAAnB;;AAEA,MAAK,QAAL,GAAgB,MAAM,aAAN,CAAoB,KAApB,CAA2B,OAAO,QAAlC,CAAhB;;AAEA,KAAK,WAAW,SAAhB,EAA4B,KAAK,QAAL,CAAe,QAAf,EAA0B,KAA1B,CAAgC,IAAhC,CAAsC,MAAtC;AAC5B,KAAK,UAAU,SAAf,EAA2B,KAAK,QAAL,CAAe,OAAf,EAAyB,KAAzB,GAAiC,KAAjC;AAC3B,KAAK,UAAU,SAAf,EAA2B,KAAK,QAAL,CAAe,OAAf,EAAyB,KAAzB,GAAiC,KAAjC;;AAE3B,MAAK,QAAL,GAAgB,IAAI,MAAM,cAAV,CAA0B;;AAEzC,YAAU,KAAK,QAF0B;AAGzC,gBAAc,OAAO,YAHoB;AAIzC,kBAAgB,OAAO;;AAJkB,EAA1B,CAAhB;;AAQA,MAAK,MAAL,GAAc,IAAI,MAAM,IAAN,CAAW,cAAf,CAA+B,KAAK,QAApC,CAAd;AAEA,CAzBD;;AA2BA,MAAM,aAAN,CAAoB,SAApB,GAAgC,OAAO,MAAP,CAAe,OAAO,MAAP,CAAe,MAAM,IAAN,CAAW,SAA1B,CAAf,EAAsD;;AAErF,cAAa,MAAM,aAFkE;;AAIrF,SAAQ,UAAW,QAAX,EAAqB,WAArB,EAAkC,UAAlC,CAA6C,4BAA7C,EAA4E;;AAEnF,OAAK,QAAL,CAAe,UAAf,EAA4B,KAA5B,GAAoC,WAAW,OAA/C;AACA,OAAK,QAAL,CAAe,OAAf,EAAyB,KAAzB,CAA+B,GAA/B,CAAoC,WAAW,KAA/C,EAAsD,WAAW,MAAjE;;AAEA,MAAK,KAAK,cAAV,EAA2B;;AAE1B,YAAS,eAAT,CAA0B,IAA1B;AACA,QAAK,MAAL,CAAY,MAAZ,CAAoB,QAApB;AAEA,GALD,MAKO;;AAEN,YAAS,eAAT,CAA0B,WAA1B;AACA,OAAK,KAAK,KAAV,EAAkB,SAAS,KAAT;AAClB,QAAK,MAAL,CAAY,MAAZ,CAAoB,QAApB;AAEA;AAED;;AAtBoF,CAAtD,CAAhC","file":"DotScreenPass-compiled.js","sourcesContent":["console.warn( \"THREE.DotScreenPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.DotScreenPass = function ( center, angle, scale ) {\n\n\tTHREE.Pass.call( this );\n\n\tif ( THREE.DotScreenShader === undefined )\n\t\tconsole.error( \"THREE.DotScreenPass relies on THREE.DotScreenShader\" );\n\n\tvar shader = THREE.DotScreenShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\tif ( center !== undefined ) this.uniforms[ \"center\" ].value.copy( center );\n\tif ( angle !== undefined ) this.uniforms[ \"angle\" ].value = angle;\n\tif ( scale !== undefined ) this.uniforms[ \"scale\" ].value = scale;\n\n\tthis.material = new THREE.ShaderMaterial( {\n\n\t\tuniforms: this.uniforms,\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader\n\n\t} );\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n};\n\nTHREE.DotScreenPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.DotScreenPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.uniforms[ \"tSize\" ].value.set( readBuffer.width, readBuffer.height );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n"]}