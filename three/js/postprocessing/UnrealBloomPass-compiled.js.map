{"version":3,"sources":["UnrealBloomPass.js"],"names":[],"mappings":"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","file":"UnrealBloomPass-compiled.js","sourcesContent":["console.warn( \"THREE.UnrealBloomPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nTHREE.UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tTHREE.Pass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new THREE.Vector2( resolution.x, resolution.y ) : new THREE.Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new THREE.Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new THREE.WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new THREE.WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new THREE.WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( THREE.LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader\" );\n\n\tvar highPassShader = THREE.LuminosityHighPassShader;\n\tthis.highPassUniforms = THREE.UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new THREE.ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new THREE.Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( THREE.CopyShader === undefined ) {\n\n\t\tconsole.error( \"THREE.UnrealBloomPass relies on THREE.CopyShader\" );\n\n\t}\n\n\tvar copyShader = THREE.CopyShader;\n\n\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new THREE.ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: THREE.AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new THREE.Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new THREE.MeshBasicMaterial();\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n};\n\nTHREE.UnrealBloomPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new THREE.Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = THREE.UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = THREE.UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new THREE.Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nTHREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2( 1.0, 0.0 );\nTHREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2( 0.0, 1.0 );\n"]}