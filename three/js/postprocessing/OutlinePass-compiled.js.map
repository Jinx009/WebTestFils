{"version":3,"sources":["OutlinePass.js"],"names":[],"mappings":"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","file":"OutlinePass-compiled.js","sourcesContent":["console.warn( \"THREE.OutlinePass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.OutlinePass = function ( resolution, scene, camera, selectedObjects ) {\n\n\tthis.renderScene = scene;\n\tthis.renderCamera = camera;\n\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\tthis.visibleEdgeColor = new THREE.Color( 1, 1, 1 );\n\tthis.hiddenEdgeColor = new THREE.Color( 0.1, 0.04, 0.02 );\n\tthis.edgeGlow = 0.0;\n\tthis.usePatternTexture = false;\n\tthis.edgeThickness = 1.0;\n\tthis.edgeStrength = 3.0;\n\tthis.downSampleRatio = 2;\n\tthis.pulsePeriod = 0;\n\n\tTHREE.Pass.call( this );\n\n\tthis.resolution = ( resolution !== undefined ) ? new THREE.Vector2( resolution.x, resolution.y ) : new THREE.Vector2( 256, 256 );\n\n\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n\n\tvar resx = Math.round( this.resolution.x / this.downSampleRatio );\n\tvar resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\tthis.maskBufferMaterial = new THREE.MeshBasicMaterial( { color: 0xffffff } );\n\tthis.maskBufferMaterial.side = THREE.DoubleSide;\n\tthis.renderTargetMaskBuffer = new THREE.WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\tthis.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\n\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\tthis.depthMaterial = new THREE.MeshDepthMaterial();\n\tthis.depthMaterial.side = THREE.DoubleSide;\n\tthis.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n\tthis.depthMaterial.blending = THREE.NoBlending;\n\n\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\tthis.prepareMaskMaterial.side = THREE.DoubleSide;\n\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\tthis.renderTargetDepthBuffer = new THREE.WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\tthis.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\n\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetMaskDownSampleBuffer = new THREE.WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\n\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetBlurBuffer1 = new THREE.WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\n\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetBlurBuffer2 = new THREE.WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\tthis.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\n\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\tthis.renderTargetEdgeBuffer1 = new THREE.WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\n\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetEdgeBuffer2 = new THREE.WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\tthis.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\n\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\tvar MAX_EDGE_THICKNESS = 4;\n\tvar MAX_EDGE_GLOW = 4;\n\n\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\n\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\n\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = 1;\n\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\n\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\tthis.separableBlurMaterial2.uniforms[ \"kernelRadius\" ].value = MAX_EDGE_GLOW;\n\n\t// Overlay material\n\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t// copy material\n\tif ( THREE.CopyShader === undefined )\n\t\tconsole.error( \"THREE.OutlinePass relies on THREE.CopyShader\" );\n\n\tvar copyShader = THREE.CopyShader;\n\n\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new THREE.ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: THREE.NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new THREE.Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\tthis.tempPulseColor1 = new THREE.Color();\n\tthis.tempPulseColor2 = new THREE.Color();\n\tthis.textureMatrix = new THREE.Matrix4();\n\n\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t}\n\n};\n\nTHREE.OutlinePass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.OutlinePass,\n\n\tdispose: function () {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\n\t\tvar resx = Math.round( width / this.downSampleRatio );\n\t\tvar resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ \"texSize\" ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ \"texSize\" ].value.set( resx, resy );\n\n\t},\n\n\tchangeVisibilityOfSelectedObjects: function ( bVisible ) {\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( bVisible ) {\n\n\t\t\t\t\tobject.visible = object.userData.oldVisible;\n\t\t\t\t\tdelete object.userData.oldVisible;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.userData.oldVisible = object.visible;\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t},\n\n\tchangeVisibilityOfNonSelectedObjects: function ( bVisible ) {\n\n\t\tvar selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isLine || object.isSprite ) {\n\n\t\t\t\tvar bFound = false;\n\n\t\t\t\tfor ( var i = 0; i < selectedMeshes.length; i ++ ) {\n\n\t\t\t\t\tvar selectedObjectId = selectedMeshes[ i ].id;\n\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! bFound ) {\n\n\t\t\t\t\tvar visibility = object.visible;\n\n\t\t\t\t\tif ( ! bVisible || object.bVisible ) object.visible = bVisible;\n\n\t\t\t\t\tobject.bVisible = visibility;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t},\n\n\tupdateTextureMatrix: function () {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\n\n\t\t\tvar currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"cameraNearFar\" ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"depthTexture\" ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ \"textureMatrix\" ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tvar scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"texSize\" ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"visibleEdgeColor\" ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ \"hiddenEdgeColor\" ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = THREE.OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"kernelRadius\" ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ \"direction\" ].value = THREE.OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = THREE.OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"colorTexture\" ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ \"direction\" ].value = THREE.OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ \"maskTexture\" ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture1\" ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeTexture2\" ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ \"patternTexture\" ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeStrength\" ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ \"edgeGlow\" ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ \"usePatternTexture\" ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t},\n\n\tgetPrepareMaskMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"depthTexture\": { value: null },\n\t\t\t\t\"cameraNearFar\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"textureMatrix\": { value: null }\n\t\t\t},\n\n\t\t\tvertexShader: [\n\t\t\t\t'#include <morphtarget_pars_vertex>',\n\t\t\t\t'#include <skinning_pars_vertex>',\n\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'uniform mat4 textureMatrix;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\t#include <skinbase_vertex>',\n\t\t\t\t'\t#include <begin_vertex>',\n\t\t\t\t'\t#include <morphtarget_vertex>',\n\t\t\t\t'\t#include <skinning_vertex>',\n\t\t\t\t'\t#include <project_vertex>',\n\n\t\t\t\t'\tvPosition = mvPosition;',\n\t\t\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t\t\t'\tprojTexCoord = textureMatrix * worldPosition;',\n\n\t\t\t\t'}'\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\t\t\t\t'#include <packing>',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'uniform sampler2D depthTexture;',\n\t\t\t\t'uniform vec2 cameraNearFar;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));',\n\t\t\t\t'\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );',\n\t\t\t\t'\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;',\n\t\t\t\t'\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);',\n\n\t\t\t\t'}'\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t},\n\n\tgetEdgeDetectionMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"maskTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"visibleEdgeColor\": { value: new THREE.Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t\"hiddenEdgeColor\": { value: new THREE.Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( maxRadius ) {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"MAX_RADIUS\": maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"kernelRadius\": { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\\n\t\t\t\tuniform sampler2D colorTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\tuniform float kernelRadius;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\n\t\t\t\t\tvec2 uvOffset = delta;\\\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\n\t\t\t\t\t\tuvOffset += delta;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetOverlayMaterial: function () {\n\n\t\treturn new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"maskTexture\": { value: null },\n\t\t\t\t\"edgeTexture1\": { value: null },\n\t\t\t\t\"edgeTexture2\": { value: null },\n\t\t\t\t\"patternTexture\": { value: null },\n\t\t\t\t\"edgeStrength\": { value: 1.0 },\n\t\t\t\t\"edgeGlow\": { value: 1.0 },\n\t\t\t\t\"usePatternTexture\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform sampler2D edgeTexture1;\\\n\t\t\t\tuniform sampler2D edgeTexture2;\\\n\t\t\t\tuniform sampler2D patternTexture;\\\n\t\t\t\tuniform float edgeStrength;\\\n\t\t\t\tuniform float edgeGlow;\\\n\t\t\t\tuniform bool usePatternTexture;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\n\t\t\t\t\tif(usePatternTexture)\\\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\n\t\t\t\t\tgl_FragColor = finalColor;\\\n\t\t\t\t}\",\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n} );\n\nTHREE.OutlinePass.BlurDirectionX = new THREE.Vector2( 1.0, 0.0 );\nTHREE.OutlinePass.BlurDirectionY = new THREE.Vector2( 0.0, 1.0 );\n"]}