{"version":3,"sources":["SSAARenderPass.js"],"names":[],"mappings":"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","file":"SSAARenderPass-compiled.js","sourcesContent":["console.warn( \"THREE.SSAARenderPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n*\n* Supersample Anti-Aliasing Render Pass\n*\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\n*\n* References: https://en.wikipedia.org/wiki/Supersampling\n*\n*/\n\nTHREE.SSAARenderPass = function ( scene, camera, clearColor, clearAlpha ) {\n\n\tTHREE.Pass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\n\tthis.unbiased = true;\n\n\t// as we need to clear the buffer in this pass, clearColor must be set to something, defaults to black.\n\tthis.clearColor = ( clearColor !== undefined ) ? clearColor : 0x000000;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tif ( THREE.CopyShader === undefined ) console.error( \"THREE.SSAARenderPass relies on THREE.CopyShader\" );\n\n\tvar copyShader = THREE.CopyShader;\n\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\tthis.copyMaterial = new THREE.ShaderMaterial(\t{\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tpremultipliedAlpha: true,\n\t\ttransparent: true,\n\t\tblending: THREE.AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\t} );\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.copyMaterial );\n\n};\n\nTHREE.SSAARenderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.SSAARenderPass,\n\n\tdispose: function () {\n\n\t\tif ( this.sampleRenderTarget ) {\n\n\t\t\tthis.sampleRenderTarget.dispose();\n\t\t\tthis.sampleRenderTarget = null;\n\n\t\t}\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.sampleRenderTarget )\tthis.sampleRenderTarget.setSize( width, height );\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer ) {\n\n\t\tif ( ! this.sampleRenderTarget ) {\n\n\t\t\tthis.sampleRenderTarget = new THREE.WebGLRenderTarget( readBuffer.width, readBuffer.height, { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat } );\n\t\t\tthis.sampleRenderTarget.texture.name = \"SSAARenderPass.sample\";\n\n\t\t}\n\n\t\tvar jitterOffsets = THREE.SSAARenderPass.JitterVectors[ Math.max( 0, Math.min( this.sampleLevel, 5 ) ) ];\n\n\t\tvar autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor = renderer.getClearColor().getHex();\n\t\tvar oldClearAlpha = renderer.getClearAlpha();\n\n\t\tvar baseSampleWeight = 1.0 / jitterOffsets.length;\n\t\tvar roundingRange = 1 / 32;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.sampleRenderTarget.texture;\n\n\t\tvar width = readBuffer.width, height = readBuffer.height;\n\n\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n\t\tfor ( var i = 0; i < jitterOffsets.length; i ++ ) {\n\n\t\t\tvar jitterOffset = jitterOffsets[ i ];\n\n\t\t\tif ( this.camera.setViewOffset ) {\n\n\t\t\t\tthis.camera.setViewOffset( width, height,\n\t\t\t\t\tjitterOffset[ 0 ] * 0.0625, jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\n\t\t\t\t\twidth, height );\n\n\t\t\t}\n\n\t\t\tvar sampleWeight = baseSampleWeight;\n\n\t\t\tif ( this.unbiased ) {\n\n\t\t\t\t// the theory is that equal weights for each sample lead to an accumulation of rounding errors.\n\t\t\t\t// The following equation varies the sampleWeight per sample so that it is uniformly distributed\n\t\t\t\t// across a range of values whose rounding errors cancel each other out.\n\n\t\t\t\tvar uniformCenteredDistribution = ( - 0.5 + ( i + 0.5 ) / jitterOffsets.length );\n\t\t\t\tsampleWeight += roundingRange * uniformCenteredDistribution;\n\n\t\t\t}\n\n\t\t\tthis.copyUniforms[ \"opacity\" ].value = sampleWeight;\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\trenderer.setRenderTarget( this.renderToScreen ? null : writeBuffer );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\tif ( this.camera.clearViewOffset ) this.camera.clearViewOffset();\n\n\t\trenderer.autoClear = autoClear;\n\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t}\n\n} );\n\n\n// These jitter vectors are specified in integers because it is easier.\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\n// before being used, thus these integers need to be scaled by 1/16.\n//\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\nTHREE.SSAARenderPass.JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n"]}