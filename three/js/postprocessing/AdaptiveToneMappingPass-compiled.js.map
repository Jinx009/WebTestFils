{"version":3,"sources":["AdaptiveToneMappingPass.js"],"names":[],"mappings":"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","file":"AdaptiveToneMappingPass-compiled.js","sourcesContent":["console.warn( \"THREE.AdaptiveToneMappingPass: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Generate a texture that represents the luminosity of the current scene, adapted over time\n * to simulate the optic nerve responding to the amount of light it is receiving.\n * Based on a GDC2007 presentation by Wolfgang Engel titled \"Post-Processing Pipeline\"\n *\n * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf\n */\n\nTHREE.AdaptiveToneMappingPass = function ( adaptive, resolution ) {\n\n\tTHREE.Pass.call( this );\n\n\tthis.resolution = ( resolution !== undefined ) ? resolution : 256;\n\tthis.needsInit = true;\n\tthis.adaptive = adaptive !== undefined ? !! adaptive : true;\n\n\tthis.luminanceRT = null;\n\tthis.previousLuminanceRT = null;\n\tthis.currentLuminanceRT = null;\n\n\tif ( THREE.CopyShader === undefined )\n\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.CopyShader\" );\n\n\tvar copyShader = THREE.CopyShader;\n\n\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\tthis.materialCopy = new THREE.ShaderMaterial( {\n\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: THREE.NoBlending,\n\t\tdepthTest: false\n\n\t} );\n\n\tif ( THREE.LuminosityShader === undefined )\n\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader\" );\n\n\tthis.materialLuminance = new THREE.ShaderMaterial( {\n\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.LuminosityShader.uniforms ),\n\t\tvertexShader: THREE.LuminosityShader.vertexShader,\n\t\tfragmentShader: THREE.LuminosityShader.fragmentShader,\n\t\tblending: THREE.NoBlending\n\t} );\n\n\tthis.adaptLuminanceShader = {\n\t\tdefines: {\n\t\t\t\"MIP_LEVEL_1X1\": ( Math.log( this.resolution ) / Math.log( 2.0 ) ).toFixed( 1 )\n\t\t},\n\t\tuniforms: {\n\t\t\t\"lastLum\": { value: null },\n\t\t\t\"currentLum\": { value: null },\n\t\t\t\"minLuminance\": { value: 0.01 },\n\t\t\t\"delta\": { value: 0.016 },\n\t\t\t\"tau\": { value: 1.0 }\n\t\t},\n\t\tvertexShader: [\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\t\t].join( '\\n' ),\n\t\tfragmentShader: [\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform sampler2D lastLum;\",\n\t\t\t\"uniform sampler2D currentLum;\",\n\t\t\t\"uniform float minLuminance;\",\n\t\t\t\"uniform float delta;\",\n\t\t\t\"uniform float tau;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\",\n\t\t\t\"\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\",\n\n\t\t\t\"\tfloat fLastLum = max( minLuminance, lastLum.r );\",\n\t\t\t\"\tfloat fCurrentLum = max( minLuminance, currentLum.r );\",\n\n\t\t\t//The adaption seems to work better in extreme lighting differences\n\t\t\t//if the input luminance is squared.\n\t\t\t\"\tfCurrentLum *= fCurrentLum;\",\n\n\t\t\t// Adapt the luminance using Pattanaik's technique\n\t\t\t\"\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\",\n\t\t\t// \"fAdaptedLum = sqrt(fAdaptedLum);\",\n\t\t\t\"\tgl_FragColor.r = fAdaptedLum;\",\n\t\t\t\"}\"\n\t\t].join( '\\n' )\n\t};\n\n\tthis.materialAdaptiveLum = new THREE.ShaderMaterial( {\n\n\t\tuniforms: THREE.UniformsUtils.clone( this.adaptLuminanceShader.uniforms ),\n\t\tvertexShader: this.adaptLuminanceShader.vertexShader,\n\t\tfragmentShader: this.adaptLuminanceShader.fragmentShader,\n\t\tdefines: Object.assign( {}, this.adaptLuminanceShader.defines ),\n\t\tblending: THREE.NoBlending\n\t} );\n\n\tif ( THREE.ToneMapShader === undefined )\n\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader\" );\n\n\tthis.materialToneMap = new THREE.ShaderMaterial( {\n\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.ToneMapShader.uniforms ),\n\t\tvertexShader: THREE.ToneMapShader.vertexShader,\n\t\tfragmentShader: THREE.ToneMapShader.fragmentShader,\n\t\tblending: THREE.NoBlending\n\t} );\n\n\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n};\n\nTHREE.AdaptiveToneMappingPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\tconstructor: THREE.AdaptiveToneMappingPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime/*, maskActive*/ ) {\n\n\t\tif ( this.needsInit ) {\n\n\t\t\tthis.reset( renderer );\n\n\t\t\tthis.luminanceRT.texture.type = readBuffer.texture.type;\n\t\t\tthis.previousLuminanceRT.texture.type = readBuffer.texture.type;\n\t\t\tthis.currentLuminanceRT.texture.type = readBuffer.texture.type;\n\t\t\tthis.needsInit = false;\n\n\t\t}\n\n\t\tif ( this.adaptive ) {\n\n\t\t\t//Render the luminance of the current scene into a render target with mipmapping enabled\n\t\t\tthis.fsQuad.material = this.materialLuminance;\n\t\t\tthis.materialLuminance.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.currentLuminanceRT );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t//Use the new luminance values, the previous luminance and the frame delta to\n\t\t\t//adapt the luminance over time.\n\t\t\tthis.fsQuad.material = this.materialAdaptiveLum;\n\t\t\tthis.materialAdaptiveLum.uniforms.delta.value = deltaTime;\n\t\t\tthis.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture;\n\t\t\tthis.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture;\n\t\t\trenderer.setRenderTarget( this.luminanceRT );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t//Copy the new adapted luminance value so that it can be used by the next frame.\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms.tDiffuse.value = this.luminanceRT.texture;\n\t\t\trenderer.setRenderTarget( this.previousLuminanceRT );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.materialToneMap;\n\t\tthis.materialToneMap.uniforms.tDiffuse.value = readBuffer.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t},\n\n\treset: function () {\n\n\t\t// render targets\n\t\tif ( this.luminanceRT ) {\n\n\t\t\tthis.luminanceRT.dispose();\n\n\t\t}\n\n\t\tif ( this.currentLuminanceRT ) {\n\n\t\t\tthis.currentLuminanceRT.dispose();\n\n\t\t}\n\n\t\tif ( this.previousLuminanceRT ) {\n\n\t\t\tthis.previousLuminanceRT.dispose();\n\n\t\t}\n\n\t\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat }; // was RGB format. changed to RGBA format. see discussion in #8415 / #8450\n\n\t\tthis.luminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\t\tthis.luminanceRT.texture.name = \"AdaptiveToneMappingPass.l\";\n\t\tthis.luminanceRT.texture.generateMipmaps = false;\n\n\t\tthis.previousLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\t\tthis.previousLuminanceRT.texture.name = \"AdaptiveToneMappingPass.pl\";\n\t\tthis.previousLuminanceRT.texture.generateMipmaps = false;\n\n\t\t// We only need mipmapping for the current luminosity because we want a down-sampled version to sample in our adaptive shader\n\t\tpars.minFilter = THREE.LinearMipmapLinearFilter;\n\t\tpars.generateMipmaps = true;\n\t\tthis.currentLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\t\tthis.currentLuminanceRT.texture.name = \"AdaptiveToneMappingPass.cl\";\n\n\t\tif ( this.adaptive ) {\n\n\t\t\tthis.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ] = \"\";\n\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n\n\t\t}\n\n\t\t//Put something in the adaptive luminance texture so that the scene can render initially\n\t\tthis.fsQuad.material = new THREE.MeshBasicMaterial( { color: 0x777777 } );\n\t\tthis.materialLuminance.needsUpdate = true;\n\t\tthis.materialAdaptiveLum.needsUpdate = true;\n\t\tthis.materialToneMap.needsUpdate = true;\n\t\t// renderer.render( this.scene, this.camera, this.luminanceRT );\n\t\t// renderer.render( this.scene, this.camera, this.previousLuminanceRT );\n\t\t// renderer.render( this.scene, this.camera, this.currentLuminanceRT );\n\n\t},\n\n\tsetAdaptive: function ( adaptive ) {\n\n\t\tif ( adaptive ) {\n\n\t\t\tthis.adaptive = true;\n\t\t\tthis.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ] = \"\";\n\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n\n\t\t} else {\n\n\t\t\tthis.adaptive = false;\n\t\t\tdelete this.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ];\n\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = null;\n\n\t\t}\n\n\t\tthis.materialToneMap.needsUpdate = true;\n\n\t},\n\n\tsetAdaptionRate: function ( rate ) {\n\n\t\tif ( rate ) {\n\n\t\t\tthis.materialAdaptiveLum.uniforms.tau.value = Math.abs( rate );\n\n\t\t}\n\n\t},\n\n\tsetMinLuminance: function ( minLum ) {\n\n\t\tif ( minLum ) {\n\n\t\t\tthis.materialToneMap.uniforms.minLuminance.value = minLum;\n\t\t\tthis.materialAdaptiveLum.uniforms.minLuminance.value = minLum;\n\n\t\t}\n\n\t},\n\n\tsetMaxLuminance: function ( maxLum ) {\n\n\t\tif ( maxLum ) {\n\n\t\t\tthis.materialToneMap.uniforms.maxLuminance.value = maxLum;\n\n\t\t}\n\n\t},\n\n\tsetAverageLuminance: function ( avgLum ) {\n\n\t\tif ( avgLum ) {\n\n\t\t\tthis.materialToneMap.uniforms.averageLuminance.value = avgLum;\n\n\t\t}\n\n\t},\n\n\tsetMiddleGrey: function ( middleGrey ) {\n\n\t\tif ( middleGrey ) {\n\n\t\t\tthis.materialToneMap.uniforms.middleGrey.value = middleGrey;\n\n\t\t}\n\n\t},\n\n\tdispose: function () {\n\n\t\tif ( this.luminanceRT ) {\n\n\t\t\tthis.luminanceRT.dispose();\n\n\t\t}\n\n\t\tif ( this.previousLuminanceRT ) {\n\n\t\t\tthis.previousLuminanceRT.dispose();\n\n\t\t}\n\n\t\tif ( this.currentLuminanceRT ) {\n\n\t\t\tthis.currentLuminanceRT.dispose();\n\n\t\t}\n\n\t\tif ( this.materialLuminance ) {\n\n\t\t\tthis.materialLuminance.dispose();\n\n\t\t}\n\n\t\tif ( this.materialAdaptiveLum ) {\n\n\t\t\tthis.materialAdaptiveLum.dispose();\n\n\t\t}\n\n\t\tif ( this.materialCopy ) {\n\n\t\t\tthis.materialCopy.dispose();\n\n\t\t}\n\n\t\tif ( this.materialToneMap ) {\n\n\t\t\tthis.materialToneMap.dispose();\n\n\t\t}\n\n\t}\n\n} );\n"]}