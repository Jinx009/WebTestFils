{"version":3,"sources":["SubsurfaceScatteringShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,2TAAd;AACA;;;;;;;;AAQA,SAAS,UAAT,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,OAAnC,EAA6C;;AAE5C,QAAO,OAAO,KAAP,CAAc,IAAd,EAAqB,IAArB,CAA2B,OAA3B,CAAP;AAEA;;AAED,IAAI,sBAAsB,MAAM,WAAN,CAAmB,gBAAnB,EAAsC,KAAtC,CAA6C,CAA7C,EAAgD,MAAM,WAAN,CAAmB,gBAAnB,EAAsC,OAAtC,CAA+C,eAA/C,CAAhD,CAA1B;AACA,IAAI,sBAAsB,MAAM,WAAN,CAAmB,gBAAnB,EAAsC,KAAtC,CAA6C,MAAM,WAAN,CAAmB,gBAAnB,EAAsC,OAAtC,CAA+C,eAA/C,CAA7C,CAA1B;;AAEA,MAAM,0BAAN,GAAmC;;AAElC,WAAU,MAAM,aAAN,CAAoB,KAApB,CAA2B,CACpC,MAAM,SAAN,CAAiB,OAAjB,EAA2B,QADS,EAEpC;AACC,kBAAgB,EAAE,OAAO,IAAT,EADjB;AAEC,oBAAkB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAFnB;AAGC,yBAAuB,EAAE,OAAO,GAAT,EAHxB;AAIC,sBAAoB,EAAE,OAAO,GAAT,EAJrB;AAKC,0BAAwB,EAAE,OAAO,GAAT,EALzB;AAMC,oBAAkB,EAAE,OAAO,GAAT,EANnB;AAOC,oBAAkB,EAAE,OAAO,IAAT;AAPnB,EAFoC,CAA3B,CAFwB;;AAgBlC,eAAc,CACb,gBADa,EAEb,MAAM,WAAN,CAAmB,gBAAnB,CAFa,EAGZ,IAHY,CAGN,IAHM,CAhBoB;;AAqBlC,iBAAgB,CACf,gBADe,EAEf,oBAFe,EAIf,mBAJe,EAMf,iCANe,EAOf,+BAPe,EAQf,+BARe,EASf,oCATe,EAUf,iCAVe,EAWf,qCAXe,EAYf,8BAZe,EAcf,4JAde,EAef,mEAfe,EAgBf,oGAhBe,EAiBf,gHAjBe,EAkBf,wEAlBe,EAmBf,6FAnBe,EAoBf,GApBe,EAsBf,oBAAoB,OAApB,CAA6B,kCAA7B,EAEC,WACC,MAAM,WAAN,CAAmB,uBAAnB,CADD,EAEC,+DAFD,EAGC,CACC,+DADD,EAGC,gDAHD,EAIC,oEAJD,EAKC,QALD,EAME,IANF,CAMQ,IANR,CAHD,CAFD,CAtBe,EAsCd,IAtCc,CAsCR,IAtCQ;;AArBkB,CAAnC","file":"SubsurfaceScatteringShader-compiled.js","sourcesContent":["console.warn( \"THREE.SubsurfaceScatteringShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 â€“ Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\n\nfunction replaceAll( string, find, replace ) {\n\n\treturn string.split( find ).join( replace );\n\n}\n\nvar meshphong_frag_head = THREE.ShaderChunk[ \"meshphong_frag\" ].slice( 0, THREE.ShaderChunk[ \"meshphong_frag\" ].indexOf( 'void main() {' ) );\nvar meshphong_frag_body = THREE.ShaderChunk[ \"meshphong_frag\" ].slice( THREE.ShaderChunk[ \"meshphong_frag\" ].indexOf( 'void main() {' ) );\n\nTHREE.SubsurfaceScatteringShader = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\t\tTHREE.ShaderLib[ \"phong\" ].uniforms,\n\t\t{\n\t\t\t\"thicknessMap\": { value: null },\n\t\t\t\"thicknessColor\": { value: new THREE.Color( 0xffffff ) },\n\t\t\t\"thicknessDistortion\": { value: 0.1 },\n\t\t\t\"thicknessAmbient\": { value: 0.0 },\n\t\t\t\"thicknessAttenuation\": { value: 0.1 },\n\t\t\t\"thicknessPower\": { value: 2.0 },\n\t\t\t\"thicknessScale\": { value: 10.0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: [\n\t\t\"#define USE_UV\",\n\t\tTHREE.ShaderChunk[ \"meshphong_vert\" ],\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\t\t\"#define USE_UV\",\n\t\t\"#define SUBSURFACE\",\n\n\t\tmeshphong_frag_head,\n\n\t\t\"uniform sampler2D thicknessMap;\",\n\t\t\"uniform float thicknessPower;\",\n\t\t\"uniform float thicknessScale;\",\n\t\t\"uniform float thicknessDistortion;\",\n\t\t\"uniform float thicknessAmbient;\",\n\t\t\"uniform float thicknessAttenuation;\",\n\t\t\"uniform vec3 thicknessColor;\",\n\n\t\t\"void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\",\n\t\t\"\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;\",\n\t\t\"\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\",\n\t\t\"\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\",\n\t\t\"\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\",\n\t\t\"\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\",\n\t\t\"}\",\n\n\t\tmeshphong_frag_body.replace( \"#include <lights_fragment_begin>\",\n\n\t\t\treplaceAll(\n\t\t\t\tTHREE.ShaderChunk[ 'lights_fragment_begin' ],\n\t\t\t\t'RE_Direct( directLight, geometry, material, reflectedLight );',\n\t\t\t\t[\n\t\t\t\t\t\"RE_Direct( directLight, geometry, material, reflectedLight );\",\n\n\t\t\t\t\t\"#if defined( SUBSURFACE ) && defined( USE_UV )\",\n\t\t\t\t\t\" RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\",\n\t\t\t\t\t\"#endif\",\n\t\t\t\t].join( \"\\n\" )\n\t\t\t),\n\n\t\t),\n\n\t].join( \"\\n\" ),\n\n};\n"]}