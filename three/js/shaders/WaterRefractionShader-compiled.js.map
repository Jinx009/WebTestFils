{"version":3,"sources":["WaterRefractionShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,sTAAd;;AAEA,MAAM,qBAAN,GAA8B;;AAE7B,WAAU;;AAET,WAAS;AACR,UAAO;AADC,GAFA;;AAMT,UAAQ;AACP,UAAO;AADA,GANC;;AAUT,cAAY;AACX,UAAO;AADI,GAVH;;AAcT,WAAS;AACR,UAAO;AADC,GAdA;;AAkBT,mBAAiB;AAChB,UAAO;AADS;;AAlBR,EAFmB;;AA0B7B,eAAc,CAEb,6BAFa,EAIb,mBAJa,EAKb,6BALa,EAOb,eAPa,EASb,YATa,EAWb,yDAXa,EAab,4EAba,EAeb,GAfa,EAiBZ,IAjBY,CAiBN,IAjBM,CA1Be;;AA6C7B,iBAAgB,CAEf,qBAFe,EAGf,qBAHe,EAIf,6BAJe,EAKf,0BALe,EAOf,mBAPe,EAQf,6BARe,EAUf,iDAVe,EAYf,oGAZe,EAcf,GAde,EAgBf,8CAhBe,EAkBf,mHAlBe,EAoBf,GApBe,EAsBf,eAtBe,EAwBf,4BAxBe,EAyBf,0BAzBe;;AA2Bf;;AAEA,qGA7Be,EA8Bf,kFA9Be,EA+Bf,uFA/Be;;AAiCf;;AAEA,oCAnCe,EAoCf,uBApCe,EAsCf,6CAtCe,EAwCf,+DAxCe,EA0Cf,GA1Ce,EA4Cd,IA5Cc,CA4CR,IA5CQ;AA7Ca,CAA9B","file":"WaterRefractionShader-compiled.js","sourcesContent":["console.warn( \"THREE.WaterRefractionShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.WaterRefractionShader = {\n\n\tuniforms: {\n\n\t\t\"color\": {\n\t\t\tvalue: null\n\t\t},\n\n\t\t\"time\": {\n\t\t\tvalue: 0\n\t\t},\n\n\t\t\"tDiffuse\": {\n\t\t\tvalue: null\n\t\t},\n\n\t\t\"tDudv\": {\n\t\t\tvalue: null\n\t\t},\n\n\t\t\"textureMatrix\": {\n\t\t\tvalue: null\n\t\t}\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"uniform mat4 textureMatrix;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vUvRefraction;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 color;\",\n\t\t\"uniform float time;\",\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDudv;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vUvRefraction;\",\n\n\t\t\"float blendOverlay( float base, float blend ) {\",\n\n\t\t\"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\",\n\n\t\t\"}\",\n\n\t\t\"vec3 blendOverlay( vec3 base, vec3 blend ) {\",\n\n\t\t\"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\" float waveStrength = 0.1;\",\n\t\t\" float waveSpeed = 0.03;\",\n\n\t\t// simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n\n\t\t\"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\",\n\t\t\"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\",\n\t\t\"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n\n\t\t// new uv coords\n\n\t\t\" vec4 uv = vec4( vUvRefraction );\",\n\t\t\" uv.xy += distortion;\",\n\n\t\t\"\tvec4 base = texture2DProj( tDiffuse, uv );\",\n\n\t\t\"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n};\n"]}