{"version":3,"sources":["SobelOperatorShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,oTAAd;AACA;;;;;;;AAOA,MAAM,mBAAN,GAA4B;;AAE3B,WAAU;;AAET,cAAY,EAAE,OAAO,IAAT,EAFH;AAGT,gBAAc,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT;;AAHL,EAFiB;;AAS3B,eAAc,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAQb,4EARa,EAUb,GAVa,EAYZ,IAZY,CAYN,IAZM,CATa;;AAuB3B,iBAAgB,CAEf,6BAFe,EAGf,0BAHe,EAIf,mBAJe,EAMf,eANe,EAQf,+DARe;;AAUf;;AAEA,yDAZe,EAY2C;AAC1D,yDAbe,EAa2C;;AAE1D;;AAEA;;AAEA,wEAnBe,EAoBf,uEApBe,EAqBf,uEArBe;;AAuBf;;AAEA,wEAzBe,EA0Bf,uEA1Be,EA2Bf,uEA3Be;;AA6Bf;;AAEA,wEA/Be,EAgCf,uEAhCe,EAiCf,uEAjCe;;AAmCf;;AAEA,6EArCe,EAsCf,6DAtCe,EAuCf,4DAvCe;;AAyCf;;AAEA,6EA3Ce,EA4Cf,6DA5Ce,EA6Cf,4DA7Ce;;AA+Cf;;AAEA,oEAjDe,EAmDf,uCAnDe,EAqDf,GArDe,EAuDd,IAvDc,CAuDR,IAvDQ;;AAvBW,CAA5B","file":"SobelOperatorShader-compiled.js","sourcesContent":["console.warn( \"THREE.SobelOperatorShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n *\n * As mentioned in the video the Sobel operator expects a grayscale image as input.\n *\n */\n\nTHREE.SobelOperatorShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"resolution\": { value: new THREE.Vector2() }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec2 resolution;\",\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\n\n\t\t// kernel definition (in glsl matrices are filled in column-major order)\n\n\t\t\"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\", // x direction kernel\n\t\t\"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\", // y direction kernel\n\n\t\t// fetch the 3x3 neighbourhood of a fragment\n\n\t\t// first column\n\n\t\t\"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\n\t\t\"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\n\t\t\"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\n\n\t\t// second column\n\n\t\t\"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\n\t\t\"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\n\t\t\"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\n\n\t\t// third column\n\n\t\t\"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\n\t\t\"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\n\t\t\"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\n\n\t\t// gradient value in x direction\n\n\t\t\"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\n\t\t\"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\n\t\t\"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\n\n\t\t// gradient value in y direction\n\n\t\t\"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\n\t\t\"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\n\t\t\"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\n\n\t\t// magnitute of the total gradient\n\n\t\t\"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\n\n\t\t\"\tgl_FragColor = vec4( vec3( G ), 1 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}