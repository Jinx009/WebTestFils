{"version":3,"sources":["ToonShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,2SAAd;AACA;;;;;;;;;AASA,MAAM,WAAN,GAAoB;;AAEnB,WAAU;;AAET,kBAAgB,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAFP;AAGT,oBAAkB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAHT;;AAKT,wBAAsB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EALb;;AAOT,gBAAc,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT;;AAPL,EAFS;;AAanB,eAAc,CAEb,uBAFa,EAGb,wBAHa,EAKb,eALa,EAOb,4DAPa,EAQb,6DARa,EASb,gHATa,EAWb,gDAXa,EAab,+CAba,EAcb,2DAda,EAgBb,+CAhBa,EAkBb,GAlBa,EAoBZ,IApBY,CAoBN,IApBM,CAbK;;AAmCnB,iBAAgB,CAEf,0BAFe,EAIf,4BAJe,EAKf,8BALe,EAOf,kCAPe,EASf,uBATe,EAWf,wBAXe,EAaf,eAbe,EAef,0FAfe,EAgBf,yFAhBe,EAkBf,mFAlBe,EAmBf,6CAnBe,EAqBf,iEArBe,EAsBf,4DAtBe,EAuBf,qCAvBe,EAyBf,4BAzBe,EA2Bf,6DA3Be,EA6Bf,WA7Be,EA+Bf,uFA/Be,EAiCf,GAjCe,EAmCf,GAnCe,EAqCd,IArCc,CAqCR,IArCQ;;AAnCG,CAApB;;AA4EA,MAAM,WAAN,GAAoB;;AAEnB,WAAU;;AAET,kBAAgB,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAFP;AAGT,oBAAkB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAHT;;AAKT,wBAAsB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EALb;;AAOT,gBAAc,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAPL;AAQT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EARN;AAST,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EATN;AAUT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAVN;AAWT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT;;AAXN,EAFS;;AAiBnB,eAAc,CAEb,uBAFa,EAIb,eAJa,EAMb,4EANa,EAOb,gDAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAjBK;;AA8BnB,iBAAgB,CAEf,0BAFe,EAGf,2BAHe,EAIf,2BAJe,EAKf,2BALe,EAMf,2BANe,EAQf,4BARe,EASf,8BATe,EAWf,kCAXe,EAaf,uBAbe,EAef,eAfe,EAiBf,gFAjBe,EAkBf,sEAlBe,EAoBf,0CApBe,EAsBf,sEAtBe,EAwBf,6CAxBe,EA0Bf,IA1Be,EA4Bf,uEA5Be,EA8Bf,6CA9Be,EAgCf,IAhCe,EAkCf,GAlCe,EAoCd,IApCc,CAoCR,IApCQ;;AA9BG,CAApB;;AAsEA,MAAM,kBAAN,GAA2B;;AAE1B,WAAU;;AAET,kBAAgB,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAFP;AAGT,oBAAkB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAHT;;AAKT,wBAAsB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EALb;;AAOT,gBAAc,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAPL;AAQT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EARN;AAST,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EATN;AAUT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAVN;AAWT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT;;AAXN,EAFgB;;AAiB1B,eAAc,CAEb,uBAFa,EAIb,eAJa,EAMb,4EANa,EAOb,gDAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAjBY;;AA8B1B,iBAAgB,CAEf,0BAFe,EAGf,2BAHe,EAIf,2BAJe,EAKf,2BALe,EAMf,2BANe,EAQf,4BARe,EASf,8BATe,EAWf,kCAXe,EAaf,uBAbe,EAef,eAfe,EAiBf,wFAjBe,EAkBf,yFAlBe,EAoBf,0CApBe,EAsBf,yCAtBe,EAwBf,6DAxBe,EA0Bf,6CA1Be,EA4Bf,KA5Be,EA8Bf,IA9Be,EAgCf,yCAhCe,EAkCf,4DAlCe,EAoCf,6CApCe,EAsCf,KAtCe,EAwCf,IAxCe,EA0Cf,yCA1Ce,EA4Cf,kEA5Ce,EA8Cf,6CA9Ce,EAgDf,KAhDe,EAkDf,IAlDe,EAoDf,2CApDe,EAsDf,kEAtDe,EAwDf,6CAxDe,EA0Df,IA1De,EA4Df,IA5De,EA8Df,GA9De,EAgEd,IAhEc,CAgER,IAhEQ;;AA9BU,CAA3B;;AAkGA,MAAM,gBAAN,GAAyB;;AAExB,WAAU;;AAET,kBAAgB,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAFP;AAGT,oBAAkB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAHT;;AAKT,wBAAsB,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EALb;;AAOT,gBAAc,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT,EAPL;AAQT,iBAAe,EAAE,OAAO,IAAI,MAAM,KAAV,CAAiB,QAAjB,CAAT;;AARN,EAFc;;AAcxB,eAAc,CAEb,uBAFa,EAIb,eAJa,EAMb,4EANa,EAOb,gDAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAdU;;AA2BxB,iBAAgB,CAEf,0BAFe,EAGf,2BAHe,EAIf,2BAJe,EAKf,2BALe,EAMf,2BANe,EAQf,4BARe,EASf,8BATe,EAWf,kCAXe,EAaf,uBAbe,EAef,eAfe,EAiBf,uFAjBe,EAkBf,wFAlBe,EAoBf,yCApBe,EAsBf,wCAtBe,EAwBf,6EAxBe,EA0Bf,6CA1Be,EA4Bf,KA5Be,EA8Bf,IA9Be,EAgCf,yCAhCe,EAkCf,yFAlCe,EAoCf,6CApCe,EAsCf,KAtCe,EAwCf,IAxCe,EA0Cf,GA1Ce,EA4Cd,IA5Cc,CA4CR,IA5CQ;;AA3BQ,CAAzB","file":"ToonShader-compiled.js","sourcesContent":["console.warn( \"THREE.ToonShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nTHREE.ToonShader1 = {\n\n\tuniforms: {\n\n\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vNormal;\",\n\t\t\"varying vec3 vRefract;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n\n\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\"\tvec3 I = worldPosition.xyz - cameraPosition;\",\n\t\t\"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\",\n\n\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 uBaseColor;\",\n\n\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"varying vec3 vRefract;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\t\t\"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\n\t\t\"\tintensity += length(lightWeighting) * 0.2;\",\n\n\t\t\"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\",\n\t\t\"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\n\t\t\"\tintensity = intensity * 0.2 + 0.3;\",\n\n\t\t\"\tif ( intensity < 0.50 ) {\",\n\n\t\t\"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\n\n\t\t\"\t} else {\",\n\n\t\t\"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\n\n\t\t\"}\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.ToonShader2 = {\n\n\tuniforms: {\n\n\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\"uBaseColor\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"uLineColor1\": { value: new THREE.Color( 0x808080 ) },\n\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 uBaseColor;\",\n\t\t\"uniform vec3 uLineColor1;\",\n\t\t\"uniform vec3 uLineColor2;\",\n\t\t\"uniform vec3 uLineColor3;\",\n\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\n\t\t\"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\n\t\t\"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\n\n\t\t\"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\",\n\n\t\t\"\t}\",\n\n\t\t\"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\n\n\t\t\"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\",\n\n\t\t\"\t}\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.ToonShaderHatching = {\n\n\tuniforms: {\n\n\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) },\n\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) },\n\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 uBaseColor;\",\n\t\t\"uniform vec3 uLineColor1;\",\n\t\t\"uniform vec3 uLineColor2;\",\n\t\t\"uniform vec3 uLineColor3;\",\n\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\"\tif ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"\tif ( length(lightWeighting) < 0.75 ) {\",\n\n\t\t\"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\",\n\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"\tif ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\",\n\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"\tif ( length(lightWeighting) < 0.3465 ) {\",\n\n\t\t\"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\",\n\n\t\t\"\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.ToonShaderDotted = {\n\n\tuniforms: {\n\n\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) },\n\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 uBaseColor;\",\n\t\t\"uniform vec3 uLineColor1;\",\n\t\t\"uniform vec3 uLineColor2;\",\n\t\t\"uniform vec3 uLineColor3;\",\n\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\"varying vec3 vNormal;\",\n\n\t\t\"void main() {\",\n\n\t\t\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\"if ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"\tif ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\n\n\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}