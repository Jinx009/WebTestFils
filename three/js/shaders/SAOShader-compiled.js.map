{"version":3,"sources":["SAOShader.js"],"names":[],"mappings":"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","file":"SAOShader-compiled.js","sourcesContent":["console.warn( \"THREE.SAOShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * TODO\n */\n\nTHREE.SAOShader = {\n\tdefines: {\n\t\t\"NUM_SAMPLES\": 7,\n\t\t\"NUM_RINGS\": 4,\n\t\t\"NORMAL_TEXTURE\": 0,\n\t\t\"DIFFUSE_TEXTURE\": 0,\n\t\t\"DEPTH_PACKING\": 1,\n\t\t\"PERSPECTIVE_CAMERA\": 1\n\t},\n\tuniforms: {\n\n\t\t\"tDepth\": { value: null },\n\t\t\"tDiffuse\": { value: null },\n\t\t\"tNormal\": { value: null },\n\t\t\"size\": { value: new THREE.Vector2( 512, 512 ) },\n\n\t\t\"cameraNear\": { value: 1 },\n\t\t\"cameraFar\": { value: 100 },\n\t\t\"cameraProjectionMatrix\": { value: new THREE.Matrix4() },\n\t\t\"cameraInverseProjectionMatrix\": { value: new THREE.Matrix4() },\n\n\t\t\"scale\": { value: 1.0 },\n\t\t\"intensity\": { value: 0.1 },\n\t\t\"bias\": { value: 0.5 },\n\n\t\t\"minResolution\": { value: 0.0 },\n\t\t\"kernelRadius\": { value: 100.0 },\n\t\t\"randomSeed\": { value: 0.0 }\n\t},\n\tvertexShader: [\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"#include <common>\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"#if DIFFUSE_TEXTURE == 1\",\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"#endif\",\n\n\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\"#if NORMAL_TEXTURE == 1\",\n\t\t\"uniform sampler2D tNormal;\",\n\t\t\"#endif\",\n\n\t\t\"uniform float cameraNear;\",\n\t\t\"uniform float cameraFar;\",\n\t\t\"uniform mat4 cameraProjectionMatrix;\",\n\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\n\n\t\t\"uniform float scale;\",\n\t\t\"uniform float intensity;\",\n\t\t\"uniform float bias;\",\n\t\t\"uniform float kernelRadius;\",\n\t\t\"uniform float minResolution;\",\n\t\t\"uniform vec2 size;\",\n\t\t\"uniform float randomSeed;\",\n\n\t\t\"// RGBA depth\",\n\n\t\t\"#include <packing>\",\n\n\t\t\"vec4 getDefaultColor( const in vec2 screenPosition ) {\",\n\t\t\"\t#if DIFFUSE_TEXTURE == 1\",\n\t\t\"\treturn texture2D( tDiffuse, vUv );\",\n\t\t\"\t#else\",\n\t\t\"\treturn vec4( 1.0 );\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\"\t#else\",\n\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\"\t#else\",\n\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\n\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\n\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\n\t\t\"\tclipPosition *= clipW; // unprojection.\",\n\n\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\n\t\t\"}\",\n\n\t\t\"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\",\n\t\t\"\t#if NORMAL_TEXTURE == 1\",\n\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\n\t\t\"\t#else\",\n\t\t\"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"float scaleDividedByCameraFar;\",\n\t\t\"float minResolutionMultipliedByCameraFar;\",\n\n\t\t\"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\",\n\t\t\"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\",\n\t\t\"\tfloat viewDistance = length( viewDelta );\",\n\t\t\"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\",\n\n\t\t\"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\",\n\t\t\"}\",\n\n\t\t\"// moving costly divides into consts\",\n\t\t\"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\",\n\t\t\"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\",\n\n\t\t\"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\",\n\t\t\"\t// precompute some variables require in getOcclusion.\",\n\t\t\"\tscaleDividedByCameraFar = scale / cameraFar;\",\n\t\t\"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\",\n\t\t\"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\",\n\n\t\t\"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\",\n\t\t\"\tfloat angle = rand( vUv + randomSeed ) * PI2;\",\n\t\t\"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\",\n\t\t\"\tvec2 radiusStep = radius;\",\n\n\t\t\"\tfloat occlusionSum = 0.0;\",\n\t\t\"\tfloat weightSum = 0.0;\",\n\n\t\t\"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\",\n\t\t\"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\",\n\t\t\"\t\tradius += radiusStep;\",\n\t\t\"\t\tangle += ANGLE_STEP;\",\n\n\t\t\"\t\tfloat sampleDepth = getDepth( sampleUv );\",\n\t\t\"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\"\t\t\tcontinue;\",\n\t\t\"\t\t}\",\n\n\t\t\"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\",\n\t\t\"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\",\n\t\t\"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\",\n\t\t\"\t\tweightSum += 1.0;\",\n\t\t\"\t}\",\n\n\t\t\"\tif( weightSum == 0.0 ) discard;\",\n\n\t\t\"\treturn occlusionSum * ( intensity / weightSum );\",\n\t\t\"}\",\n\n\n\t\t\"void main() {\",\n\t\t\"\tfloat centerDepth = getDepth( vUv );\",\n\t\t\"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\"\t\tdiscard;\",\n\t\t\"\t}\",\n\n\t\t\"\tfloat centerViewZ = getViewZ( centerDepth );\",\n\t\t\"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\",\n\n\t\t\"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\",\n\n\t\t\"\tgl_FragColor = getDefaultColor( vUv );\",\n\t\t\"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\",\n\t\t\"}\"\n\t].join( \"\\n\" )\n};\n"]}