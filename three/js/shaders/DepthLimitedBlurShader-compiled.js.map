{"version":3,"sources":["DepthLimitedBlurShader.js"],"names":[],"mappings":"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","file":"DepthLimitedBlurShader-compiled.js","sourcesContent":["console.warn( \"THREE.DepthLimitedBlurShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * TODO\n */\n\nTHREE.DepthLimitedBlurShader = {\n\tdefines: {\n\t\t\"KERNEL_RADIUS\": 4,\n\t\t\"DEPTH_PACKING\": 1,\n\t\t\"PERSPECTIVE_CAMERA\": 1\n\t},\n\tuniforms: {\n\t\t\"tDiffuse\": { value: null },\n\t\t\"size\": { value: new THREE.Vector2( 512, 512 ) },\n\t\t\"sampleUvOffsets\": { value: [ new THREE.Vector2( 0, 0 ) ] },\n\t\t\"sampleWeights\": { value: [ 1.0 ] },\n\t\t\"tDepth\": { value: null },\n\t\t\"cameraNear\": { value: 10 },\n\t\t\"cameraFar\": { value: 1000 },\n\t\t\"depthCutoff\": { value: 10 },\n\t},\n\tvertexShader: [\n\t\t\"#include <common>\",\n\n\t\t\"uniform vec2 size;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec2 vInvSize;\",\n\n\t\t\"void main() {\",\n\t\t\"\tvUv = uv;\",\n\t\t\"\tvInvSize = 1.0 / size;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"#include <common>\",\n\t\t\"#include <packing>\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\"uniform float cameraNear;\",\n\t\t\"uniform float cameraFar;\",\n\t\t\"uniform float depthCutoff;\",\n\n\t\t\"uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\",\n\t\t\"uniform float sampleWeights[ KERNEL_RADIUS + 1 ];\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec2 vInvSize;\",\n\n\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\"\t#else\",\n\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\"\t#else\",\n\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\"\t#endif\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\t\t\"\tfloat depth = getDepth( vUv );\",\n\t\t\"\tif( depth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\"\t\tdiscard;\",\n\t\t\"\t}\",\n\n\t\t\"\tfloat centerViewZ = -getViewZ( depth );\",\n\t\t\"\tbool rBreak = false, lBreak = false;\",\n\n\t\t\"\tfloat weightSum = sampleWeights[0];\",\n\t\t\"\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\",\n\n\t\t\"\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\",\n\n\t\t\"\t\tfloat sampleWeight = sampleWeights[i];\",\n\t\t\"\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\",\n\n\t\t\"\t\tvec2 sampleUv = vUv + sampleUvOffset;\",\n\t\t\"\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\",\n\n\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\",\n\n\t\t\"\t\tif( ! rBreak ) {\",\n\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\n\t\t\"\t\t\tweightSum += sampleWeight;\",\n\t\t\"\t\t}\",\n\n\t\t\"\t\tsampleUv = vUv - sampleUvOffset;\",\n\t\t\"\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\",\n\n\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\",\n\n\t\t\"\t\tif( ! lBreak ) {\",\n\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\n\t\t\"\t\t\tweightSum += sampleWeight;\",\n\t\t\"\t\t}\",\n\n\t\t\"\t}\",\n\n\t\t\"\tgl_FragColor = diffuseSum / weightSum;\",\n\t\t\"}\"\n\t].join( \"\\n\" )\n};\n\nTHREE.BlurShaderUtils = {\n\n\tcreateSampleWeights: function ( kernelRadius, stdDev ) {\n\n\t\tvar gaussian = function ( x, stdDev ) {\n\n\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * ( stdDev * stdDev ) ) ) / ( Math.sqrt( 2.0 * Math.PI ) * stdDev );\n\n\t\t};\n\n\t\tvar weights = [];\n\n\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\n\n\t\t\tweights.push( gaussian( i, stdDev ) );\n\n\t\t}\n\n\t\treturn weights;\n\n\t},\n\n\tcreateSampleOffsets: function ( kernelRadius, uvIncrement ) {\n\n\t\tvar offsets = [];\n\n\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\n\n\t\t\toffsets.push( uvIncrement.clone().multiplyScalar( i ) );\n\n\t\t}\n\n\t\treturn offsets;\n\n\t},\n\n\tconfigure: function ( material, kernelRadius, stdDev, uvIncrement ) {\n\n\t\tmaterial.defines[ \"KERNEL_RADIUS\" ] = kernelRadius;\n\t\tmaterial.uniforms[ \"sampleUvOffsets\" ].value = THREE.BlurShaderUtils.createSampleOffsets( kernelRadius, uvIncrement );\n\t\tmaterial.uniforms[ \"sampleWeights\" ].value = THREE.BlurShaderUtils.createSampleWeights( kernelRadius, stdDev );\n\t\tmaterial.needsUpdate = true;\n\n\t}\n\n};\n"]}