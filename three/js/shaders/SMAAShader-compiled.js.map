{"version":3,"sources":["SMAAShader.js"],"names":[],"mappings":"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","file":"SMAAShader-compiled.js","sourcesContent":["console.warn( \"THREE.SMAAShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\n * Preset: SMAA 1x Medium (with color edge detection)\n * https://github.com/iryoku/smaa/releases/tag/v2.8\n */\n\nTHREE.SMAAEdgesShader = {\n\n\tdefines: {\n\n\t\t\"SMAA_THRESHOLD\": \"0.1\"\n\n\t},\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"resolution\": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"uniform vec2 resolution;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[ 3 ];\",\n\n\t\t\"void SMAAEdgeDetectionVS( vec2 texcoord ) {\",\n\t\t\"\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );\", // WebGL port note: Changed sign in W component\n\t\t\"\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );\", // WebGL port note: Changed sign in W component\n\t\t\"\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );\", // WebGL port note: Changed sign in W component\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tSMAAEdgeDetectionVS( vUv );\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[ 3 ];\",\n\n\t\t\"vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {\",\n\t\t\"\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );\",\n\n\t\t// Calculate color deltas:\n\t\t\"\tvec4 delta;\",\n\t\t\"\tvec3 C = texture2D( colorTex, texcoord ).rgb;\",\n\n\t\t\"\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;\",\n\t\t\"\tvec3 t = abs( C - Cleft );\",\n\t\t\"\tdelta.x = max( max( t.r, t.g ), t.b );\",\n\n\t\t\"\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;\",\n\t\t\"\tt = abs( C - Ctop );\",\n\t\t\"\tdelta.y = max( max( t.r, t.g ), t.b );\",\n\n\t\t// We do the usual threshold:\n\t\t\"\tvec2 edges = step( threshold, delta.xy );\",\n\n\t\t// Then discard if there is no edge:\n\t\t\"\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )\",\n\t\t\"\t\tdiscard;\",\n\n\t\t// Calculate right and bottom deltas:\n\t\t\"\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;\",\n\t\t\"\tt = abs( C - Cright );\",\n\t\t\"\tdelta.z = max( max( t.r, t.g ), t.b );\",\n\n\t\t\"\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;\",\n\t\t\"\tt = abs( C - Cbottom );\",\n\t\t\"\tdelta.w = max( max( t.r, t.g ), t.b );\",\n\n\t\t// Calculate the maximum delta in the direct neighborhood:\n\t\t\"\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );\",\n\n\t\t// Calculate left-left and top-top deltas:\n\t\t\"\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;\",\n\t\t\"\tt = abs( C - Cleftleft );\",\n\t\t\"\tdelta.z = max( max( t.r, t.g ), t.b );\",\n\n\t\t\"\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;\",\n\t\t\"\tt = abs( C - Ctoptop );\",\n\t\t\"\tdelta.w = max( max( t.r, t.g ), t.b );\",\n\n\t\t// Calculate the final maximum delta:\n\t\t\"\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );\",\n\n\t\t// Local contrast adaptation in action:\n\t\t\"\tedges.xy *= step( 0.5 * maxDelta, delta.xy );\",\n\n\t\t\"\treturn vec4( edges, 0.0, 0.0 );\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.SMAAWeightsShader = {\n\n\tdefines: {\n\n\t\t\"SMAA_MAX_SEARCH_STEPS\": \"8\",\n\t\t\"SMAA_AREATEX_MAX_DISTANCE\": \"16\",\n\t\t\"SMAA_AREATEX_PIXEL_SIZE\": \"( 1.0 / vec2( 160.0, 560.0 ) )\",\n\t\t\"SMAA_AREATEX_SUBTEX_SIZE\": \"( 1.0 / 7.0 )\"\n\n\t},\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"tArea\": { value: null },\n\t\t\"tSearch\": { value: null },\n\t\t\"resolution\": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"uniform vec2 resolution;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[ 3 ];\",\n\t\t\"varying vec2 vPixcoord;\",\n\n\t\t\"void SMAABlendingWeightCalculationVS( vec2 texcoord ) {\",\n\t\t\"\tvPixcoord = texcoord / resolution;\",\n\n\t\t// We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n\t\t\"\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );\", // WebGL port note: Changed sign in Y and W components\n\t\t\"\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );\", // WebGL port note: Changed sign in Y and W components\n\n\t\t// And these for the searches, they indicate the ends of the loops:\n\t\t\"\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tSMAABlendingWeightCalculationVS( vUv );\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tArea;\",\n\t\t\"uniform sampler2D tSearch;\",\n\t\t\"uniform vec2 resolution;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[3];\",\n\t\t\"varying vec2 vPixcoord;\",\n\n\t\t\"#if __VERSION__ == 100\",\n\t\t\"vec2 round( vec2 x ) {\",\n\t\t\"\treturn sign( x ) * floor( abs( x ) + 0.5 );\",\n\t\t\"}\",\n\t\t\"#endif\",\n\n\t\t\"float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {\",\n\t\t// Not required if searchTex accesses are set to point:\n\t\t// float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\n\t\t// e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\n\t\t//     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\n\t\t\"\te.r = bias + e.r * scale;\",\n\t\t\"\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;\",\n\t\t\"}\",\n\n\t\t\"float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\n\t\t/**\n\t\t\t* @PSEUDO_GATHER4\n\t\t\t* This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\n\t\t\t* sample between edge, thus fetching four edges in a row.\n\t\t\t* Sampling with different offsets in each direction allows to disambiguate\n\t\t\t* which edges are active from the four fetched ones.\n\t\t\t*/\n\t\t\"\tvec2 e = vec2( 0.0, 1.0 );\",\n\n\t\t\"\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\", // WebGL port note: Changed while to for\n\t\t\"\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\n\t\t\"\t\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;\",\n\t\t\"\t\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;\",\n\t\t\"\t}\",\n\n\t\t// We correct the previous (-0.25, -0.125) offset we applied:\n\t\t\"\ttexcoord.x += 0.25 * resolution.x;\",\n\n\t\t// The searches are bias by 1, so adjust the coords accordingly:\n\t\t\"\ttexcoord.x += resolution.x;\",\n\n\t\t// Disambiguate the length added by the last step:\n\t\t\"\ttexcoord.x += 2.0 * resolution.x;\", // Undo last step\n\t\t\"\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);\",\n\n\t\t\"\treturn texcoord.x;\",\n\t\t\"}\",\n\n\t\t\"float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\n\t\t\"\tvec2 e = vec2( 0.0, 1.0 );\",\n\n\t\t\"\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\", // WebGL port note: Changed while to for\n\t\t\"\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\n\t\t\"\t\ttexcoord += vec2( 2.0, 0.0 ) * resolution;\",\n\t\t\"\t\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;\",\n\t\t\"\t}\",\n\n\t\t\"\ttexcoord.x -= 0.25 * resolution.x;\",\n\t\t\"\ttexcoord.x -= resolution.x;\",\n\t\t\"\ttexcoord.x -= 2.0 * resolution.x;\",\n\t\t\"\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );\",\n\n\t\t\"\treturn texcoord.x;\",\n\t\t\"}\",\n\n\t\t\"float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\n\t\t\"\tvec2 e = vec2( 1.0, 0.0 );\",\n\n\t\t\"\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\", // WebGL port note: Changed while to for\n\t\t\"\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\n\t\t\"\t\ttexcoord += vec2( 0.0, 2.0 ) * resolution;\", // WebGL port note: Changed sign\n\t\t\"\t\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;\",\n\t\t\"\t}\",\n\n\t\t\"\ttexcoord.y -= 0.25 * resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y -= resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y -= 2.0 * resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );\", // WebGL port note: Changed sign\n\n\t\t\"\treturn texcoord.y;\",\n\t\t\"}\",\n\n\t\t\"float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\",\n\t\t\"\tvec2 e = vec2( 1.0, 0.0 );\",\n\n\t\t\"\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {\", // WebGL port note: Changed while to for\n\t\t\"\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;\",\n\t\t\"\t\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;\", // WebGL port note: Changed sign\n\t\t\"\t\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;\",\n\t\t\"\t}\",\n\n\t\t\"\ttexcoord.y += 0.25 * resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y += resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y += 2.0 * resolution.y;\", // WebGL port note: Changed sign\n\t\t\"\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );\", // WebGL port note: Changed sign\n\n\t\t\"\treturn texcoord.y;\",\n\t\t\"}\",\n\n\t\t\"vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {\",\n\t\t// Rounding prevents precision errors of bilinear filtering:\n\t\t\"\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;\",\n\n\t\t// We do a scale and bias for mapping to texel space:\n\t\t\"\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );\",\n\n\t\t// Move to proper place, according to the subpixel offset:\n\t\t\"\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;\",\n\n\t\t\"\treturn texture2D( areaTex, texcoord, 0.0 ).rg;\",\n\t\t\"}\",\n\n\t\t\"vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {\",\n\t\t\"\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );\",\n\n\t\t\"\tvec2 e = texture2D( edgesTex, texcoord ).rg;\",\n\n\t\t\"\tif ( e.g > 0.0 ) {\", // Edge at north\n\t\t\"\t\tvec2 d;\",\n\n\t\t// Find the distance to the left:\n\t\t\"\t\tvec2 coords;\",\n\t\t\"\t\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );\",\n\t\t\"\t\tcoords.y = offset[ 1 ].y;\", // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\n\t\t\"\t\td.x = coords.x;\",\n\n\t\t// Now fetch the left crossing edges, two at a time using bilinear\n\t\t// filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n\t\t// discern what value each edge has:\n\t\t\"\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;\",\n\n\t\t// Find the distance to the right:\n\t\t\"\t\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );\",\n\t\t\"\t\td.y = coords.x;\",\n\n\t\t// We want the distances to be in pixel units (doing this here allow to\n\t\t// better interleave arithmetic and memory accesses):\n\t\t\"\t\td = d / resolution.x - pixcoord.x;\",\n\n\t\t// SMAAArea below needs a sqrt, as the areas texture is compressed\n\t\t// quadratically:\n\t\t\"\t\tvec2 sqrt_d = sqrt( abs( d ) );\",\n\n\t\t// Fetch the right crossing edges:\n\t\t\"\t\tcoords.y -= 1.0 * resolution.y;\", // WebGL port note: Added\n\t\t\"\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;\",\n\n\t\t// Ok, we know how this pattern looks like, now it is time for getting\n\t\t// the actual area:\n\t\t\"\t\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );\",\n\t\t\"\t}\",\n\n\t\t\"\tif ( e.r > 0.0 ) {\", // Edge at west\n\t\t\"\t\tvec2 d;\",\n\n\t\t// Find the distance to the top:\n\t\t\"\t\tvec2 coords;\",\n\n\t\t\"\t\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );\",\n\t\t\"\t\tcoords.x = offset[ 0 ].x;\", // offset[1].x = texcoord.x - 0.25 * resolution.x;\n\t\t\"\t\td.x = coords.y;\",\n\n\t\t// Fetch the top crossing edges:\n\t\t\"\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;\",\n\n\t\t// Find the distance to the bottom:\n\t\t\"\t\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );\",\n\t\t\"\t\td.y = coords.y;\",\n\n\t\t// We want the distances to be in pixel units:\n\t\t\"\t\td = d / resolution.y - pixcoord.y;\",\n\n\t\t// SMAAArea below needs a sqrt, as the areas texture is compressed\n\t\t// quadratically:\n\t\t\"\t\tvec2 sqrt_d = sqrt( abs( d ) );\",\n\n\t\t// Fetch the bottom crossing edges:\n\t\t\"\t\tcoords.y -= 1.0 * resolution.y;\", // WebGL port note: Added\n\t\t\"\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;\",\n\n\t\t// Get the area for this direction:\n\t\t\"\t\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );\",\n\t\t\"\t}\",\n\n\t\t\"\treturn weights;\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.SMAABlendShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"tColor\": { value: null },\n\t\t\"resolution\": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"uniform vec2 resolution;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[ 2 ];\",\n\n\t\t\"void SMAANeighborhoodBlendingVS( vec2 texcoord ) {\",\n\t\t\"\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );\", // WebGL port note: Changed sign in W component\n\t\t\"\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );\", // WebGL port note: Changed sign in W component\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tSMAANeighborhoodBlendingVS( vUv );\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tColor;\",\n\t\t\"uniform vec2 resolution;\",\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"varying vec4 vOffset[ 2 ];\",\n\n\t\t\"vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {\",\n\t\t// Fetch the blending weights for current pixel:\n\t\t\"\tvec4 a;\",\n\t\t\"\ta.xz = texture2D( blendTex, texcoord ).xz;\",\n\t\t\"\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;\",\n\t\t\"\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;\",\n\n\t\t// Is there any blending weight with a value greater than 0.0?\n\t\t\"\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {\",\n\t\t\"\t\treturn texture2D( colorTex, texcoord, 0.0 );\",\n\t\t\"\t} else {\",\n\t\t// Up to 4 lines can be crossing a pixel (one through each edge). We\n\t\t// favor blending by choosing the line with the maximum weight for each\n\t\t// direction:\n\t\t\"\t\tvec2 offset;\",\n\t\t\"\t\toffset.x = a.a > a.b ? a.a : -a.b;\", // left vs. right\n\t\t\"\t\toffset.y = a.g > a.r ? -a.g : a.r;\", // top vs. bottom // WebGL port note: Changed signs\n\n\t\t// Then we go in the direction that has the maximum weight:\n\t\t\"\t\tif ( abs( offset.x ) > abs( offset.y )) {\", // horizontal vs. vertical\n\t\t\"\t\t\toffset.y = 0.0;\",\n\t\t\"\t\t} else {\",\n\t\t\"\t\t\toffset.x = 0.0;\",\n\t\t\"\t\t}\",\n\n\t\t// Fetch the opposite color and lerp by hand:\n\t\t\"\t\tvec4 C = texture2D( colorTex, texcoord, 0.0 );\",\n\t\t\"\t\ttexcoord += sign( offset ) * resolution;\",\n\t\t\"\t\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );\",\n\t\t\"\t\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );\",\n\n\t\t// WebGL port note: Added gamma correction\n\t\t\"\t\tC.xyz = pow(C.xyz, vec3(2.2));\",\n\t\t\"\t\tCop.xyz = pow(Cop.xyz, vec3(2.2));\",\n\t\t\"\t\tvec4 mixed = mix(C, Cop, s);\",\n\t\t\"\t\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));\",\n\n\t\t\"\t\treturn mixed;\",\n\t\t\"\t}\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}