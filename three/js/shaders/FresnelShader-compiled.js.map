{"version":3,"sources":["FresnelShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,8SAAd;AACA;;;;AAIA,MAAM,aAAN,GAAsB;;AAErB,WAAU;;AAET,sBAAoB,EAAE,OAAO,IAAT,EAFX;AAGT,kBAAgB,EAAE,OAAO,GAAT,EAHP;AAIT,mBAAiB,EAAE,OAAO,GAAT,EAJR;AAKT,mBAAiB,EAAE,OAAO,GAAT,EALR;AAMT,WAAS,EAAE,OAAO,IAAT;;AANA,EAFW;;AAYrB,eAAc,CAEb,iCAFa,EAGb,6BAHa,EAIb,8BAJa,EAKb,8BALa,EAOb,wBAPa,EAQb,2BARa,EASb,kCATa,EAWb,eAXa,EAab,6DAba,EAcb,4DAda,EAgBb,+GAhBa,EAkBb,+CAlBa,EAoBb,wCApBa,EAqBb,0EArBa,EAsBb,iFAtBa,EAuBb,iFAvBa,EAwBb,qHAxBa,EA0Bb,+CA1Ba,EA4Bb,GA5Ba,EA8BZ,IA9BY,CA8BN,IA9BM,CAZO;;AA4CrB,iBAAgB,CAEf,4BAFe,EAIf,wBAJe,EAKf,2BALe,EAMf,kCANe,EAQf,eARe,EAUf,gFAVe,EAWf,qCAXe,EAaf,qFAbe,EAcf,qFAde,EAef,qFAfe,EAiBf,8FAjBe,EAmBf,GAnBe,EAqBd,IArBc,CAqBR,IArBQ;;AA5CK,CAAtB","file":"FresnelShader-compiled.js","sourcesContent":["console.warn( \"THREE.FresnelShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Based on Nvidia Cg tutorial\n */\n\nTHREE.FresnelShader = {\n\n\tuniforms: {\n\n\t\t\"mRefractionRatio\": { value: 1.02 },\n\t\t\"mFresnelBias\": { value: 0.1 },\n\t\t\"mFresnelPower\": { value: 2.0 },\n\t\t\"mFresnelScale\": { value: 1.0 },\n\t\t\"tCube\": { value: null }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"uniform float mRefractionRatio;\",\n\t\t\"uniform float mFresnelBias;\",\n\t\t\"uniform float mFresnelScale;\",\n\t\t\"uniform float mFresnelPower;\",\n\n\t\t\"varying vec3 vReflect;\",\n\t\t\"varying vec3 vRefract[3];\",\n\t\t\"varying float vReflectionFactor;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\n\t\t\"\tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n\n\t\t\"\tvec3 I = worldPosition.xyz - cameraPosition;\",\n\n\t\t\"\tvReflect = reflect( I, worldNormal );\",\n\t\t\"\tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\",\n\t\t\"\tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\",\n\t\t\"\tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\",\n\t\t\"\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\",\n\n\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform samplerCube tCube;\",\n\n\t\t\"varying vec3 vReflect;\",\n\t\t\"varying vec3 vRefract[3];\",\n\t\t\"varying float vReflectionFactor;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\n\t\t\"\tvec4 refractedColor = vec4( 1.0 );\",\n\n\t\t\"\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\",\n\t\t\"\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\",\n\t\t\"\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\",\n\n\t\t\"\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}