{"version":3,"sources":["BokehShader2.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,6SAAd;AACA;;;;;;;;AAUA,MAAM,WAAN,GAAoB;;AAEnB,WAAU;;AAET,kBAAgB,EAAE,OAAO,GAAT,EAFP;AAGT,mBAAiB,EAAE,OAAO,GAAT,EAHR;;AAKT,gBAAc,EAAE,OAAO,GAAT,EALL;AAMT,iBAAe,EAAE,OAAO,IAAT,EANN;AAOT,WAAS,EAAE,OAAO,GAAT,EAPA;;AAST,YAAU,EAAE,OAAO,IAAT,EATD;AAUT,YAAU,EAAE,OAAO,IAAT,EAVD;;AAYT,aAAW,EAAE,OAAO,GAAT,EAZF;;AAcT,eAAa,EAAE,OAAO,CAAT,EAdJ;AAeT,eAAa,EAAE,OAAO,CAAT,EAfJ;AAgBT,gBAAc,EAAE,OAAO,CAAT,EAhBL;AAiBT,eAAa,EAAE,OAAO,CAAT,EAjBJ;;AAmBT,eAAa,EAAE,OAAO,GAAT,EAnBJ;AAoBT,UAAQ,EAAE,OAAO,GAAT,EApBC;AAqBT,UAAQ,EAAE,OAAO,GAAT,EArBC;AAsBT,YAAU,EAAE,OAAO,GAAT,EAtBD;;AAwBT,WAAS,EAAE,OAAO,GAAT,EAxBA;AAyBT,UAAQ,EAAE,OAAO,GAAT,EAzBC;;AA2BT,WAAS,EAAE,OAAO,CAAT,EA3BA;AA4BT,eAAa,EAAE,OAAO,MAAT,EA5BJ;AA6BT,cAAY,EAAE,OAAO,CAAT,EA7BH;;AA+BT,iBAAe,EAAE,OAAO,CAAT,EA/BN;AAgCT,iBAAe,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT;;AAhCN,EAFS;;AAuCnB,eAAc,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAOb,4EAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAvCK;;AAoDnB,iBAAgB,CAEf,mBAFe,EAIf,mBAJe,EAMf,2BANe,EAOf,2BAPe,EAQf,6BARe,EASf,8BATe,EAWf,qGAXe,EAYf,iDAZe,EAaf,qCAbe,EAcf,2GAde,EAgBf,IAhBe,EAiBf,kGAjBe,EAkBf,IAlBe,EAoBf,+CApBe,EAqBf,4CArBe,EAuBf,8CAvBe,EAwBf,kBAxBe,EA0Bf,0DA1Be,EA2Bf,uCA3Be,EA6Bf,6CA7Be,EA+Bf,mDA/Be,EAgCf,+CAhCe,EAiCf,yDAjCe,EAkCf,8CAlCe,EAmCf,wDAnCe,EAqCf,yEArCe,EAuCf,yDAvCe,EAyCf,iDAzCe,EA0Cf,gDA1Ce,EA2Cf,sDA3Ce,EA6Cf,2BA7Ce,EA8Cf,iDA9Ce,EAgDf,2BAhDe,EAiDf,mFAjDe,EAkDf,4CAlDe,EAoDf,wBApDe,EAqDf,wDArDe,EAuDf,kDAvDe,EAwDf,wCAxDe,EA0Df,wCA1De,EA2Df,gEA3De,EA6Df,yEA7De,EA+Df,0BA/De,EAiEf,kDAjEe,EAkEf,yCAlEe,EAoEf,IApEe,EAqEf,2BArEe,EAsEf,mDAtEe,EAuEf,iDAvEe,EAwEf,IAxEe,EA0Ef,uDA1Ee,EA2Ef,+CA3Ee,EA6Ef,8CA7Ee,EA+Ef,4BA/Ee,EAgFf,qBAhFe,EAiFf,oCAjFe,EAkFf,0DAlFe,EAmFf,0DAnFe,EAoFf,0DApFe,EAqFf,0DArFe,EAsFf,0DAtFe,EAuFf,0DAvFe,EAyFf,2BAzFe,EA2Ff,8CA3Fe,EA6Ff,yBA7Fe,EA8Ff,wBA9Fe,EAgGf,0BAhGe,EAiGf,0BAjGe,EAkGf,0BAlGe,EAmGf,0BAnGe,EAqGf,gDArGe,EAuGf,+BAvGe,EAyGf,0BAzGe,EA0Gf,+BA1Ge,EA4Gf,gDA5Ge,EA6Gf,qBA7Ge,EA+Gf,qCA/Ge,EAgHf,GAhHe,EAkHf,6BAlHe,EAmHf,uBAnHe,EAoHf,iBApHe,EAqHf,mBArHe,EAsHf,kBAtHe,EAwHf,+DAxHe,EA0Hf,iCA1He,EA2Hf,iCA3He,EA4Hf,iCA5He,EA8Hf,iCA9He,EA+Hf,iCA/He,EAgIf,iCAhIe,EAkIf,iCAlIe,EAmIf,iCAnIe,EAoIf,iCApIe,EAsIf,wEAtIe,EAuIf,wEAvIe,EAwIf,wEAxIe,EA2If,6BA3Ie,EA4If,wDA5Ie,EA6If,yBA7Ie,EA8If,IA9Ie,EAgJf,YAhJe,EAiJf,GAjJe,EAoJf,sCApJe,EAqJf,0BArJe,EAuJf,wBAvJe,EAwJf,yDAxJe,EA0Jf,wEA1Je,EA2Jf,4EA3Je,EA4Jf,2EA5Je,EA8Jf,2CA9Je,EA+Jf,sCA/Je,EAgKf,iDAhKe,EAiKf,6CAjKe,EAkKf,GAlKe,EAoKf,sDApKe,EAqKf,4DArKe,EAsKf,sDAtKe,EAuKf,0DAvKe,EAyKf,gDAzKe,EA0Kf,0DA1Ke,EA4Kf,cA5Ke,EA6Kf,GA7Ke,EA+Kf,gCA/Ke,EAgLf,0DAhLe,EAiLf,GAjLe,EAoLf,oBApLe,EAqLf,gDArLe,EAsLf,8EAtLe,EAuLf,8BAvLe,EAwLf,GAxLe,EA0Lf,iGA1Le,EA2Lf,+BA3Le,EA4Lf,4CA5Le,EA6Lf,4BA7Le,EA8Lf,4BA9Le,EA+Lf,iBA/Le,EAgMf,kBAhMe,EAiMf,2BAjMe,EAkMf,IAlMe,EAmMf,+EAnMe,EAoMf,8CApMe,EAqMf,GArMe,EAuMf,eAvMe,EAwMf,4BAxMe,EA0Mf,uDA1Me,EA4Mf,iBA5Me,EA6Mf,qBA7Me,EA8Mf,sCA9Me,EA+Mf,IA/Me,EAiNf,4BAjNe,EAmNf,6BAnNe,EAqNf,qBArNe,EAuNf,wDAvNe,EAyNf,IAzNe,EA2Nf,iCA3Ne,EA6Nf,oBA7Ne,EA+Nf,mBA/Ne,EAgOf,0CAhOe,EAiOf,gDAjOe,EAkOf,kDAlOe,EAmOf,2BAnOe,EAoOf,WApOe,EAqOf,gDArOe,EAsOf,iDAtOe,EAuOf,0CAvOe,EAyOf,0BAzOe,EA0Of,0BA1Oe,EA2Of,kCA3Oe,EA6Of,sBA7Oe,EA8Of,IA9Oe,EAgPf,8BAhPe,EAkPf,0CAlPe,EAoPf,sFApPe,EAsPf,sCAtPe,EAwPf,qDAxPe,EAyPf,sDAzPe,EA2Pf,gCA3Pe,EA6Pf,wBA7Pe,EA+Pf,oBA/Pe,EAgQf,8BAhQe,EAiQf,wCAjQe,EAkQf,WAlQe,EAmQf,wCAnQe,EAoQf,kBApQe,EAqQf,oBArQe,EAuQf,sCAvQe,EAwQf,mBAxQe,EAyQf,+BAzQe,EA2Qf,iDA3Qe,EA4Qf,kCA5Qe,EA6Qf,oEA7Qe,EA8Qf,MA9Qe,EA+Qf,iBA/Qe,EAgRf,KAhRe,EAkRf,sCAlRe,EAmRf,IAnRe,EAqRf,mBArRe,EAsRf,uCAtRe,EAuRf,IAvRe,EAyRf,oBAzRe,EA0Rf,sBA1Re,EA2Rf,IA3Re,EA6Rf,0BA7Re,EA8Rf,wBA9Re,EA+Rf,IA/Re,EAiSd,IAjSc,CAiSR,IAjSQ;;AApDG,CAApB;;AAyVA,MAAM,gBAAN,GAAyB;;AAExB,WAAU;;AAET,WAAS,EAAE,OAAO,GAAT,EAFA;AAGT,UAAQ,EAAE,OAAO,MAAT;;AAHC,EAFc;;AASxB,eAAc,CAEb,4BAFa,EAIb,eAJa,EAMb,0BANa,EAOb,4BAPa,EASb,gCATa,EAWb,GAXa,EAaZ,IAbY,CAaN,IAbM,CATU;;AAwBxB,iBAAgB,CAEf,sBAFe,EAGf,qBAHe,EAKf,4BALe,EAOf,eAPe,EASf,8DATe,EAUf,6CAVe,EAYf,IAZe,EAcd,IAdc,CAcR,IAdQ;;AAxBQ,CAAzB","file":"BokehShader2-compiled.js","sourcesContent":["console.warn( \"THREE.BokehShader2: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Depth-of-field shader with bokeh\n * ported from GLSL shader by Martins Upitis\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\n *\n * Requires #define RINGS and SAMPLES integers\n */\n\n\n\nTHREE.BokehShader = {\n\n\tuniforms: {\n\n\t\t\"textureWidth\": { value: 1.0 },\n\t\t\"textureHeight\": { value: 1.0 },\n\n\t\t\"focalDepth\": { value: 1.0 },\n\t\t\"focalLength\": { value: 24.0 },\n\t\t\"fstop\": { value: 0.9 },\n\n\t\t\"tColor\": { value: null },\n\t\t\"tDepth\": { value: null },\n\n\t\t\"maxblur\": { value: 1.0 },\n\n\t\t\"showFocus\": { value: 0 },\n\t\t\"manualdof\": { value: 0 },\n\t\t\"vignetting\": { value: 0 },\n\t\t\"depthblur\": { value: 0 },\n\n\t\t\"threshold\": { value: 0.5 },\n\t\t\"gain\": { value: 2.0 },\n\t\t\"bias\": { value: 0.5 },\n\t\t\"fringe\": { value: 0.7 },\n\n\t\t\"znear\": { value: 0.1 },\n\t\t\"zfar\": { value: 100 },\n\n\t\t\"noise\": { value: 1 },\n\t\t\"dithering\": { value: 0.0001 },\n\t\t\"pentagon\": { value: 0 },\n\n\t\t\"shaderFocus\": { value: 1 },\n\t\t\"focusCoords\": { value: new THREE.Vector2() }\n\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#include <common>\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"uniform sampler2D tColor;\",\n\t\t\"uniform sampler2D tDepth;\",\n\t\t\"uniform float textureWidth;\",\n\t\t\"uniform float textureHeight;\",\n\n\t\t\"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\",\n\t\t\"uniform float focalLength; //focal length in mm\",\n\t\t\"uniform float fstop; //f-stop value\",\n\t\t\"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\",\n\n\t\t\"/*\",\n\t\t\"make sure that these two values are the same for your camera, otherwise distances will be wrong.\",\n\t\t\"*/\",\n\n\t\t\"uniform float znear; // camera clipping start\",\n\t\t\"uniform float zfar; // camera clipping end\",\n\n\t\t\"//------------------------------------------\",\n\t\t\"//user variables\",\n\n\t\t\"const int samples = SAMPLES; //samples on the first ring\",\n\t\t\"const int rings = RINGS; //ring count\",\n\n\t\t\"const int maxringsamples = rings * samples;\",\n\n\t\t\"uniform bool manualdof; // manual dof calculation\",\n\t\t\"float ndofstart = 1.0; // near dof blur start\",\n\t\t\"float ndofdist = 2.0; // near dof blur falloff distance\",\n\t\t\"float fdofstart = 1.0; // far dof blur start\",\n\t\t\"float fdofdist = 3.0; // far dof blur falloff distance\",\n\n\t\t\"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\",\n\n\t\t\"uniform bool vignetting; // use optical lens vignetting\",\n\n\t\t\"float vignout = 1.3; // vignetting outer border\",\n\t\t\"float vignin = 0.0; // vignetting inner border\",\n\t\t\"float vignfade = 22.0; // f-stops till vignete fades\",\n\n\t\t\"uniform bool shaderFocus;\",\n\t\t\"// disable if you use external focalDepth value\",\n\n\t\t\"uniform vec2 focusCoords;\",\n\t\t\"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\",\n\t\t\"// if center of screen use vec2(0.5, 0.5);\",\n\n\t\t\"uniform float maxblur;\",\n\t\t\"//clamp value of max blur (0.0 = no blur, 1.0 default)\",\n\n\t\t\"uniform float threshold; // highlight threshold;\",\n\t\t\"uniform float gain; // highlight gain;\",\n\n\t\t\"uniform float bias; // bokeh edge bias\",\n\t\t\"uniform float fringe; // bokeh chromatic aberration / fringing\",\n\n\t\t\"uniform bool noise; //use noise instead of pattern for sample dithering\",\n\n\t\t\"uniform float dithering;\",\n\n\t\t\"uniform bool depthblur; // blur the depth buffer\",\n\t\t\"float dbsize = 1.25; // depth blur size\",\n\n\t\t\"/*\",\n\t\t\"next part is experimental\",\n\t\t\"not looking good with small sample and ring count\",\n\t\t\"looks okay starting from samples = 4, rings = 4\",\n\t\t\"*/\",\n\n\t\t\"uniform bool pentagon; //use pentagon as bokeh shape?\",\n\t\t\"float feather = 0.4; //pentagon shape feather\",\n\n\t\t\"//------------------------------------------\",\n\n\t\t\"float penta(vec2 coords) {\",\n\t\t\"\t//pentagonal shape\",\n\t\t\"\tfloat scale = float(rings) - 1.3;\",\n\t\t\"\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\",\n\t\t\"\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\",\n\t\t\"\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\",\n\t\t\"\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\",\n\t\t\"\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\",\n\t\t\"\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\",\n\n\t\t\"\tvec4  one = vec4( 1.0 );\",\n\n\t\t\"\tvec4 P = vec4((coords),vec2(scale, scale));\",\n\n\t\t\"\tvec4 dist = vec4(0.0);\",\n\t\t\"\tfloat inorout = -4.0;\",\n\n\t\t\"\tdist.x = dot( P, HS0 );\",\n\t\t\"\tdist.y = dot( P, HS1 );\",\n\t\t\"\tdist.z = dot( P, HS2 );\",\n\t\t\"\tdist.w = dot( P, HS3 );\",\n\n\t\t\"\tdist = smoothstep( -feather, feather, dist );\",\n\n\t\t\"\tinorout += dot( dist, one );\",\n\n\t\t\"\tdist.x = dot( P, HS4 );\",\n\t\t\"\tdist.y = HS5.w - abs( P.z );\",\n\n\t\t\"\tdist = smoothstep( -feather, feather, dist );\",\n\t\t\"\tinorout += dist.x;\",\n\n\t\t\"\treturn clamp( inorout, 0.0, 1.0 );\",\n\t\t\"}\",\n\n\t\t\"float bdepth(vec2 coords) {\",\n\t\t\"\t// Depth buffer blur\",\n\t\t\"\tfloat d = 0.0;\",\n\t\t\"\tfloat kernel[9];\",\n\t\t\"\tvec2 offset[9];\",\n\n\t\t\"\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\",\n\n\t\t\"\toffset[0] = vec2(-wh.x,-wh.y);\",\n\t\t\"\toffset[1] = vec2( 0.0, -wh.y);\",\n\t\t\"\toffset[2] = vec2( wh.x -wh.y);\",\n\n\t\t\"\toffset[3] = vec2(-wh.x,  0.0);\",\n\t\t\"\toffset[4] = vec2( 0.0,   0.0);\",\n\t\t\"\toffset[5] = vec2( wh.x,  0.0);\",\n\n\t\t\"\toffset[6] = vec2(-wh.x, wh.y);\",\n\t\t\"\toffset[7] = vec2( 0.0,  wh.y);\",\n\t\t\"\toffset[8] = vec2( wh.x, wh.y);\",\n\n\t\t\"\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\",\n\t\t\"\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\",\n\t\t\"\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\",\n\n\n\t\t\"\tfor( int i=0; i<9; i++ ) {\",\n\t\t\"\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;\",\n\t\t\"\t\td += tmp * kernel[i];\",\n\t\t\"\t}\",\n\n\t\t\"\treturn d;\",\n\t\t\"}\",\n\n\n\t\t\"vec3 color(vec2 coords,float blur) {\",\n\t\t\"\t//processing the sample\",\n\n\t\t\"\tvec3 col = vec3(0.0);\",\n\t\t\"\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\",\n\n\t\t\"\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\",\n\t\t\"\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\",\n\t\t\"\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\",\n\n\t\t\"\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\",\n\t\t\"\tfloat lum = dot(col.rgb, lumcoeff);\",\n\t\t\"\tfloat thresh = max((lum-threshold)*gain, 0.0);\",\n\t\t\"\treturn col+mix(vec3(0.0),col,thresh*blur);\",\n\t\t\"}\",\n\n\t\t\"vec3 debugFocus(vec3 col, float blur, float depth) {\",\n\t\t\"\tfloat edge = 0.002*depth; //distance based edge smoothing\",\n\t\t\"\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\",\n\t\t\"\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\",\n\n\t\t\"\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\",\n\t\t\"\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\",\n\n\t\t\"\treturn col;\",\n\t\t\"}\",\n\n\t\t\"float linearize(float depth) {\",\n\t\t\"\treturn -zfar * znear / (depth * (zfar - znear) - zfar);\",\n\t\t\"}\",\n\n\n\t\t\"float vignette() {\",\n\t\t\"\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));\",\n\t\t\"\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\",\n\t\t\"\treturn clamp(dist,0.0,1.0);\",\n\t\t\"}\",\n\n\t\t\"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\",\n\t\t\"\tfloat rings2 = float(rings);\",\n\t\t\"\tfloat step = PI*2.0 / float(ringsamples);\",\n\t\t\"\tfloat pw = cos(j*step)*i;\",\n\t\t\"\tfloat ph = sin(j*step)*i;\",\n\t\t\"\tfloat p = 1.0;\",\n\t\t\"\tif (pentagon) {\",\n\t\t\"\t\tp = penta(vec2(pw,ph));\",\n\t\t\"\t}\",\n\t\t\"\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\",\n\t\t\"\treturn 1.0 * mix(1.0, i /rings2, bias) * p;\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\t\t\"\t//scene depth calculation\",\n\n\t\t\"\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);\",\n\n\t\t\"\t// Blur depth?\",\n\t\t\"\tif ( depthblur ) {\",\n\t\t\"\t\tdepth = linearize(bdepth(vUv.xy));\",\n\t\t\"\t}\",\n\n\t\t\"\t//focal plane calculation\",\n\n\t\t\"\tfloat fDepth = focalDepth;\",\n\n\t\t\"\tif (shaderFocus) {\",\n\n\t\t\"\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);\",\n\n\t\t\"\t}\",\n\n\t\t\"\t// dof blur factor calculation\",\n\n\t\t\"\tfloat blur = 0.0;\",\n\n\t\t\"\tif (manualdof) {\",\n\t\t\"\t\tfloat a = depth-fDepth; // Focal plane\",\n\t\t\"\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF\",\n\t\t\"\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof\",\n\t\t\"\t\tblur = (a>0.0) ? b : c;\",\n\t\t\"\t} else {\",\n\t\t\"\t\tfloat f = focalLength; // focal length in mm\",\n\t\t\"\t\tfloat d = fDepth*1000.0; // focal plane in mm\",\n\t\t\"\t\tfloat o = depth*1000.0; // depth in mm\",\n\n\t\t\"\t\tfloat a = (o*f)/(o-f);\",\n\t\t\"\t\tfloat b = (d*f)/(d-f);\",\n\t\t\"\t\tfloat c = (d-f)/(d*fstop*CoC);\",\n\n\t\t\"\t\tblur = abs(a-b)*c;\",\n\t\t\"\t}\",\n\n\t\t\"\tblur = clamp(blur,0.0,1.0);\",\n\n\t\t\"\t// calculation of pattern for dithering\",\n\n\t\t\"\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;\",\n\n\t\t\"\t// getting blur x and y step factor\",\n\n\t\t\"\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;\",\n\t\t\"\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;\",\n\n\t\t\"\t// calculation of final color\",\n\n\t\t\"\tvec3 col = vec3(0.0);\",\n\n\t\t\"\tif(blur < 0.05) {\",\n\t\t\"\t\t//some optimization thingy\",\n\t\t\"\t\tcol = texture2D(tColor, vUv.xy).rgb;\",\n\t\t\"\t} else {\",\n\t\t\"\t\tcol = texture2D(tColor, vUv.xy).rgb;\",\n\t\t\"\t\tfloat s = 1.0;\",\n\t\t\"\t\tint ringsamples;\",\n\n\t\t\"\t\tfor (int i = 1; i <= rings; i++) {\",\n\t\t\"\t\t\t/*unboxstart*/\",\n\t\t\"\t\t\tringsamples = i * samples;\",\n\n\t\t\"\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {\",\n\t\t\"\t\t\t\tif (j >= ringsamples) break;\",\n\t\t\"\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);\",\n\t\t\"\t\t\t}\",\n\t\t\"\t\t\t/*unboxend*/\",\n\t\t\"\t\t}\",\n\n\t\t\"\t\tcol /= s; //divide by sample count\",\n\t\t\"\t}\",\n\n\t\t\"\tif (showFocus) {\",\n\t\t\"\t\tcol = debugFocus(col, blur, depth);\",\n\t\t\"\t}\",\n\n\t\t\"\tif (vignetting) {\",\n\t\t\"\t\tcol *= vignette();\",\n\t\t\"\t}\",\n\n\t\t\"\tgl_FragColor.rgb = col;\",\n\t\t\"\tgl_FragColor.a = 1.0;\",\n\t\t\"} \"\n\n\t].join( \"\\n\" )\n\n};\n\nTHREE.BokehDepthShader = {\n\n\tuniforms: {\n\n\t\t\"mNear\": { value: 1.0 },\n\t\t\"mFar\": { value: 1000.0 },\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying float vViewZDepth;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\t#include <begin_vertex>\",\n\t\t\"\t#include <project_vertex>\",\n\n\t\t\"\tvViewZDepth = - mvPosition.z;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float mNear;\",\n\t\t\"uniform float mFar;\",\n\n\t\t\"varying float vViewZDepth;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\",\n\t\t\"\tgl_FragColor = vec4( vec3( color ), 1.0 );\",\n\n\t\t\"} \"\n\n\t].join( \"\\n\" )\n\n};\n"]}