{"version":3,"sources":["VolumeShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,6SAAd;AACA;;;;;;AAMA,MAAM,mBAAN,GAA4B;AAC3B,WAAU;AACT,YAAU,EAAE,OAAO,IAAI,MAAM,OAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAT,EADD;AAET,mBAAiB,EAAE,OAAO,CAAT,EAFR;AAGT,uBAAqB,EAAE,OAAO,GAAT,EAHZ;AAIT,YAAU,EAAE,OAAO,IAAI,MAAM,OAAV,CAAmB,CAAnB,EAAsB,CAAtB,CAAT,EAJD;AAKT,YAAU,EAAE,OAAO,IAAT,EALD;AAMT,cAAY,EAAE,OAAO,IAAT;AANH,EADiB;AAS3B,eAAc,CACb,2BADa,EAEb,0BAFa,EAGb,4BAHa,EAKb,iBALa;AAMb;AACA;AACA,6CARa,EASb,qDATa;;AAWb;AACA;AACA;AACA;AACA,4CAfa,EAgBb,mDAhBa;;AAkBb;AACA,oCAnBa,EAoBb,8CApBa;;AAsBb;AACA,mCAvBa,EAwBb,6CAxBa;;AA0Bb;AACA,6BA3Ba,EA4Bb,4EA5Ba,EA6Bb,KA7Ba,EA8BZ,IA9BY,CA8BN,IA9BM,CATa;AAwC3B,iBAAgB,CACf,0BADe,EAEf,gCAFe,EAIf,wBAJe,EAKf,8BALe,EAMf,oCANe,EAOf,wBAPe,EASf,6BATe,EAUf,+BAVe,EAYf,4BAZe,EAaf,2BAbe,EAcf,0BAde;;AAgBf;AACA,iEAjBe,EAkBf,mCAlBe,EAmBf,yCAnBe,EAoBf,wDApBe,EAqBf,wDArBe,EAsBf,yDAtBe,EAuBf,iCAvBe,EAyBf,wEAzBe,EA0Bf,wEA1Be,EA4Bf,kCA5Be,EA6Bf,mCA7Be,EA8Bf,qEA9Be,EAiCf,iBAjCe;AAkCf;AACA,+CAnCe,EAoCf,iDApCe;;AAsCf;AACA,2DAvCe;;AAyCf;AACA;AACA;AACA,4DA5Ce,EA6Cf,sEA7Ce,EA8Cf,mEA9Ce,EA+Cf,sEA/Ce,EAgDf,mEAhDe,EAiDf,sEAjDe,EAkDf,mEAlDe;;AAoDf;AACA,qDArDe;;AAuDf;AACA,8DAxDe,EAyDf,uBAzDe,EA0Df,gBA1De;;AA4Df;AACA,mEA7De,EA8Df,sCA9De;;AAgEf;AACA;AACA;AACA;;AAEA,8BArEe,EAsEf,oDAtEe,EAuEf,kCAvEe,EAwEf,oDAxEe,EA0Ef,gCA1Ee,EA2Ef,gBA3Ee,EA4Ef,KA5Ee,EA+Ef,mCA/Ee,EAgFf,yEAhFe,EAiFf,8CAjFe,EAkFf,KAlFe,EAqFf,oCArFe,EAsFf,wDAtFe,EAuFf,iDAvFe,EAwFf,KAxFe,EA2Ff,yEA3Fe,EA6Ff,2BA7Fe,EA8Ff,sBA9Fe,EA+Ff,2BA/Fe;;AAiGf;AACA;AACA;AACA,iDApGe,EAqGf,2BArGe,EAsGf,gBAtGe;AAuGf;AACA,kCAxGe;AAyGf;AACA,6BA1Ge,EA2Gf,wBA3Ge,EA4Gf,uBA5Ge,EA6Gf,SA7Ge;AA8Gf;AACA,qBA/Ge,EAgHf,OAhHe;;AAkHf;AACA,2DAnHe,EAoHf,kDApHe,EAqHf,8CArHe,EAsHf,8CAtHe,EAuHf,sBAvHe,EAwHf,OAxHe;;AA0Hf;AACA,8CA3He,EA4Hf,KA5He,EA+Hf,yEA/He,EAiIf,mDAjIe,EAkIf,6CAlIe,EAmIf,6DAnIe,EAoIf,2BApIe,EAsIf,+EAtIe;;AAwIf;AACA;AACA;AACA,iDA3Ie,EA4If,2BA5Ie,EA6If,gBA7Ie;;AA+If;AACA,kCAhJe,EAkJf,kCAlJe;AAmJf;AACA,wCApJe,EAqJf,sDArJe,EAsJf,kDAtJe,EAuJf,gCAvJe,EAwJf,0CAxJe,EAyJf,sEAzJe,EA0Jf,qBA1Je,EA2Jf,aA3Je,EA4Jf,0BA5Je,EA6Jf,WA7Je,EA8Jf,SA9Je;;AAgKf;AACA,qBAjKe,EAkKf,OAlKe,EAmKf,KAnKe,EAsKf,oEAtKe,EAuKf,KAvKe;AAwKf;;AAEA;AACA,oCA3Ke;;AA6Kf;AACA,cA9Ke,EA+Kf,uBA/Ke,EAgLf,qDAhLe,EAiLf,qDAjLe,EAkLf,yBAlLe,EAmLf,sCAnLe,EAoLf,qDApLe,EAqLf,qDArLe,EAsLf,yBAtLe,EAuLf,sCAvLe,EAwLf,qDAxLe,EAyLf,qDAzLe,EA0Lf,yBA1Le,EA2Lf,sCA3Le,EA6Lf,iDA7Le,EA8Lf,uBA9Le;;AAgMf;AACA,8CAjMe,EAkMf,yEAlMe;;AAoMf;AACA,qDArMe,EAsMf,oDAtMe,EAuMf,qDAvMe;;AAyMf;AACA,8BA1Me,EA2Mf,OA3Me;AA4MR;AACP,sDA7Me,EA8Mf,sDA9Me,EA+Mf,gDA/Me;;AAiNf;AACA,wDAlNe,EAmNf,kDAnNe,EAoNf,iEApNe;;AAsNf;AACA,oCAvNe;;AAyNf;AACA,gFA1Ne,EA2Nf,6CA3Ne,EA4Nf,gEA5Ne,EA6Nf,OA7Ne;;AA+Nf;AACA,wBAhOe,EAiOf,uCAjOe,EAkOf,6EAlOe,EAmOf,8BAnOe,EAoOf,yBApOe,EAqOf,KArOe,EAsOd,IAtOc,CAsOR,IAtOQ;AAxCW,CAA5B","file":"VolumeShader-compiled.js","sourcesContent":["console.warn( \"THREE.VolumeShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Shaders to render 3D volumes using raycasting.\n * The applied techniques are based on similar implementations in the Visvis and Vispy projects.\n * This is not the only approach, therefore it's marked 1.\n */\n\nTHREE.VolumeRenderShader1 = {\n\tuniforms: {\n\t\t\"u_size\": { value: new THREE.Vector3( 1, 1, 1 ) },\n\t\t\"u_renderstyle\": { value: 0 },\n\t\t\"u_renderthreshold\": { value: 0.5 },\n\t\t\"u_clim\": { value: new THREE.Vector2( 1, 1 ) },\n\t\t\"u_data\": { value: null },\n\t\t\"u_cmdata\": { value: null }\n\t},\n\tvertexShader: [\n\t\t\"\t\tvarying vec4 v_nearpos;\",\n\t\t\"\t\tvarying vec4 v_farpos;\",\n\t\t\"\t\tvarying vec3 v_position;\",\n\n\t\t\"\t\tvoid main() {\",\n\t\t// Prepare transforms to map to \"camera view\". See also:\n\t\t// https://threejs.org/docs/#api/renderers/webgl/WebGLProgram\n\t\t\"\t\t\t\tmat4 viewtransformf = modelViewMatrix;\",\n\t\t\"\t\t\t\tmat4 viewtransformi = inverse(modelViewMatrix);\",\n\n\t\t// Project local vertex coordinate to camera position. Then do a step\n\t\t// backward (in cam coords) to the near clipping plane, and project back. Do\n\t\t// the same for the far clipping plane. This gives us all the information we\n\t\t// need to calculate the ray and truncate it to the viewing cone.\n\t\t\"\t\t\t\tvec4 position4 = vec4(position, 1.0);\",\n\t\t\"\t\t\t\tvec4 pos_in_cam = viewtransformf * position4;\",\n\n\t\t// Intersection of ray and near clipping plane (z = -1 in clip coords)\n\t\t\"\t\t\t\tpos_in_cam.z = -pos_in_cam.w;\",\n\t\t\"\t\t\t\tv_nearpos = viewtransformi * pos_in_cam;\",\n\n\t\t// Intersection of ray and far clipping plane (z = +1 in clip coords)\n\t\t\"\t\t\t\tpos_in_cam.z = pos_in_cam.w;\",\n\t\t\"\t\t\t\tv_farpos = viewtransformi * pos_in_cam;\",\n\n\t\t// Set varyings and output pos\n\t\t\"\t\t\t\tv_position = position;\",\n\t\t\"\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;\",\n\t\t\"\t\t}\",\n\t].join( \"\\n\" ),\n\tfragmentShader: [\n\t\t\"\t\tprecision highp float;\",\n\t\t\"\t\tprecision mediump sampler3D;\",\n\n\t\t\"\t\tuniform vec3 u_size;\",\n\t\t\"\t\tuniform int u_renderstyle;\",\n\t\t\"\t\tuniform float u_renderthreshold;\",\n\t\t\"\t\tuniform vec2 u_clim;\",\n\n\t\t\"\t\tuniform sampler3D u_data;\",\n\t\t\"\t\tuniform sampler2D u_cmdata;\",\n\n\t\t\"\t\tvarying vec3 v_position;\",\n\t\t\"\t\tvarying vec4 v_nearpos;\",\n\t\t\"\t\tvarying vec4 v_farpos;\",\n\n\t\t// The maximum distance through our rendering volume is sqrt(3).\n\t\t\"\t\tconst int MAX_STEPS = 887;\t// 887 for 512^3, 1774 for 1024^3\",\n\t\t\"\t\tconst int REFINEMENT_STEPS = 4;\",\n\t\t\"\t\tconst float relative_step_size = 1.0;\",\n\t\t\"\t\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);\",\n\t\t\"\t\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);\",\n\t\t\"\t\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);\",\n\t\t\"\t\tconst float shininess = 40.0;\",\n\n\t\t\"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\n\t\t\"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\n\n\t\t\"\t\tfloat sample1(vec3 texcoords);\",\n\t\t\"\t\tvec4 apply_colormap(float val);\",\n\t\t\"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);\",\n\n\n\t\t\"\t\tvoid main() {\",\n\t\t// Normalize clipping plane info\n\t\t\"\t\t\t\tvec3 farpos = v_farpos.xyz / v_farpos.w;\",\n\t\t\"\t\t\t\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;\",\n\n\t\t// Calculate unit vector pointing in the view direction through this fragment.\n\t\t\"\t\t\t\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);\",\n\n\t\t// Compute the (negative) distance to the front surface or near clipping plane.\n\t\t// v_position is the back face of the cuboid, so the initial distance calculated in the dot\n\t\t// product below is the distance from near clip plane to the back of the cuboid\n\t\t\"\t\t\t\tfloat distance = dot(nearpos - v_position, view_ray);\",\n\t\t\"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.x - 0.5 - v_position.x) / view_ray.x));\",\n\t\t\"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.y - 0.5 - v_position.y) / view_ray.y));\",\n\t\t\"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.z - 0.5 - v_position.z) / view_ray.z));\",\n\n\t\t// Now we have the starting position on the front surface\n\t\t\"\t\t\t\tvec3 front = v_position + view_ray * distance;\",\n\n\t\t// Decide how many steps to take\n\t\t\"\t\t\t\tint nsteps = int(-distance / relative_step_size + 0.5);\",\n\t\t\"\t\t\t\tif ( nsteps < 1 )\",\n\t\t\"\t\t\t\t\t\tdiscard;\",\n\n\t\t// Get starting location and step vector in texture coordinates\n\t\t\"\t\t\t\tvec3 step = ((v_position - front) / u_size) / float(nsteps);\",\n\t\t\"\t\t\t\tvec3 start_loc = front / u_size;\",\n\n\t\t// For testing: show the number of steps. This helps to establish\n\t\t// whether the rays are correctly oriented\n\t\t//'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);',\n\t\t//'return;',\n\n\t\t\"\t\t\t\tif (u_renderstyle == 0)\",\n\t\t\"\t\t\t\t\t\tcast_mip(start_loc, step, nsteps, view_ray);\",\n\t\t\"\t\t\t\telse if (u_renderstyle == 1)\",\n\t\t\"\t\t\t\t\t\tcast_iso(start_loc, step, nsteps, view_ray);\",\n\n\t\t\"\t\t\t\tif (gl_FragColor.a < 0.05)\",\n\t\t\"\t\t\t\t\t\tdiscard;\",\n\t\t\"\t\t}\",\n\n\n\t\t\"\t\tfloat sample1(vec3 texcoords) {\",\n\t\t\"\t\t\t\t/* Sample float value from a 3D texture. Assumes intensity data. */\",\n\t\t\"\t\t\t\treturn texture(u_data, texcoords.xyz).r;\",\n\t\t\"\t\t}\",\n\n\n\t\t\"\t\tvec4 apply_colormap(float val) {\",\n\t\t\"\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\",\n\t\t\"\t\t\t\treturn texture2D(u_cmdata, vec2(val, 0.5));\",\n\t\t\"\t\t}\",\n\n\n\t\t\"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\n\n\t\t\"\t\t\t\tfloat max_val = -1e6;\",\n\t\t\"\t\t\t\tint max_i = 100;\",\n\t\t\"\t\t\t\tvec3 loc = start_loc;\",\n\n\t\t// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n\t\t// non-constant expression. So we use a hard-coded max, and an additional condition\n\t\t// inside the loop.\n\t\t\"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\n\t\t\"\t\t\t\t\t\tif (iter >= nsteps)\",\n\t\t\"\t\t\t\t\t\t\t\tbreak;\",\n\t\t// Sample from the 3D texture\n\t\t\"\t\t\t\t\t\tfloat val = sample1(loc);\",\n\t\t// Apply MIP operation\n\t\t\"\t\t\t\t\t\tif (val > max_val) {\",\n\t\t\"\t\t\t\t\t\t\t\tmax_val = val;\",\n\t\t\"\t\t\t\t\t\t\t\tmax_i = iter;\",\n\t\t\"\t\t\t\t\t\t}\",\n\t\t// Advance location deeper into the volume\n\t\t\"\t\t\t\t\t\tloc += step;\",\n\t\t\"\t\t\t\t}\",\n\n\t\t// Refine location, gives crispier images\n\t\t\"\t\t\t\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);\",\n\t\t\"\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\",\n\t\t\"\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\n\t\t\"\t\t\t\t\t\tmax_val = max(max_val, sample1(iloc));\",\n\t\t\"\t\t\t\t\t\tiloc += istep;\",\n\t\t\"\t\t\t\t}\",\n\n\t\t// Resolve final color\n\t\t\"\t\t\t\tgl_FragColor = apply_colormap(max_val);\",\n\t\t\"\t\t}\",\n\n\n\t\t\"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\n\n\t\t\"\t\t\t\tgl_FragColor = vec4(0.0);\t// init transparent\",\n\t\t\"\t\t\t\tvec4 color3 = vec4(0.0);\t// final color\",\n\t\t\"\t\t\t\tvec3 dstep = 1.5 / u_size;\t// step to sample derivative\",\n\t\t\"\t\t\t\tvec3 loc = start_loc;\",\n\n\t\t\"\t\t\t\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);\",\n\n\t\t// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n\t\t// non-constant expression. So we use a hard-coded max, and an additional condition\n\t\t// inside the loop.\n\t\t\"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\n\t\t\"\t\t\t\t\t\tif (iter >= nsteps)\",\n\t\t\"\t\t\t\t\t\t\t\tbreak;\",\n\n\t\t// Sample from the 3D texture\n\t\t\"\t\t\t\t\t\tfloat val = sample1(loc);\",\n\n\t\t\"\t\t\t\t\t\tif (val > low_threshold) {\",\n\t\t// Take the last interval in smaller steps\n\t\t\"\t\t\t\t\t\t\t\tvec3 iloc = loc - 0.5 * step;\",\n\t\t\"\t\t\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\",\n\t\t\"\t\t\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\n\t\t\"\t\t\t\t\t\t\t\t\t\tval = sample1(iloc);\",\n\t\t\"\t\t\t\t\t\t\t\t\t\tif (val > u_renderthreshold) {\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t\t\treturn;\",\n\t\t\"\t\t\t\t\t\t\t\t\t\t}\",\n\t\t\"\t\t\t\t\t\t\t\t\t\tiloc += istep;\",\n\t\t\"\t\t\t\t\t\t\t\t}\",\n\t\t\"\t\t\t\t\t\t}\",\n\n\t\t// Advance location deeper into the volume\n\t\t\"\t\t\t\t\t\tloc += step;\",\n\t\t\"\t\t\t\t}\",\n\t\t\"\t\t}\",\n\n\n\t\t\"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)\",\n\t\t\"\t\t{\",\n\t\t// Calculate color by incorporating lighting\n\n\t\t// View direction\n\t\t\"\t\t\t\tvec3 V = normalize(view_ray);\",\n\n\t\t// calculate normal vector from gradient\n\t\t\"\t\t\t\tvec3 N;\",\n\t\t\"\t\t\t\tfloat val1, val2;\",\n\t\t\"\t\t\t\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));\",\n\t\t\"\t\t\t\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));\",\n\t\t\"\t\t\t\tN[0] = val1 - val2;\",\n\t\t\"\t\t\t\tval = max(max(val1, val2), val);\",\n\t\t\"\t\t\t\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));\",\n\t\t\"\t\t\t\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));\",\n\t\t\"\t\t\t\tN[1] = val1 - val2;\",\n\t\t\"\t\t\t\tval = max(max(val1, val2), val);\",\n\t\t\"\t\t\t\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));\",\n\t\t\"\t\t\t\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));\",\n\t\t\"\t\t\t\tN[2] = val1 - val2;\",\n\t\t\"\t\t\t\tval = max(max(val1, val2), val);\",\n\n\t\t\"\t\t\t\tfloat gm = length(N); // gradient magnitude\",\n\t\t\"\t\t\t\tN = normalize(N);\",\n\n\t\t// Flip normal so it points towards viewer\n\t\t\"\t\t\t\tfloat Nselect = float(dot(N, V) > 0.0);\",\n\t\t\"\t\t\t\tN = (2.0 * Nselect - 1.0) * N;\t// ==\tNselect * N - (1.0-Nselect)*N;\",\n\n\t\t// Init colors\n\t\t\"\t\t\t\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n\t\t\"\t\t\t\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n\t\t\"\t\t\t\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n\n\t\t// note: could allow multiple lights\n\t\t\"\t\t\t\tfor (int i=0; i<1; i++)\",\n\t\t\"\t\t\t\t{\",\n\t\t\t\t\t\t\t\t // Get light direction (make sure to prevent zero devision)\n\t\t\"\t\t\t\t\t\tvec3 L = normalize(view_ray);\t//lightDirs[i];\",\n\t\t\"\t\t\t\t\t\tfloat lightEnabled = float( length(L) > 0.0 );\",\n\t\t\"\t\t\t\t\t\tL = normalize(L + (1.0 - lightEnabled));\",\n\n\t\t// Calculate lighting properties\n\t\t\"\t\t\t\t\t\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);\",\n\t\t\"\t\t\t\t\t\tvec3 H = normalize(L+V); // Halfway vector\",\n\t\t\"\t\t\t\t\t\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);\",\n\n\t\t// Calculate mask\n\t\t\"\t\t\t\t\t\tfloat mask1 = lightEnabled;\",\n\n\t\t// Calculate colors\n\t\t\"\t\t\t\t\t\tambient_color +=\tmask1 * ambient_color;\t// * gl_LightSource[i].ambient;\",\n\t\t\"\t\t\t\t\t\tdiffuse_color +=\tmask1 * lambertTerm;\",\n\t\t\"\t\t\t\t\t\tspecular_color += mask1 * specularTerm * specular_color;\",\n\t\t\"\t\t\t\t}\",\n\n\t\t// Calculate final color by componing different components\n\t\t\"\t\t\t\tvec4 final_color;\",\n\t\t\"\t\t\t\tvec4 color = apply_colormap(val);\",\n\t\t\"\t\t\t\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;\",\n\t\t\"\t\t\t\tfinal_color.a = color.a;\",\n\t\t\"\t\t\t\treturn final_color;\",\n\t\t\"\t\t}\",\n\t].join( \"\\n\" )\n};\n"]}