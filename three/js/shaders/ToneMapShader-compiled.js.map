{"version":3,"sources":["ToneMapShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,8SAAd;AACA;;;;AAIA,MAAM,aAAN,GAAsB;;AAErB,WAAU;;AAET,cAAY,EAAE,OAAO,IAAT,EAFH;AAGT,sBAAoB,EAAE,OAAO,GAAT,EAHX;AAIT,kBAAgB,EAAE,OAAO,IAAT,EAJP;AAKT,kBAAgB,EAAE,OAAO,IAAT,EALP;AAMT,kBAAgB,EAAE,OAAO,IAAT,EANP;AAOT,gBAAc,EAAE,OAAO,GAAT;AAPL,EAFW;;AAYrB,eAAc,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAOb,4EAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAZO;;AAyBrB,iBAAgB,CAEf,mBAFe,EAIf,6BAJe,EAMf,mBANe,EAQf,2BARe,EASf,6BATe,EAUf,6BAVe,EAWf,0BAXe,EAYf,kCAZe,EAaf,OAbe,EAcf,kCAde,EAef,QAfe,EAiBf,+BAjBe,EAkBf,2BAlBe;AAmBf;AACA,+DApBe,EAqBf,QArBe,EAsBf,qCAtBe,EAuBf,SAvBe;;AAyBf;AACA,0DA1Be;;AA4Bf;AACA,+EA7Be,EA+Bf,mHA/Be,EAgCf,kCAhCe,EAiCf,GAjCe,EAmCf,eAnCe,EAqCf,2CArCe,EAuCf,wDAvCe,EAyCf,GAzCe,EA2Cd,IA3Cc,CA2CR,IA3CQ;;AAzBK,CAAtB","file":"ToneMapShader-compiled.js","sourcesContent":["console.warn( \"THREE.ToneMapShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\n\nTHREE.ToneMapShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"averageLuminance\": { value: 1.0 },\n\t\t\"luminanceMap\": { value: null },\n\t\t\"maxLuminance\": { value: 16.0 },\n\t\t\"minLuminance\": { value: 0.01 },\n\t\t\"middleGrey\": { value: 0.6 }\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#include <common>\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"uniform float middleGrey;\",\n\t\t\"uniform float minLuminance;\",\n\t\t\"uniform float maxLuminance;\",\n\t\t\"#ifdef ADAPTED_LUMINANCE\",\n\t\t\"\tuniform sampler2D luminanceMap;\",\n\t\t\"#else\",\n\t\t\"\tuniform float averageLuminance;\",\n\t\t\"#endif\",\n\n\t\t\"vec3 ToneMap( vec3 vColor ) {\",\n\t\t\"\t#ifdef ADAPTED_LUMINANCE\",\n\t\t// Get the calculated average luminance\n\t\t\"\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\n\t\t\"\t#else\",\n\t\t\"\t\tfloat fLumAvg = averageLuminance;\",\n\t\t\"\t#endif\",\n\n\t\t// Calculate the luminance of the current pixel\n\t\t\"\tfloat fLumPixel = linearToRelativeLuminance( vColor );\",\n\n\t\t// Apply the modified operator (Eq. 4)\n\t\t\"\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\",\n\n\t\t\"\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\n\t\t\"\treturn fLumCompressed * vColor;\",\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\"\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}