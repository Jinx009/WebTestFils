{"version":3,"sources":["DotScreenShader.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,gTAAd;AACA;;;;;;AAMA,MAAM,eAAN,GAAwB;;AAEvB,WAAU;;AAET,cAAY,EAAE,OAAO,IAAT,EAFH;AAGT,WAAS,EAAE,OAAO,IAAI,MAAM,OAAV,CAAmB,GAAnB,EAAwB,GAAxB,CAAT,EAHA;AAIT,YAAU,EAAE,OAAO,IAAI,MAAM,OAAV,CAAmB,GAAnB,EAAwB,GAAxB,CAAT,EAJD;AAKT,WAAS,EAAE,OAAO,IAAT,EALA;AAMT,WAAS,EAAE,OAAO,GAAT;;AANA,EAFa;;AAYvB,eAAc,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAOb,4EAPa,EASb,GATa,EAWZ,IAXY,CAWN,IAXM,CAZS;;AAyBvB,iBAAgB,CAEf,sBAFe,EAGf,sBAHe,EAIf,sBAJe,EAKf,qBALe,EAOf,6BAPe,EASf,mBATe,EAWf,mBAXe,EAaf,4CAbe,EAef,mCAfe,EAgBf,6EAhBe,EAkBf,oDAlBe,EAoBf,GApBe,EAsBf,eAtBe,EAwBf,2CAxBe,EA0Bf,yDA1Be,EA4Bf,4EA5Be,EA8Bf,GA9Be,EAgCd,IAhCc,CAgCR,IAhCQ;;AAzBO,CAAxB","file":"DotScreenShader-compiled.js","sourcesContent":["console.warn( \"THREE.DotScreenShader: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nTHREE.DotScreenShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"tSize\": { value: new THREE.Vector2( 256, 256 ) },\n\t\t\"center\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\"angle\": { value: 1.57 },\n\t\t\"scale\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec2 center;\",\n\t\t\"uniform float angle;\",\n\t\t\"uniform float scale;\",\n\t\t\"uniform vec2 tSize;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"float pattern() {\",\n\n\t\t\"\tfloat s = sin( angle ), c = cos( angle );\",\n\n\t\t\"\tvec2 tex = vUv * tSize - center;\",\n\t\t\"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n\n\t\t\"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\n\n\t\t\"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\n\n\t\t\"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n"]}