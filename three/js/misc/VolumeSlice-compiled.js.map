{"version":3,"sources":["VolumeSlice.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,4SAAd;AACA;;;;;;;;AAQA,MAAM,WAAN,GAAoB,UAAW,MAAX,EAAmB,KAAnB,EAA0B,IAA1B,EAAiC;;AAEpD,KAAI,QAAQ,IAAZ;AACA;;;AAGA,MAAK,MAAL,GAAc,MAAd;AACA;;;AAGA,SAAQ,SAAS,CAAjB;AACA,QAAO,cAAP,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC;AACrC,OAAK,YAAY;;AAEhB,UAAO,KAAP;AAEA,GALoC;AAMrC,OAAK,UAAW,KAAX,EAAmB;;AAEvB,WAAQ,KAAR;AACA,SAAM,mBAAN,GAA4B,IAA5B;AACA,UAAO,KAAP;AAEA;AAZoC,EAAtC;AAcA;;;AAGA,MAAK,IAAL,GAAY,QAAQ,GAApB;;AAEA;;;AAGA;;;AAGA,MAAK,MAAL,GAAc,SAAS,aAAT,CAAwB,QAAxB,CAAd;AACA;;;AAGA;;;AAGA,MAAK,YAAL,GAAoB,SAAS,aAAT,CAAwB,QAAxB,CAApB;AACA,MAAK,cAAL;;AAGA,KAAI,YAAY,IAAI,MAAM,OAAV,CAAmB,KAAK,MAAxB,CAAhB;AACA,WAAU,SAAV,GAAsB,MAAM,YAA5B;AACA,WAAU,KAAV,GAAkB,UAAU,KAAV,GAAkB,MAAM,mBAA1C;AACA,KAAI,WAAW,IAAI,MAAM,iBAAV,CAA6B,EAAE,KAAK,SAAP,EAAkB,MAAM,MAAM,UAA9B,EAA0C,aAAa,IAAvD,EAA7B,CAAf;AACA;;;AAGA,MAAK,IAAL,GAAY,IAAI,MAAM,IAAV,CAAgB,KAAK,QAArB,EAA+B,QAA/B,CAAZ;AACA,MAAK,IAAL,CAAU,gBAAV,GAA6B,KAA7B;AACA;;;AAGA,MAAK,mBAAL,GAA2B,IAA3B;AACA,MAAK,OAAL;;AAEA;;;;AAIA;;;;AAIA;;;;;;;AASA,CA/ED;;AAiFA,MAAM,WAAN,CAAkB,SAAlB,GAA8B;;AAE7B,cAAa,MAAM,WAFU;;AAI7B;;;;AAIA,UAAS,YAAY;;AAEpB,MAAK,KAAK,mBAAV,EAAgC;;AAE/B,QAAK,cAAL;AAEA;;AAED,MAAI,UAAU,KAAK,OAAnB;AAAA,MACC,UAAU,KAAK,OADhB;AAAA,MAEC,cAAc,KAAK,WAFpB;AAAA,MAGC,SAAS,KAAK,MAHf;AAAA,MAIC,SAAS,KAAK,YAJf;AAAA,MAKC,MAAM,KAAK,SALZ;;AAQA;AACA,MAAI,UAAU,IAAI,YAAJ,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,OAAxB,EAAiC,OAAjC,CAAd;AACA,MAAI,OAAO,QAAQ,IAAnB;AACA,MAAI,aAAa,OAAO,IAAxB;AACA,MAAI,iBAAiB,OAAO,cAA5B;AACA,MAAI,iBAAiB,OAAO,cAA5B;AACA,MAAI,YAAY,OAAO,SAAvB;AACA,MAAI,aAAa,OAAO,UAAxB;;AAEA;AACA,MAAI,aAAa,CAAjB;;AAEA,MAAK,OAAO,QAAP,KAAoB,OAAzB,EAAmC;;AAElC;AACA,QAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,OAArB,EAA8B,GAA9B,EAAqC;;AAEpC,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,OAArB,EAA8B,GAA9B,EAAqC;;AAEpC,SAAI,QAAQ,WAAY,YAAa,CAAb,EAAgB,CAAhB,CAAZ,CAAZ;AACA,aAAQ,SAAS,KAAK,QAAL,CAAc,MAAvB,GAAkC,QAAQ,KAAK,QAAL,CAAc,MAAxB,GAAmC,CAAnE,GAAuE,KAA/E;AACA,SAAI,QAAQ,KAAK,QAAL,CAAe,KAAf,CAAZ;AACA,UAAM,IAAI,UAAV,IAA2B,SAAS,EAAX,GAAkB,IAA3C;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA+B,SAAS,EAAX,GAAkB,IAA/C;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA+B,SAAS,CAAX,GAAiB,IAA9C;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA6B,QAAQ,IAArC;AACA;AAEA;AAED;AAED,GApBD,MAoBO;;AAEN,QAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,OAArB,EAA8B,GAA9B,EAAqC;;AAEpC,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,OAArB,EAA8B,GAA9B,EAAqC;;AAEpC,SAAI,QAAQ,WAAY,YAAa,CAAb,EAAgB,CAAhB,CAAZ,CAAZ;AACA,SAAI,QAAQ,IAAZ;AACA;AACA,aAAQ,kBAAkB,KAAlB,GAA4B,kBAAkB,KAAlB,GAA0B,KAA1B,GAAkC,CAA9D,GAAoE,CAA5E;AACA;AACA,aAAQ,KAAK,KAAL,CAAY,OAAQ,QAAQ,SAAhB,KAAgC,aAAa,SAA7C,CAAZ,CAAR;AACA,aAAQ,QAAQ,GAAR,GAAc,GAAd,GAAsB,QAAQ,CAAR,GAAY,CAAZ,GAAgB,QAAQ,CAAtD;;AAEA,UAAM,IAAI,UAAV,IAAyB,KAAzB;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA6B,KAA7B;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA6B,KAA7B;AACA,UAAM,IAAI,UAAJ,GAAiB,CAAvB,IAA6B,KAA7B;AACA;AAEA;AAED;AAED;;AAED,MAAI,YAAJ,CAAkB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B;AACA,OAAK,GAAL,CAAS,SAAT,CAAoB,MAApB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,OAAlC,EAA2C,OAA3C,EAAoD,CAApD,EAAuD,CAAvD,EAA0D,KAAK,MAAL,CAAY,KAAtE,EAA6E,KAAK,MAAL,CAAY,MAAzF;;AAGA,OAAK,IAAL,CAAU,QAAV,CAAmB,GAAnB,CAAuB,WAAvB,GAAqC,IAArC;AAEA,EAxF4B;;AA0F7B;;;;;AAKA,iBAAgB,YAAY;;AAE3B,MAAI,YAAY,KAAK,MAAL,CAAY,yBAAZ,CAAuC,KAAK,IAA5C,EAAkD,KAAK,KAAvD,CAAhB;AACA,OAAK,WAAL,GAAmB,UAAU,WAA7B;AACA,OAAK,OAAL,GAAe,UAAU,OAAzB;AACA,OAAK,OAAL,GAAe,UAAU,OAAzB;AACA,OAAK,MAAL,GAAc,UAAU,MAAxB;;AAEA,OAAK,MAAL,CAAY,KAAZ,GAAoB,UAAU,UAA9B;AACA,OAAK,MAAL,CAAY,MAAZ,GAAqB,UAAU,WAA/B;AACA,OAAK,YAAL,CAAkB,KAAlB,GAA0B,KAAK,OAA/B;AACA,OAAK,YAAL,CAAkB,MAAlB,GAA2B,KAAK,OAAhC;AACA,OAAK,GAAL,GAAW,KAAK,MAAL,CAAY,UAAZ,CAAwB,IAAxB,CAAX;AACA,OAAK,SAAL,GAAiB,KAAK,YAAL,CAAkB,UAAlB,CAA8B,IAA9B,CAAjB;;AAEA,MAAK,KAAK,QAAV,EAAqB,KAAK,QAAL,CAAc,OAAd,GAfM,CAemB;;AAE9C,OAAK,QAAL,GAAgB,IAAI,MAAM,mBAAV,CAA+B,UAAU,UAAzC,EAAqD,UAAU,WAA/D,CAAhB;;AAEA,MAAK,KAAK,IAAV,EAAiB;;AAEhB,QAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,QAA1B;AACA;AACA,QAAK,IAAL,CAAU,MAAV,CAAiB,QAAjB;AACA,QAAK,IAAL,CAAU,YAAV,CAAwB,KAAK,MAA7B;AAEA;;AAED,OAAK,mBAAL,GAA2B,KAA3B;AAEA;;AA7H4B,CAA9B","file":"VolumeSlice-compiled.js","sourcesContent":["console.warn( \"THREE.VolumeSlice: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * This class has been made to hold a slice of a volume data\n * @class\n * @param   {THREE.Volume} volume    The associated volume\n * @param   {number}       [index=0] The index of the slice\n * @param   {string}       [axis='z']      For now only 'x', 'y' or 'z' but later it will change to a normal vector\n * @see THREE.Volume\n */\nTHREE.VolumeSlice = function ( volume, index, axis ) {\n\n\tvar slice = this;\n\t/**\n\t * @member {THREE.Volume} volume The associated volume\n\t */\n\tthis.volume = volume;\n\t/**\n\t * @member {Number} index The index of the slice, if changed, will automatically call updateGeometry at the next repaint\n\t */\n\tindex = index || 0;\n\tObject.defineProperty( this, 'index', {\n\t\tget: function () {\n\n\t\t\treturn index;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tindex = value;\n\t\t\tslice.geometryNeedsUpdate = true;\n\t\t\treturn index;\n\n\t\t}\n\t} );\n\t/**\n\t * @member {String} axis The normal axis\n\t */\n\tthis.axis = axis || 'z';\n\n\t/**\n\t * @member {HTMLCanvasElement} canvas The final canvas used for the texture\n\t */\n\t/**\n\t * @member {CanvasRenderingContext2D} ctx Context of the canvas\n\t */\n\tthis.canvas = document.createElement( 'canvas' );\n\t/**\n\t * @member {HTMLCanvasElement} canvasBuffer The intermediary canvas used to paint the data\n\t */\n\t/**\n\t * @member {CanvasRenderingContext2D} ctxBuffer Context of the canvas buffer\n\t */\n\tthis.canvasBuffer = document.createElement( 'canvas' );\n\tthis.updateGeometry();\n\n\n\tvar canvasMap = new THREE.Texture( this.canvas );\n\tcanvasMap.minFilter = THREE.LinearFilter;\n\tcanvasMap.wrapS = canvasMap.wrapT = THREE.ClampToEdgeWrapping;\n\tvar material = new THREE.MeshBasicMaterial( { map: canvasMap, side: THREE.DoubleSide, transparent: true } );\n\t/**\n\t * @member {THREE.Mesh} mesh The mesh ready to get used in the scene\n\t */\n\tthis.mesh = new THREE.Mesh( this.geometry, material );\n\tthis.mesh.matrixAutoUpdate = false;\n\t/**\n\t * @member {Boolean} geometryNeedsUpdate If set to true, updateGeometry will be triggered at the next repaint\n\t */\n\tthis.geometryNeedsUpdate = true;\n\tthis.repaint();\n\n\t/**\n\t * @member {Number} iLength Width of slice in the original coordinate system, corresponds to the width of the buffer canvas\n\t */\n\n\t/**\n\t * @member {Number} jLength Height of slice in the original coordinate system, corresponds to the height of the buffer canvas\n\t */\n\n\t/**\n\t * @member {Function} sliceAccess Function that allow the slice to access right data\n\t * @see THREE.Volume.extractPerpendicularPlane\n\t * @param {Number} i The first coordinate\n\t * @param {Number} j The second coordinate\n\t * @returns {Number} the index corresponding to the voxel in volume.data of the given position in the slice\n\t */\n\n\n};\n\nTHREE.VolumeSlice.prototype = {\n\n\tconstructor: THREE.VolumeSlice,\n\n\t/**\n\t * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n\t * @memberof THREE.VolumeSlice\n\t */\n\trepaint: function () {\n\n\t\tif ( this.geometryNeedsUpdate ) {\n\n\t\t\tthis.updateGeometry();\n\n\t\t}\n\n\t\tvar iLength = this.iLength,\n\t\t\tjLength = this.jLength,\n\t\t\tsliceAccess = this.sliceAccess,\n\t\t\tvolume = this.volume,\n\t\t\tcanvas = this.canvasBuffer,\n\t\t\tctx = this.ctxBuffer;\n\n\n\t\t// get the imageData and pixel array from the canvas\n\t\tvar imgData = ctx.getImageData( 0, 0, iLength, jLength );\n\t\tvar data = imgData.data;\n\t\tvar volumeData = volume.data;\n\t\tvar upperThreshold = volume.upperThreshold;\n\t\tvar lowerThreshold = volume.lowerThreshold;\n\t\tvar windowLow = volume.windowLow;\n\t\tvar windowHigh = volume.windowHigh;\n\n\t\t// manipulate some pixel elements\n\t\tvar pixelCount = 0;\n\n\t\tif ( volume.dataType === 'label' ) {\n\n\t\t\t//this part is currently useless but will be used when colortables will be handled\n\t\t\tfor ( var j = 0; j < jLength; j ++ ) {\n\n\t\t\t\tfor ( var i = 0; i < iLength; i ++ ) {\n\n\t\t\t\t\tvar label = volumeData[ sliceAccess( i, j ) ];\n\t\t\t\t\tlabel = label >= this.colorMap.length ? ( label % this.colorMap.length ) + 1 : label;\n\t\t\t\t\tvar color = this.colorMap[ label ];\n\t\t\t\t\tdata[ 4 * pixelCount ] = ( color >> 24 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 1 ] = ( color >> 16 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 2 ] = ( color >> 8 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 3 ] = color & 0xff;\n\t\t\t\t\tpixelCount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var j = 0; j < jLength; j ++ ) {\n\n\t\t\t\tfor ( var i = 0; i < iLength; i ++ ) {\n\n\t\t\t\t\tvar value = volumeData[ sliceAccess( i, j ) ];\n\t\t\t\t\tvar alpha = 0xff;\n\t\t\t\t\t//apply threshold\n\t\t\t\t\talpha = upperThreshold >= value ? ( lowerThreshold <= value ? alpha : 0 ) : 0;\n\t\t\t\t\t//apply window level\n\t\t\t\t\tvalue = Math.floor( 255 * ( value - windowLow ) / ( windowHigh - windowLow ) );\n\t\t\t\t\tvalue = value > 255 ? 255 : ( value < 0 ? 0 : value | 0 );\n\n\t\t\t\t\tdata[ 4 * pixelCount ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 1 ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 2 ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 3 ] = alpha;\n\t\t\t\t\tpixelCount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.putImageData( imgData, 0, 0 );\n\t\tthis.ctx.drawImage( canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height );\n\n\n\t\tthis.mesh.material.map.needsUpdate = true;\n\n\t},\n\n\t/**\n\t * @member {Function} Refresh the geometry according to axis and index\n\t * @see THREE.Volume.extractPerpendicularPlane\n\t * @memberof THREE.VolumeSlice\n\t */\n\tupdateGeometry: function () {\n\n\t\tvar extracted = this.volume.extractPerpendicularPlane( this.axis, this.index );\n\t\tthis.sliceAccess = extracted.sliceAccess;\n\t\tthis.jLength = extracted.jLength;\n\t\tthis.iLength = extracted.iLength;\n\t\tthis.matrix = extracted.matrix;\n\n\t\tthis.canvas.width = extracted.planeWidth;\n\t\tthis.canvas.height = extracted.planeHeight;\n\t\tthis.canvasBuffer.width = this.iLength;\n\t\tthis.canvasBuffer.height = this.jLength;\n\t\tthis.ctx = this.canvas.getContext( '2d' );\n\t\tthis.ctxBuffer = this.canvasBuffer.getContext( '2d' );\n\n\t\tif ( this.geometry ) this.geometry.dispose(); // dispose existing geometry\n\n\t\tthis.geometry = new THREE.PlaneBufferGeometry( extracted.planeWidth, extracted.planeHeight );\n\n\t\tif ( this.mesh ) {\n\n\t\t\tthis.mesh.geometry = this.geometry;\n\t\t\t//reset mesh matrix\n\t\t\tthis.mesh.matrix.identity();\n\t\t\tthis.mesh.applyMatrix4( this.matrix );\n\n\t\t}\n\n\t\tthis.geometryNeedsUpdate = false;\n\n\t}\n\n};\n"]}