{"version":3,"sources":["ConvexObjectBreaker.js"],"names":[],"mappings":"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","file":"ConvexObjectBreaker-compiled.js","sourcesContent":["console.warn( \"THREE.ConvexObjectBreaker: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * @fileoverview This class can be used to subdivide a convex Geometry object into pieces.\n *\n * Usage:\n *\n * Use the function prepareBreakableObject to prepare a Mesh object to be broken.\n *\n * Then, call the various functions to subdivide the object (subdivideByImpact, cutByPlane)\n *\n * Sub-objects that are product of subdivision don't need prepareBreakableObject to be called on them.\n *\n * Requisites for the object:\n *\n *  - Mesh object must have a BufferGeometry (not Geometry) and a Material\n *\n *  - Vertex normals must be planar (not smoothed)\n *\n *  - The geometry must be convex (this is not checked in the library). You can create convex\n *  geometries with THREE.ConvexBufferGeometry. The BoxBufferGeometry, SphereBufferGeometry and other convex primitives\n *  can also be used.\n *\n * Note: This lib adds member variables to object's userData member (see prepareBreakableObject function)\n * Use with caution and read the code when using with other libs.\n *\n * @param {double} minSizeForBreak Min size a debris can have to break.\n * @param {double} smallDelta Max distance to consider that a point belongs to a plane.\n *\n*/\n\nTHREE.ConvexObjectBreaker = function ( minSizeForBreak, smallDelta ) {\n\n\tthis.minSizeForBreak = minSizeForBreak || 1.4;\n\tthis.smallDelta = smallDelta || 0.0001;\n\n\tthis.tempLine1 = new THREE.Line3();\n\tthis.tempPlane1 = new THREE.Plane();\n\tthis.tempPlane2 = new THREE.Plane();\n\tthis.tempPlane_Cut = new THREE.Plane();\n\tthis.tempCM1 = new THREE.Vector3();\n\tthis.tempCM2 = new THREE.Vector3();\n\tthis.tempVector3 = new THREE.Vector3();\n\tthis.tempVector3_2 = new THREE.Vector3();\n\tthis.tempVector3_3 = new THREE.Vector3();\n\tthis.tempVector3_P0 = new THREE.Vector3();\n\tthis.tempVector3_P1 = new THREE.Vector3();\n\tthis.tempVector3_P2 = new THREE.Vector3();\n\tthis.tempVector3_N0 = new THREE.Vector3();\n\tthis.tempVector3_N1 = new THREE.Vector3();\n\tthis.tempVector3_AB = new THREE.Vector3();\n\tthis.tempVector3_CB = new THREE.Vector3();\n\tthis.tempResultObjects = { object1: null, object2: null };\n\n\tthis.segments = [];\n\tvar n = 30 * 30;\n\tfor ( var i = 0; i < n; i ++ ) this.segments[ i ] = false;\n\n};\n\nTHREE.ConvexObjectBreaker.prototype = {\n\n\tconstructor: THREE.ConvexObjectBreaker,\n\n\tprepareBreakableObject: function ( object, mass, velocity, angularVelocity, breakable ) {\n\n\t\t// object is a THREE.Object3d (normally a Mesh), must have a BufferGeometry, and it must be convex.\n\t\t// Its material property is propagated to its children (sub-pieces)\n\t\t// mass must be > 0\n\n\t\tif ( ! object.geometry.isBufferGeometry ) {\n\n\t\t\tconsole.error( 'THREE.ConvexObjectBreaker.prepareBreakableObject(): Parameter object must have a BufferGeometry.' );\n\n\t\t}\n\n\t\tvar userData = object.userData;\n\t\tuserData.mass = mass;\n\t\tuserData.velocity = velocity.clone();\n\t\tuserData.angularVelocity = angularVelocity.clone();\n\t\tuserData.breakable = breakable;\n\n\t},\n\n\t/*\n\t * @param {int} maxRadialIterations Iterations for radial cuts.\n\t * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n\t *\n\t * Returns the array of pieces\n\t */\n\tsubdivideByImpact: function ( object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations ) {\n\n\t\tvar debris = [];\n\n\t\tvar tempPlane1 = this.tempPlane1;\n\t\tvar tempPlane2 = this.tempPlane2;\n\n\t\tthis.tempVector3.addVectors( pointOfImpact, normal );\n\t\ttempPlane1.setFromCoplanarPoints( pointOfImpact, object.position, this.tempVector3 );\n\n\t\tvar maxTotalIterations = maxRandomIterations + maxRadialIterations;\n\n\t\tvar scope = this;\n\n\t\tfunction subdivideRadial( subObject, startAngle, endAngle, numIterations ) {\n\n\t\t\tif ( Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations ) {\n\n\t\t\t\tdebris.push( subObject );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar angle = Math.PI;\n\n\t\t\tif ( numIterations === 0 ) {\n\n\t\t\t\ttempPlane2.normal.copy( tempPlane1.normal );\n\t\t\t\ttempPlane2.constant = tempPlane1.constant;\n\n\t\t\t} else {\n\n\t\t\t\tif ( numIterations <= maxRadialIterations ) {\n\n\t\t\t\t\tangle = ( endAngle - startAngle ) * ( 0.2 + 0.6 * Math.random() ) + startAngle;\n\n\t\t\t\t\t// Rotate tempPlane2 at impact point around normal axis and the angle\n\t\t\t\t\tscope.tempVector3_2.copy( object.position ).sub( pointOfImpact ).applyAxisAngle( normal, angle ).add( pointOfImpact );\n\t\t\t\t\ttempPlane2.setFromCoplanarPoints( pointOfImpact, scope.tempVector3, scope.tempVector3_2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tangle = ( ( 0.5 * ( numIterations & 1 ) ) + 0.2 * ( 2 - Math.random() ) ) * Math.PI;\n\n\t\t\t\t\t// Rotate tempPlane2 at object position around normal axis and the angle\n\t\t\t\t\tscope.tempVector3_2.copy( pointOfImpact ).sub( subObject.position ).applyAxisAngle( normal, angle ).add( subObject.position );\n\t\t\t\t\tscope.tempVector3_3.copy( normal ).add( subObject.position );\n\t\t\t\t\ttempPlane2.setFromCoplanarPoints( subObject.position, scope.tempVector3_3, scope.tempVector3_2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Perform the cut\n\t\t\tscope.cutByPlane( subObject, tempPlane2, scope.tempResultObjects );\n\n\t\t\tvar obj1 = scope.tempResultObjects.object1;\n\t\t\tvar obj2 = scope.tempResultObjects.object2;\n\n\t\t\tif ( obj1 ) {\n\n\t\t\t\tsubdivideRadial( obj1, startAngle, angle, numIterations + 1 );\n\n\t\t\t}\n\n\t\t\tif ( obj2 ) {\n\n\t\t\t\tsubdivideRadial( obj2, angle, endAngle, numIterations + 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tsubdivideRadial( object, 0, 2 * Math.PI, 0 );\n\n\t\treturn debris;\n\n\t},\n\n\tcutByPlane: function ( object, plane, output ) {\n\n\t\t// Returns breakable objects in output.object1 and output.object2 members, the resulting 2 pieces of the cut.\n\t\t// object2 can be null if the plane doesn't cut the object.\n\t\t// object1 can be null only in case of internal error\n\t\t// Returned value is number of pieces, 0 for error.\n\n\t\tvar geometry = object.geometry;\n\t\tvar coords = geometry.attributes.position.array;\n\t\tvar normals = geometry.attributes.normal.array;\n\n\t\tvar numPoints = coords.length / 3;\n\t\tvar numFaces = numPoints / 3;\n\n\t\tvar indices = geometry.getIndex();\n\n\t\tif ( indices ) {\n\n\t\t\tindices = indices.array;\n\t\t\tnumFaces = indices.length / 3;\n\n\t\t}\n\n\t\tfunction getVertexIndex( faceIdx, vert ) {\n\n\t\t\t// vert = 0, 1 or 2.\n\n\t\t\tvar idx = faceIdx * 3 + vert;\n\n\t\t\treturn indices ? indices[ idx ] : idx;\n\n\t\t}\n\n\t\tvar points1 = [];\n\t\tvar points2 = [];\n\n\t\tvar delta = this.smallDelta;\n\n\t\t// Reset segments mark\n\t\tvar numPointPairs = numPoints * numPoints;\n\t\tfor ( var i = 0; i < numPointPairs; i ++ ) this.segments[ i ] = false;\n\n\t\tvar p0 = this.tempVector3_P0;\n\t\tvar p1 = this.tempVector3_P1;\n\t\tvar n0 = this.tempVector3_N0;\n\t\tvar n1 = this.tempVector3_N1;\n\n\t\t// Iterate through the faces to mark edges shared by coplanar faces\n\t\tfor ( var i = 0; i < numFaces - 1; i ++ ) {\n\n\t\t\tvar a1 = getVertexIndex( i, 0 );\n\t\t\tvar b1 = getVertexIndex( i, 1 );\n\t\t\tvar c1 = getVertexIndex( i, 2 );\n\n\t\t\t// Assuming all 3 vertices have the same normal\n\t\t\tn0.set( normals[ a1 ], normals[ a1 ] + 1, normals[ a1 ] + 2 );\n\n\t\t\tfor ( var j = i + 1; j < numFaces; j ++ ) {\n\n\t\t\t\tvar a2 = getVertexIndex( j, 0 );\n\t\t\t\tvar b2 = getVertexIndex( j, 1 );\n\t\t\t\tvar c2 = getVertexIndex( j, 2 );\n\n\t\t\t\t// Assuming all 3 vertices have the same normal\n\t\t\t\tn1.set( normals[ a2 ], normals[ a2 ] + 1, normals[ a2 ] + 2 );\n\n\t\t\t\tvar coplanar = 1 - n0.dot( n1 ) < delta;\n\n\t\t\t\tif ( coplanar ) {\n\n\t\t\t\t\tif ( a1 === a2 || a1 === b2 || a1 === c2 ) {\n\n\t\t\t\t\t\tif ( b1 === a2 || b1 === b2 || b1 === c2 ) {\n\n\t\t\t\t\t\t\tthis.segments[ a1 * numPoints + b1 ] = true;\n\t\t\t\t\t\t\tthis.segments[ b1 * numPoints + a1 ] = true;\n\n\t\t\t\t\t\t}\telse {\n\n\t\t\t\t\t\t\tthis.segments[ c1 * numPoints + a1 ] = true;\n\t\t\t\t\t\t\tthis.segments[ a1 * numPoints + c1 ] = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\telse if ( b1 === a2 || b1 === b2 || b1 === c2 ) {\n\n\t\t\t\t\t\tthis.segments[ c1 * numPoints + b1 ] = true;\n\t\t\t\t\t\tthis.segments[ b1 * numPoints + c1 ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Transform the plane to object local space\n\t\tvar localPlane = this.tempPlane_Cut;\n\t\tobject.updateMatrix();\n\t\tTHREE.ConvexObjectBreaker.transformPlaneToLocalSpace( plane, object.matrix, localPlane );\n\n\t\t// Iterate through the faces adding points to both pieces\n\t\tfor ( var i = 0; i < numFaces; i ++ ) {\n\n\t\t\tvar va = getVertexIndex( i, 0 );\n\t\t\tvar vb = getVertexIndex( i, 1 );\n\t\t\tvar vc = getVertexIndex( i, 2 );\n\n\t\t\tfor ( var segment = 0; segment < 3; segment ++ ) {\n\n\t\t\t\tvar i0 = segment === 0 ? va : ( segment === 1 ? vb : vc );\n\t\t\t\tvar i1 = segment === 0 ? vb : ( segment === 1 ? vc : va );\n\n\t\t\t\tvar segmentState = this.segments[ i0 * numPoints + i1 ];\n\n\t\t\t\tif ( segmentState ) continue; // The segment already has been processed in another face\n\n\t\t\t\t// Mark segment as processed (also inverted segment)\n\t\t\t\tthis.segments[ i0 * numPoints + i1 ] = true;\n\t\t\t\tthis.segments[ i1 * numPoints + i0 ] = true;\n\n\t\t\t\tp0.set( coords[ 3 * i0 ], coords[ 3 * i0 + 1 ], coords[ 3 * i0 + 2 ] );\n\t\t\t\tp1.set( coords[ 3 * i1 ], coords[ 3 * i1 + 1 ], coords[ 3 * i1 + 2 ] );\n\n\t\t\t\t// mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\t\t\t\tvar mark0 = 0;\n\n\t\t\t\tvar d = localPlane.distanceToPoint( p0 );\n\n\t\t\t\tif ( d > delta ) {\n\n\t\t\t\t\tmark0 = 2;\n\t\t\t\t\tpoints2.push( p0.clone() );\n\n\t\t\t\t} else if ( d < - delta ) {\n\n\t\t\t\t\tmark0 = 1;\n\t\t\t\t\tpoints1.push( p0.clone() );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmark0 = 3;\n\t\t\t\t\tpoints1.push( p0.clone() );\n\t\t\t\t\tpoints2.push( p0.clone() );\n\n\t\t\t\t}\n\n\t\t\t\t// mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\t\t\t\tvar mark1 = 0;\n\n\t\t\t\tvar d = localPlane.distanceToPoint( p1 );\n\n\t\t\t\tif ( d > delta ) {\n\n\t\t\t\t\tmark1 = 2;\n\t\t\t\t\tpoints2.push( p1.clone() );\n\n\t\t\t\t} else if ( d < - delta ) {\n\n\t\t\t\t\tmark1 = 1;\n\t\t\t\t\tpoints1.push( p1.clone() );\n\n\t\t\t\t}\telse {\n\n\t\t\t\t\tmark1 = 3;\n\t\t\t\t\tpoints1.push( p1.clone() );\n\t\t\t\t\tpoints2.push( p1.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( mark0 === 1 && mark1 === 2 ) || ( mark0 === 2 && mark1 === 1 ) ) {\n\n\t\t\t\t\t// Intersection of segment with the plane\n\n\t\t\t\t\tthis.tempLine1.start.copy( p0 );\n\t\t\t\t\tthis.tempLine1.end.copy( p1 );\n\n\t\t\t\t\tvar intersection = new THREE.Vector3();\n\t\t\t\t\tintersection = localPlane.intersectLine( this.tempLine1, intersection );\n\n\t\t\t\t\tif ( intersection === undefined ) {\n\n\t\t\t\t\t\t// Shouldn't happen\n\t\t\t\t\t\tconsole.error( \"Internal error: segment does not intersect plane.\" );\n\t\t\t\t\t\toutput.segmentedObject1 = null;\n\t\t\t\t\t\toutput.segmentedObject2 = null;\n\t\t\t\t\t\treturn 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpoints1.push( intersection );\n\t\t\t\t\tpoints2.push( intersection.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Calculate debris mass (very fast and imprecise):\n\t\tvar newMass = object.userData.mass * 0.5;\n\n\t\t// Calculate debris Center of Mass (again fast and imprecise)\n\t\tthis.tempCM1.set( 0, 0, 0 );\n\t\tvar radius1 = 0;\n\t\tvar numPoints1 = points1.length;\n\n\t\tif ( numPoints1 > 0 ) {\n\n\t\t\tfor ( var i = 0; i < numPoints1; i ++ ) this.tempCM1.add( points1[ i ] );\n\n\t\t\tthis.tempCM1.divideScalar( numPoints1 );\n\t\t\tfor ( var i = 0; i < numPoints1; i ++ ) {\n\n\t\t\t\tvar p = points1[ i ];\n\t\t\t\tp.sub( this.tempCM1 );\n\t\t\t\tradius1 = Math.max( radius1, p.x, p.y, p.z );\n\n\t\t\t}\n\n\t\t\tthis.tempCM1.add( object.position );\n\n\t\t}\n\n\t\tthis.tempCM2.set( 0, 0, 0 );\n\t\tvar radius2 = 0;\n\t\tvar numPoints2 = points2.length;\n\t\tif ( numPoints2 > 0 ) {\n\n\t\t\tfor ( var i = 0; i < numPoints2; i ++ ) this.tempCM2.add( points2[ i ] );\n\n\t\t\tthis.tempCM2.divideScalar( numPoints2 );\n\t\t\tfor ( var i = 0; i < numPoints2; i ++ ) {\n\n\t\t\t\tvar p = points2[ i ];\n\t\t\t\tp.sub( this.tempCM2 );\n\t\t\t\tradius2 = Math.max( radius2, p.x, p.y, p.z );\n\n\t\t\t}\n\n\t\t\tthis.tempCM2.add( object.position );\n\n\t\t}\n\n\t\tvar object1 = null;\n\t\tvar object2 = null;\n\n\t\tvar numObjects = 0;\n\n\t\tif ( numPoints1 > 4 ) {\n\n\t\t\tobject1 = new THREE.Mesh( new THREE.ConvexBufferGeometry( points1 ), object.material );\n\t\t\tobject1.position.copy( this.tempCM1 );\n\t\t\tobject1.quaternion.copy( object.quaternion );\n\n\t\t\tthis.prepareBreakableObject( object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak );\n\n\t\t\tnumObjects ++;\n\n\t\t}\n\n\t\tif ( numPoints2 > 4 ) {\n\n\t\t\tobject2 = new THREE.Mesh( new THREE.ConvexBufferGeometry( points2 ), object.material );\n\t\t\tobject2.position.copy( this.tempCM2 );\n\t\t\tobject2.quaternion.copy( object.quaternion );\n\n\t\t\tthis.prepareBreakableObject( object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak );\n\n\t\t\tnumObjects ++;\n\n\t\t}\n\n\t\toutput.object1 = object1;\n\t\toutput.object2 = object2;\n\n\t\treturn numObjects;\n\n\t}\n\n};\n\nTHREE.ConvexObjectBreaker.transformFreeVector = function ( v, m ) {\n\n\t// input:\n\t// vector interpreted as a free vector\n\t// THREE.Matrix4 orthogonal matrix (matrix without scale)\n\n\tvar x = v.x, y = v.y, z = v.z;\n\tvar e = m.elements;\n\n\tv.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\tv.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\tv.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\treturn v;\n\n};\n\nTHREE.ConvexObjectBreaker.transformFreeVectorInverse = function ( v, m ) {\n\n\t// input:\n\t// vector interpreted as a free vector\n\t// THREE.Matrix4 orthogonal matrix (matrix without scale)\n\n\tvar x = v.x, y = v.y, z = v.z;\n\tvar e = m.elements;\n\n\tv.x = e[ 0 ] * x + e[ 1 ] * y + e[ 2 ] * z;\n\tv.y = e[ 4 ] * x + e[ 5 ] * y + e[ 6 ] * z;\n\tv.z = e[ 8 ] * x + e[ 9 ] * y + e[ 10 ] * z;\n\n\treturn v;\n\n};\n\nTHREE.ConvexObjectBreaker.transformTiedVectorInverse = function ( v, m ) {\n\n\t// input:\n\t// vector interpreted as a tied (ordinary) vector\n\t// THREE.Matrix4 orthogonal matrix (matrix without scale)\n\n\tvar x = v.x, y = v.y, z = v.z;\n\tvar e = m.elements;\n\n\tv.x = e[ 0 ] * x + e[ 1 ] * y + e[ 2 ] * z - e[ 12 ];\n\tv.y = e[ 4 ] * x + e[ 5 ] * y + e[ 6 ] * z - e[ 13 ];\n\tv.z = e[ 8 ] * x + e[ 9 ] * y + e[ 10 ] * z - e[ 14 ];\n\n\treturn v;\n\n};\n\nTHREE.ConvexObjectBreaker.transformPlaneToLocalSpace = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function transformPlaneToLocalSpace( plane, m, resultPlane ) {\n\n\t\tresultPlane.normal.copy( plane.normal );\n\t\tresultPlane.constant = plane.constant;\n\n\t\tvar referencePoint = THREE.ConvexObjectBreaker.transformTiedVectorInverse( plane.coplanarPoint( v1 ), m );\n\n\t\tTHREE.ConvexObjectBreaker.transformFreeVectorInverse( resultPlane.normal, m );\n\n\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\tresultPlane.constant = - referencePoint.dot( resultPlane.normal );\n\n\n\t};\n\n}();\n"]}