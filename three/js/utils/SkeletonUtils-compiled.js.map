{"version":3,"sources":["SkeletonUtils.js"],"names":[],"mappings":"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","file":"SkeletonUtils-compiled.js","sourcesContent":["console.warn( \"THREE.SkeletonUtils: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.SkeletonUtils = {\n\n\tretarget: function () {\n\n\t\tvar pos = new THREE.Vector3(),\n\t\t\tquat = new THREE.Quaternion(),\n\t\t\tscale = new THREE.Vector3(),\n\t\t\tbindBoneMatrix = new THREE.Matrix4(),\n\t\t\trelativeMatrix = new THREE.Matrix4(),\n\t\t\tglobalMatrix = new THREE.Matrix4();\n\n\t\treturn function ( target, source, options ) {\n\n\t\t\toptions = options || {};\n\t\t\toptions.preserveMatrix = options.preserveMatrix !== undefined ? options.preserveMatrix : true;\n\t\t\toptions.preservePosition = options.preservePosition !== undefined ? options.preservePosition : true;\n\t\t\toptions.preserveHipPosition = options.preserveHipPosition !== undefined ? options.preserveHipPosition : false;\n\t\t\toptions.useTargetMatrix = options.useTargetMatrix !== undefined ? options.useTargetMatrix : false;\n\t\t\toptions.hip = options.hip !== undefined ? options.hip : \"hip\";\n\t\t\toptions.names = options.names || {};\n\n\t\t\tvar sourceBones = source.isObject3D ? source.skeleton.bones : this.getBones( source ),\n\t\t\t\tbones = target.isObject3D ? target.skeleton.bones : this.getBones( target ),\n\t\t\t\tbindBones,\n\t\t\t\tbone, name, boneTo,\n\t\t\t\tbonesPosition, i;\n\n\t\t\t// reset bones\n\n\t\t\tif ( target.isObject3D ) {\n\n\t\t\t\ttarget.skeleton.pose();\n\n\t\t\t} else {\n\n\t\t\t\toptions.useTargetMatrix = true;\n\t\t\t\toptions.preserveMatrix = false;\n\n\t\t\t}\n\n\t\t\tif ( options.preservePosition ) {\n\n\t\t\t\tbonesPosition = [];\n\n\t\t\t\tfor ( i = 0; i < bones.length; i ++ ) {\n\n\t\t\t\t\tbonesPosition.push( bones[ i ].position.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( options.preserveMatrix ) {\n\n\t\t\t\t// reset matrix\n\n\t\t\t\ttarget.updateMatrixWorld();\n\n\t\t\t\ttarget.matrixWorld.identity();\n\n\t\t\t\t// reset children matrix\n\n\t\t\t\tfor ( i = 0; i < target.children.length; ++ i ) {\n\n\t\t\t\t\ttarget.children[ i ].updateMatrixWorld( true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( options.offsets ) {\n\n\t\t\t\tbindBones = [];\n\n\t\t\t\tfor ( i = 0; i < bones.length; ++ i ) {\n\n\t\t\t\t\tbone = bones[ i ];\n\t\t\t\t\tname = options.names[ bone.name ] || bone.name;\n\n\t\t\t\t\tif ( options.offsets && options.offsets[ name ] ) {\n\n\t\t\t\t\t\tbone.matrix.multiply( options.offsets[ name ] );\n\n\t\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t\t\tbone.updateMatrixWorld();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindBones.push( bone.matrixWorld.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < bones.length; ++ i ) {\n\n\t\t\t\tbone = bones[ i ];\n\t\t\t\tname = options.names[ bone.name ] || bone.name;\n\n\t\t\t\tboneTo = this.getBoneByName( name, sourceBones );\n\n\t\t\t\tglobalMatrix.copy( bone.matrixWorld );\n\n\t\t\t\tif ( boneTo ) {\n\n\t\t\t\t\tboneTo.updateMatrixWorld();\n\n\t\t\t\t\tif ( options.useTargetMatrix ) {\n\n\t\t\t\t\t\trelativeMatrix.copy( boneTo.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trelativeMatrix.getInverse( target.matrixWorld );\n\t\t\t\t\t\trelativeMatrix.multiply( boneTo.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// ignore scale to extract rotation\n\n\t\t\t\t\tscale.setFromMatrixScale( relativeMatrix );\n\t\t\t\t\trelativeMatrix.scale( scale.set( 1 / scale.x, 1 / scale.y, 1 / scale.z ) );\n\n\t\t\t\t\t// apply to global matrix\n\n\t\t\t\t\tglobalMatrix.makeRotationFromQuaternion( quat.setFromRotationMatrix( relativeMatrix ) );\n\n\t\t\t\t\tif ( target.isObject3D ) {\n\n\t\t\t\t\t\tvar boneIndex = bones.indexOf( bone ),\n\t\t\t\t\t\t\twBindMatrix = bindBones ? bindBones[ boneIndex ] : bindBoneMatrix.getInverse( target.skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\t\t\tglobalMatrix.multiply( wBindMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglobalMatrix.copyPosition( relativeMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( globalMatrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( globalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( options.preserveHipPosition && name === options.hip ) {\n\n\t\t\t\t\tbone.matrix.setPosition( pos.set( 0, bone.position.y, 0 ) );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\tbone.updateMatrixWorld();\n\n\t\t\t}\n\n\t\t\tif ( options.preservePosition ) {\n\n\t\t\t\tfor ( i = 0; i < bones.length; ++ i ) {\n\n\t\t\t\t\tbone = bones[ i ];\n\t\t\t\t\tname = options.names[ bone.name ] || bone.name;\n\n\t\t\t\t\tif ( name !== options.hip ) {\n\n\t\t\t\t\t\tbone.position.copy( bonesPosition[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( options.preserveMatrix ) {\n\n\t\t\t\t// restore matrix\n\n\t\t\t\ttarget.updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tretargetClip: function ( target, source, clip, options ) {\n\n\t\toptions = options || {};\n\t\toptions.useFirstFramePosition = options.useFirstFramePosition !== undefined ? options.useFirstFramePosition : false;\n\t\toptions.fps = options.fps !== undefined ? options.fps : 30;\n\t\toptions.names = options.names || [];\n\n\t\tif ( ! source.isObject3D ) {\n\n\t\t\tsource = this.getHelperFromSkeleton( source );\n\n\t\t}\n\n\t\tvar numFrames = Math.round( clip.duration * ( options.fps / 1000 ) * 1000 ),\n\t\t\tdelta = 1 / options.fps,\n\t\t\tconvertedTracks = [],\n\t\t\tmixer = new THREE.AnimationMixer( source ),\n\t\t\tbones = this.getBones( target.skeleton ),\n\t\t\tboneDatas = [],\n\t\t\tpositionOffset,\n\t\t\tbone, boneTo, boneData,\n\t\t\tname, i, j;\n\n\t\tmixer.clipAction( clip ).play();\n\t\tmixer.update( 0 );\n\n\t\tsource.updateMatrixWorld();\n\n\t\tfor ( i = 0; i < numFrames; ++ i ) {\n\n\t\t\tvar time = i * delta;\n\n\t\t\tthis.retarget( target, source, options );\n\n\t\t\tfor ( j = 0; j < bones.length; ++ j ) {\n\n\t\t\t\tname = options.names[ bones[ j ].name ] || bones[ j ].name;\n\n\t\t\t\tboneTo = this.getBoneByName( name, source.skeleton );\n\n\t\t\t\tif ( boneTo ) {\n\n\t\t\t\t\tbone = bones[ j ];\n\t\t\t\t\tboneData = boneDatas[ j ] = boneDatas[ j ] || { bone: bone };\n\n\t\t\t\t\tif ( options.hip === name ) {\n\n\t\t\t\t\t\tif ( ! boneData.pos ) {\n\n\t\t\t\t\t\t\tboneData.pos = {\n\t\t\t\t\t\t\t\ttimes: new Float32Array( numFrames ),\n\t\t\t\t\t\t\t\tvalues: new Float32Array( numFrames * 3 )\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( options.useFirstFramePosition ) {\n\n\t\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\t\tpositionOffset = bone.position.clone();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbone.position.sub( positionOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tboneData.pos.times[ i ] = time;\n\n\t\t\t\t\t\tbone.position.toArray( boneData.pos.values, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! boneData.quat ) {\n\n\t\t\t\t\t\tboneData.quat = {\n\t\t\t\t\t\t\ttimes: new Float32Array( numFrames ),\n\t\t\t\t\t\t\tvalues: new Float32Array( numFrames * 4 )\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneData.quat.times[ i ] = time;\n\n\t\t\t\t\tbone.quaternion.toArray( boneData.quat.values, i * 4 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmixer.update( delta );\n\n\t\t\tsource.updateMatrixWorld();\n\n\t\t}\n\n\t\tfor ( i = 0; i < boneDatas.length; ++ i ) {\n\n\t\t\tboneData = boneDatas[ i ];\n\n\t\t\tif ( boneData ) {\n\n\t\t\t\tif ( boneData.pos ) {\n\n\t\t\t\t\tconvertedTracks.push( new THREE.VectorKeyframeTrack(\n\t\t\t\t\t\t\".bones[\" + boneData.bone.name + \"].position\",\n\t\t\t\t\t\tboneData.pos.times,\n\t\t\t\t\t\tboneData.pos.values\n\t\t\t\t\t) );\n\n\t\t\t\t}\n\n\t\t\t\tconvertedTracks.push( new THREE.QuaternionKeyframeTrack(\n\t\t\t\t\t\".bones[\" + boneData.bone.name + \"].quaternion\",\n\t\t\t\t\tboneData.quat.times,\n\t\t\t\t\tboneData.quat.values\n\t\t\t\t) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tmixer.uncacheAction( clip );\n\n\t\treturn new THREE.AnimationClip( clip.name, - 1, convertedTracks );\n\n\t},\n\n\tgetHelperFromSkeleton: function ( skeleton ) {\n\n\t\tvar source = new THREE.SkeletonHelper( skeleton.bones[ 0 ] );\n\t\tsource.skeleton = skeleton;\n\n\t\treturn source;\n\n\t},\n\n\tgetSkeletonOffsets: function () {\n\n\t\tvar targetParentPos = new THREE.Vector3(),\n\t\t\ttargetPos = new THREE.Vector3(),\n\t\t\tsourceParentPos = new THREE.Vector3(),\n\t\t\tsourcePos = new THREE.Vector3(),\n\t\t\ttargetDir = new THREE.Vector2(),\n\t\t\tsourceDir = new THREE.Vector2();\n\n\t\treturn function ( target, source, options ) {\n\n\t\t\toptions = options || {};\n\t\t\toptions.hip = options.hip !== undefined ? options.hip : \"hip\";\n\t\t\toptions.names = options.names || {};\n\n\t\t\tif ( ! source.isObject3D ) {\n\n\t\t\t\tsource = this.getHelperFromSkeleton( source );\n\n\t\t\t}\n\n\t\t\tvar nameKeys = Object.keys( options.names ),\n\t\t\t\tnameValues = Object.values( options.names ),\n\t\t\t\tsourceBones = source.isObject3D ? source.skeleton.bones : this.getBones( source ),\n\t\t\t\tbones = target.isObject3D ? target.skeleton.bones : this.getBones( target ),\n\t\t\t\toffsets = [],\n\t\t\t\tbone, boneTo,\n\t\t\t\tname, i;\n\n\t\t\ttarget.skeleton.pose();\n\n\t\t\tfor ( i = 0; i < bones.length; ++ i ) {\n\n\t\t\t\tbone = bones[ i ];\n\t\t\t\tname = options.names[ bone.name ] || bone.name;\n\n\t\t\t\tboneTo = this.getBoneByName( name, sourceBones );\n\n\t\t\t\tif ( boneTo && name !== options.hip ) {\n\n\t\t\t\t\tvar boneParent = this.getNearestBone( bone.parent, nameKeys ),\n\t\t\t\t\t\tboneToParent = this.getNearestBone( boneTo.parent, nameValues );\n\n\t\t\t\t\tboneParent.updateMatrixWorld();\n\t\t\t\t\tboneToParent.updateMatrixWorld();\n\n\t\t\t\t\ttargetParentPos.setFromMatrixPosition( boneParent.matrixWorld );\n\t\t\t\t\ttargetPos.setFromMatrixPosition( bone.matrixWorld );\n\n\t\t\t\t\tsourceParentPos.setFromMatrixPosition( boneToParent.matrixWorld );\n\t\t\t\t\tsourcePos.setFromMatrixPosition( boneTo.matrixWorld );\n\n\t\t\t\t\ttargetDir.subVectors(\n\t\t\t\t\t\tnew THREE.Vector2( targetPos.x, targetPos.y ),\n\t\t\t\t\t\tnew THREE.Vector2( targetParentPos.x, targetParentPos.y )\n\t\t\t\t\t).normalize();\n\n\t\t\t\t\tsourceDir.subVectors(\n\t\t\t\t\t\tnew THREE.Vector2( sourcePos.x, sourcePos.y ),\n\t\t\t\t\t\tnew THREE.Vector2( sourceParentPos.x, sourceParentPos.y )\n\t\t\t\t\t).normalize();\n\n\t\t\t\t\tvar laterialAngle = targetDir.angle() - sourceDir.angle();\n\n\t\t\t\t\tvar offset = new THREE.Matrix4().makeRotationFromEuler(\n\t\t\t\t\t\tnew THREE.Euler(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tlaterialAngle\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tbone.matrix.multiply( offset );\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t\tbone.updateMatrixWorld();\n\n\t\t\t\t\toffsets[ name ] = offset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn offsets;\n\n\t\t};\n\n\t}(),\n\n\trenameBones: function ( skeleton, names ) {\n\n\t\tvar bones = this.getBones( skeleton );\n\n\t\tfor ( var i = 0; i < bones.length; ++ i ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( names[ bone.name ] ) {\n\n\t\t\t\tbone.name = names[ bone.name ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetBones: function ( skeleton ) {\n\n\t\treturn Array.isArray( skeleton ) ? skeleton : skeleton.bones;\n\n\t},\n\n\tgetBoneByName: function ( name, skeleton ) {\n\n\t\tfor ( var i = 0, bones = this.getBones( skeleton ); i < bones.length; i ++ ) {\n\n\t\t\tif ( name === bones[ i ].name )\n\n\t\t\t\treturn bones[ i ];\n\n\t\t}\n\n\t},\n\n\tgetNearestBone: function ( bone, names ) {\n\n\t\twhile ( bone.isBone ) {\n\n\t\t\tif ( names.indexOf( bone.name ) !== - 1 ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t\tbone = bone.parent;\n\n\t\t}\n\n\t},\n\n\tfindBoneTrackData: function ( name, tracks ) {\n\n\t\tvar regexp = /\\[(.*)\\]\\.(.*)/,\n\t\t\tresult = { name: name };\n\n\t\tfor ( var i = 0; i < tracks.length; ++ i ) {\n\n\t\t\t// 1 is track name\n\t\t\t// 2 is track type\n\t\t\tvar trackData = regexp.exec( tracks[ i ].name );\n\n\t\t\tif ( trackData && name === trackData[ 1 ] ) {\n\n\t\t\t\tresult[ trackData[ 2 ] ] = i;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetEqualsBonesNames: function ( skeleton, targetSkeleton ) {\n\n\t\tvar sourceBones = this.getBones( skeleton ),\n\t\t\ttargetBones = this.getBones( targetSkeleton ),\n\t\t\tbones = [];\n\n\t\tsearch : for ( var i = 0; i < sourceBones.length; i ++ ) {\n\n\t\t\tvar boneName = sourceBones[ i ].name;\n\n\t\t\tfor ( var j = 0; j < targetBones.length; j ++ ) {\n\n\t\t\t\tif ( boneName === targetBones[ j ].name ) {\n\n\t\t\t\t\tbones.push( boneName );\n\n\t\t\t\t\tcontinue search;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bones;\n\n\t},\n\n\tclone: function ( source ) {\n\n\t\tvar sourceLookup = new Map();\n\t\tvar cloneLookup = new Map();\n\n\t\tvar clone = source.clone();\n\n\t\tparallelTraverse( source, clone, function ( sourceNode, clonedNode ) {\n\n\t\t\tsourceLookup.set( clonedNode, sourceNode );\n\t\t\tcloneLookup.set( sourceNode, clonedNode );\n\n\t\t} );\n\n\t\tclone.traverse( function ( node ) {\n\n\t\t\tif ( ! node.isSkinnedMesh ) return;\n\n\t\t\tvar clonedMesh = node;\n\t\t\tvar sourceMesh = sourceLookup.get( node );\n\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\tclonedMesh.bindMatrix.copy( sourceMesh.bindMatrix );\n\n\t\t\tclonedMesh.skeleton.bones = sourceBones.map( function ( bone ) {\n\n\t\t\t\treturn cloneLookup.get( bone );\n\n\t\t\t} );\n\n\t\t\tclonedMesh.bind( clonedMesh.skeleton, clonedMesh.bindMatrix );\n\n\t\t} );\n\n\t\treturn clone;\n\n\t}\n\n};\n\n\nfunction parallelTraverse( a, b, callback ) {\n\n\tcallback( a, b );\n\n\tfor ( var i = 0; i < a.children.length; i ++ ) {\n\n\t\tparallelTraverse( a.children[ i ], b.children[ i ], callback );\n\n\t}\n\n}\n"]}