{"version":3,"sources":["BufferGeometryUtils.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,oTAAd;;AAEA,MAAM,mBAAN,GAA4B;;AAE3B,kBAAiB,UAAW,QAAX,EAAsB;;AAEtC,MAAI,QAAQ,SAAS,KAArB;AACA,MAAI,aAAa,SAAS,UAA1B;;AAEA;AACA;;AAEA,MAAK,UAAU,IAAV,IACH,WAAW,QAAX,KAAwB,SADrB,IAEH,WAAW,MAAX,KAAsB,SAFnB,IAGH,WAAW,EAAX,KAAkB,SAHpB,EAGgC;;AAE/B,WAAQ,KAAR,CAAe,mHAAf;AACA;AAEA;;AAED,MAAI,UAAU,MAAM,KAApB;AACA,MAAI,YAAY,WAAW,QAAX,CAAoB,KAApC;AACA,MAAI,UAAU,WAAW,MAAX,CAAkB,KAAhC;AACA,MAAI,MAAM,WAAW,EAAX,CAAc,KAAxB;;AAEA,MAAI,YAAY,UAAU,MAAV,GAAmB,CAAnC;;AAEA,MAAK,WAAW,OAAX,KAAuB,SAA5B,EAAwC;;AAEvC,YAAS,YAAT,CAAuB,SAAvB,EAAkC,IAAI,MAAM,eAAV,CAA2B,IAAI,YAAJ,CAAkB,IAAI,SAAtB,CAA3B,EAA8D,CAA9D,CAAlC;AAEA;;AAED,MAAI,WAAW,WAAW,OAAX,CAAmB,KAAlC;;AAEA,MAAI,OAAO,EAAX;AAAA,MAAe,OAAO,EAAtB;;AAEA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,SAArB,EAAgC,GAAhC,EAAuC;;AAEtC,QAAM,CAAN,IAAY,IAAI,MAAM,OAAV,EAAZ;AACA,QAAM,CAAN,IAAY,IAAI,MAAM,OAAV,EAAZ;AAEA;;AAED,MAAI,KAAK,IAAI,MAAM,OAAV,EAAT;AAAA,MACC,KAAK,IAAI,MAAM,OAAV,EADN;AAAA,MAEC,KAAK,IAAI,MAAM,OAAV,EAFN;AAAA,MAIC,MAAM,IAAI,MAAM,OAAV,EAJP;AAAA,MAKC,MAAM,IAAI,MAAM,OAAV,EALP;AAAA,MAMC,MAAM,IAAI,MAAM,OAAV,EANP;AAAA,MAQC,OAAO,IAAI,MAAM,OAAV,EARR;AAAA,MASC,OAAO,IAAI,MAAM,OAAV,EATR;;AAWA,WAAS,cAAT,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAmC;;AAElC,MAAG,SAAH,CAAc,SAAd,EAAyB,IAAI,CAA7B;AACA,MAAG,SAAH,CAAc,SAAd,EAAyB,IAAI,CAA7B;AACA,MAAG,SAAH,CAAc,SAAd,EAAyB,IAAI,CAA7B;;AAEA,OAAI,SAAJ,CAAe,GAAf,EAAoB,IAAI,CAAxB;AACA,OAAI,SAAJ,CAAe,GAAf,EAAoB,IAAI,CAAxB;AACA,OAAI,SAAJ,CAAe,GAAf,EAAoB,IAAI,CAAxB;;AAEA,MAAG,GAAH,CAAQ,EAAR;AACA,MAAG,GAAH,CAAQ,EAAR;;AAEA,OAAI,GAAJ,CAAS,GAAT;AACA,OAAI,GAAJ,CAAS,GAAT;;AAEA,OAAI,IAAI,OAAQ,IAAI,CAAJ,GAAQ,IAAI,CAAZ,GAAgB,IAAI,CAAJ,GAAQ,IAAI,CAApC,CAAR;;AAEA;;AAEA,OAAK,CAAE,SAAU,CAAV,CAAP,EAAuB;;AAEvB,QAAK,IAAL,CAAW,EAAX,EAAgB,cAAhB,CAAgC,IAAI,CAApC,EAAwC,eAAxC,CAAyD,EAAzD,EAA6D,CAAE,IAAI,CAAnE,EAAuE,cAAvE,CAAuF,CAAvF;AACA,QAAK,IAAL,CAAW,EAAX,EAAgB,cAAhB,CAAgC,IAAI,CAApC,EAAwC,eAAxC,CAAyD,EAAzD,EAA6D,CAAE,IAAI,CAAnE,EAAuE,cAAvE,CAAuF,CAAvF;;AAEA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;AACA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;AACA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;;AAEA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;AACA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;AACA,QAAM,CAAN,EAAU,GAAV,CAAe,IAAf;AAEA;;AAED,MAAI,SAAS,SAAS,MAAtB;;AAEA,MAAK,OAAO,MAAP,KAAkB,CAAvB,EAA2B;;AAE1B,YAAS,CAAE;AACV,WAAO,CADG;AAEV,WAAO,QAAQ;AAFL,IAAF,CAAT;AAKA;;AAED,OAAM,IAAI,IAAI,CAAR,EAAW,KAAK,OAAO,MAA7B,EAAqC,IAAI,EAAzC,EAA6C,EAAG,CAAhD,EAAoD;;AAEnD,OAAI,QAAQ,OAAQ,CAAR,CAAZ;;AAEA,OAAI,QAAQ,MAAM,KAAlB;AACA,OAAI,QAAQ,MAAM,KAAlB;;AAEA,QAAM,IAAI,IAAI,KAAR,EAAe,KAAK,QAAQ,KAAlC,EAAyC,IAAI,EAA7C,EAAiD,KAAK,CAAtD,EAA0D;;AAEzD,mBACC,QAAS,IAAI,CAAb,CADD,EAEC,QAAS,IAAI,CAAb,CAFD,EAGC,QAAS,IAAI,CAAb,CAHD;AAMA;AAED;;AAED,MAAI,MAAM,IAAI,MAAM,OAAV,EAAV;AAAA,MAA+B,OAAO,IAAI,MAAM,OAAV,EAAtC;AACA,MAAI,IAAI,IAAI,MAAM,OAAV,EAAR;AAAA,MAA6B,KAAK,IAAI,MAAM,OAAV,EAAlC;AACA,MAAI,CAAJ,EAAO,CAAP,EAAU,IAAV;;AAEA,WAAS,YAAT,CAAuB,CAAvB,EAA2B;;AAE1B,KAAE,SAAF,CAAa,OAAb,EAAsB,IAAI,CAA1B;AACA,MAAG,IAAH,CAAS,CAAT;;AAEA,OAAI,KAAM,CAAN,CAAJ;;AAEA;;AAEA,OAAI,IAAJ,CAAU,CAAV;AACA,OAAI,GAAJ,CAAS,EAAE,cAAF,CAAkB,EAAE,GAAF,CAAO,CAAP,CAAlB,CAAT,EAA0C,SAA1C;;AAEA;;AAEA,QAAK,YAAL,CAAmB,EAAnB,EAAuB,CAAvB;AACA,UAAO,KAAK,GAAL,CAAU,KAAM,CAAN,CAAV,CAAP;AACA,OAAM,OAAO,GAAT,GAAiB,CAAE,GAAnB,GAAyB,GAA7B;;AAEA,YAAU,IAAI,CAAd,IAAoB,IAAI,CAAxB;AACA,YAAU,IAAI,CAAJ,GAAQ,CAAlB,IAAwB,IAAI,CAA5B;AACA,YAAU,IAAI,CAAJ,GAAQ,CAAlB,IAAwB,IAAI,CAA5B;AACA,YAAU,IAAI,CAAJ,GAAQ,CAAlB,IAAwB,CAAxB;AAEA;;AAED,OAAM,IAAI,IAAI,CAAR,EAAW,KAAK,OAAO,MAA7B,EAAqC,IAAI,EAAzC,EAA6C,EAAG,CAAhD,EAAoD;;AAEnD,OAAI,QAAQ,OAAQ,CAAR,CAAZ;;AAEA,OAAI,QAAQ,MAAM,KAAlB;AACA,OAAI,QAAQ,MAAM,KAAlB;;AAEA,QAAM,IAAI,IAAI,KAAR,EAAe,KAAK,QAAQ,KAAlC,EAAyC,IAAI,EAA7C,EAAiD,KAAK,CAAtD,EAA0D;;AAEzD,iBAAc,QAAS,IAAI,CAAb,CAAd;AACA,iBAAc,QAAS,IAAI,CAAb,CAAd;AACA,iBAAc,QAAS,IAAI,CAAb,CAAd;AAEA;AAED;AAED,EAtK0B;;AAwK3B;;;;;AAKA,wBAAuB,UAAW,UAAX,EAAuB,SAAvB,EAAmC;;AAEzD,MAAI,YAAY,WAAY,CAAZ,EAAgB,KAAhB,KAA0B,IAA1C;;AAEA,MAAI,iBAAiB,IAAI,GAAJ,CAAS,OAAO,IAAP,CAAa,WAAY,CAAZ,EAAgB,UAA7B,CAAT,CAArB;AACA,MAAI,sBAAsB,IAAI,GAAJ,CAAS,OAAO,IAAP,CAAa,WAAY,CAAZ,EAAgB,eAA7B,CAAT,CAA1B;;AAEA,MAAI,aAAa,EAAjB;AACA,MAAI,kBAAkB,EAAtB;;AAEA,MAAI,uBAAuB,WAAY,CAAZ,EAAgB,oBAA3C;;AAEA,MAAI,iBAAiB,IAAI,MAAM,cAAV,EAArB;;AAEA,MAAI,SAAS,CAAb;;AAEA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,WAAW,MAAhC,EAAwC,EAAG,CAA3C,EAA+C;;AAE9C,OAAI,WAAW,WAAY,CAAZ,CAAf;AACA,OAAI,kBAAkB,CAAtB;;AAEA;;AAEA,OAAK,eAAgB,SAAS,KAAT,KAAmB,IAAnC,CAAL,EAAiD;;AAEhD,YAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,8HAA1G;AACA,WAAO,IAAP;AAEA;;AAED;;AAEA,QAAM,IAAI,IAAV,IAAkB,SAAS,UAA3B,EAAwC;;AAEvC,QAAK,CAAE,eAAe,GAAf,CAAoB,IAApB,CAAP,EAAoC;;AAEnC,aAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,+DAA3F,GAA6J,IAA7J,GAAoK,8DAAnL;AACA,YAAO,IAAP;AAEA;;AAED,QAAK,WAAY,IAAZ,MAAuB,SAA5B,EAAwC,WAAY,IAAZ,IAAqB,EAArB;;AAExC,eAAY,IAAZ,EAAmB,IAAnB,CAAyB,SAAS,UAAT,CAAqB,IAArB,CAAzB;;AAEA;AAEA;;AAED;;AAEA,OAAK,oBAAoB,eAAe,IAAxC,EAA+C;;AAE9C,YAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,gEAA1G;AACA,WAAO,IAAP;AAEA;;AAED;;AAEA,OAAK,yBAAyB,SAAS,oBAAvC,EAA8D;;AAE7D,YAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,uEAA1G;AACA,WAAO,IAAP;AAEA;;AAED,QAAM,IAAI,IAAV,IAAkB,SAAS,eAA3B,EAA6C;;AAE5C,QAAK,CAAE,oBAAoB,GAApB,CAAyB,IAAzB,CAAP,EAAyC;;AAExC,aAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,mEAA1G;AACA,YAAO,IAAP;AAEA;;AAED,QAAK,gBAAiB,IAAjB,MAA4B,SAAjC,EAA6C,gBAAiB,IAAjB,IAA0B,EAA1B;;AAE7C,oBAAiB,IAAjB,EAAwB,IAAxB,CAA8B,SAAS,eAAT,CAA0B,IAA1B,CAA9B;AAEA;;AAED;;AAEA,kBAAe,QAAf,CAAwB,cAAxB,GAAyC,eAAe,QAAf,CAAwB,cAAxB,IAA0C,EAAnF;AACA,kBAAe,QAAf,CAAwB,cAAxB,CAAuC,IAAvC,CAA6C,SAAS,QAAtD;;AAEA,OAAK,SAAL,EAAiB;;AAEhB,QAAI,KAAJ;;AAEA,QAAK,SAAL,EAAiB;;AAEhB,aAAQ,SAAS,KAAT,CAAe,KAAvB;AAEA,KAJD,MAIO,IAAK,SAAS,UAAT,CAAoB,QAApB,KAAiC,SAAtC,EAAkD;;AAExD,aAAQ,SAAS,UAAT,CAAoB,QAApB,CAA6B,KAArC;AAEA,KAJM,MAIA;;AAEN,aAAQ,KAAR,CAAe,uFAAuF,CAAvF,GAA2F,kEAA1G;AACA,YAAO,IAAP;AAEA;;AAED,mBAAe,QAAf,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,CAAxC;;AAEA,cAAU,KAAV;AAEA;AAED;;AAED;;AAEA,MAAK,SAAL,EAAiB;;AAEhB,OAAI,cAAc,CAAlB;AACA,OAAI,cAAc,EAAlB;;AAEA,QAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,WAAW,MAAhC,EAAwC,EAAG,CAA3C,EAA+C;;AAE9C,QAAI,QAAQ,WAAY,CAAZ,EAAgB,KAA5B;;AAEA,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,MAAM,KAA3B,EAAkC,EAAG,CAArC,EAAyC;;AAExC,iBAAY,IAAZ,CAAkB,MAAM,IAAN,CAAY,CAAZ,IAAkB,WAApC;AAEA;;AAED,mBAAe,WAAY,CAAZ,EAAgB,UAAhB,CAA2B,QAA3B,CAAoC,KAAnD;AAEA;;AAED,kBAAe,QAAf,CAAyB,WAAzB;AAEA;;AAED;;AAEA,OAAM,IAAI,IAAV,IAAkB,UAAlB,EAA+B;;AAE9B,OAAI,kBAAkB,KAAK,qBAAL,CAA4B,WAAY,IAAZ,CAA5B,CAAtB;;AAEA,OAAK,CAAE,eAAP,EAAyB;;AAExB,YAAQ,KAAR,CAAe,0FAA0F,IAA1F,GAAiG,aAAhH;AACA,WAAO,IAAP;AAEA;;AAED,kBAAe,YAAf,CAA6B,IAA7B,EAAmC,eAAnC;AAEA;;AAED;;AAEA,OAAM,IAAI,IAAV,IAAkB,eAAlB,EAAoC;;AAEnC,OAAI,kBAAkB,gBAAiB,IAAjB,EAAyB,CAAzB,EAA6B,MAAnD;;AAEA,OAAK,oBAAoB,CAAzB,EAA6B;;AAE7B,kBAAe,eAAf,GAAiC,eAAe,eAAf,IAAkC,EAAnE;AACA,kBAAe,eAAf,CAAgC,IAAhC,IAAyC,EAAzC;;AAEA,QAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,eAArB,EAAsC,EAAG,CAAzC,EAA6C;;AAE5C,QAAI,yBAAyB,EAA7B;;AAEA,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,gBAAiB,IAAjB,EAAwB,MAA7C,EAAqD,EAAG,CAAxD,EAA4D;;AAE3D,4BAAuB,IAAvB,CAA6B,gBAAiB,IAAjB,EAAyB,CAAzB,EAA8B,CAA9B,CAA7B;AAEA;;AAED,QAAI,uBAAuB,KAAK,qBAAL,CAA4B,sBAA5B,CAA3B;;AAEA,QAAK,CAAE,oBAAP,EAA8B;;AAE7B,aAAQ,KAAR,CAAe,0FAA0F,IAA1F,GAAiG,kBAAhH;AACA,YAAO,IAAP;AAEA;;AAED,mBAAe,eAAf,CAAgC,IAAhC,EAAuC,IAAvC,CAA6C,oBAA7C;AAEA;AAED;;AAED,SAAO,cAAP;AAEA,EA/W0B;;AAiX3B;;;;AAIA,wBAAuB,UAAW,UAAX,EAAwB;;AAE9C,MAAI,UAAJ;AACA,MAAI,QAAJ;AACA,MAAI,UAAJ;AACA,MAAI,cAAc,CAAlB;;AAEA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,WAAW,MAAhC,EAAwC,EAAG,CAA3C,EAA+C;;AAE9C,OAAI,YAAY,WAAY,CAAZ,CAAhB;;AAEA,OAAK,UAAU,4BAAf,EAA8C;;AAE7C,YAAQ,KAAR,CAAe,4GAAf;AACA,WAAO,IAAP;AAEA;;AAED,OAAK,eAAe,SAApB,EAAgC,aAAa,UAAU,KAAV,CAAgB,WAA7B;AAChC,OAAK,eAAe,UAAU,KAAV,CAAgB,WAApC,EAAkD;;AAEjD,YAAQ,KAAR,CAAe,iJAAf;AACA,WAAO,IAAP;AAEA;;AAED,OAAK,aAAa,SAAlB,EAA8B,WAAW,UAAU,QAArB;AAC9B,OAAK,aAAa,UAAU,QAA5B,EAAuC;;AAEtC,YAAQ,KAAR,CAAe,qIAAf;AACA,WAAO,IAAP;AAEA;;AAED,OAAK,eAAe,SAApB,EAAgC,aAAa,UAAU,UAAvB;AAChC,OAAK,eAAe,UAAU,UAA9B,EAA2C;;AAE1C,YAAQ,KAAR,CAAe,uIAAf;AACA,WAAO,IAAP;AAEA;;AAED,kBAAe,UAAU,KAAV,CAAgB,MAA/B;AAEA;;AAED,MAAI,QAAQ,IAAI,UAAJ,CAAgB,WAAhB,CAAZ;AACA,MAAI,SAAS,CAAb;;AAEA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,WAAW,MAAhC,EAAwC,EAAG,CAA3C,EAA+C;;AAE9C,SAAM,GAAN,CAAW,WAAY,CAAZ,EAAgB,KAA3B,EAAkC,MAAlC;;AAEA,aAAU,WAAY,CAAZ,EAAgB,KAAhB,CAAsB,MAAhC;AAEA;;AAED,SAAO,IAAI,MAAM,eAAV,CAA2B,KAA3B,EAAkC,QAAlC,EAA4C,UAA5C,CAAP;AAEA,EAhb0B;;AAkb3B;;;;AAIA,uBAAsB,UAAW,UAAX,EAAwB;;AAE7C;AACA;AACA,MAAI,UAAJ;AACA,MAAI,cAAc,CAAlB;AACA,MAAI,SAAS,CAAb;;AAEA;AACA,OAAM,IAAI,IAAI,CAAR,EAAW,IAAI,WAAW,MAAhC,EAAwC,IAAI,CAA5C,EAA+C,EAAG,CAAlD,EAAsD;;AAErD,OAAI,YAAY,WAAY,CAAZ,CAAhB;;AAEA,OAAK,eAAe,SAApB,EAAgC,aAAa,UAAU,KAAV,CAAgB,WAA7B;AAChC,OAAK,eAAe,UAAU,KAAV,CAAgB,WAApC,EAAkD;;AAEjD,YAAQ,KAAR,CAAe,2DAAf;AACA,WAAO,IAAP;AAEA;;AAED,kBAAe,UAAU,KAAV,CAAgB,MAA/B;AACA,aAAU,UAAU,QAApB;AAEA;;AAED;AACA,MAAI,oBAAoB,IAAI,MAAM,iBAAV,CAA6B,IAAI,UAAJ,CAAgB,WAAhB,CAA7B,EAA4D,MAA5D,CAAxB;AACA,MAAI,SAAS,CAAb;AACA,MAAI,MAAM,EAAV;AACA,MAAI,UAAU,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,CAAd;AACA,MAAI,UAAU,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,CAAd;;AAEA,OAAM,IAAI,IAAI,CAAR,EAAW,IAAI,WAAW,MAAhC,EAAwC,IAAI,CAA5C,EAA+C,GAA/C,EAAsD;;AAErD,OAAI,YAAY,WAAY,CAAZ,CAAhB;AACA,OAAI,WAAW,UAAU,QAAzB;AACA,OAAI,QAAQ,UAAU,KAAtB;AACA,OAAI,MAAM,IAAI,MAAM,0BAAV,CAAsC,iBAAtC,EAAyD,QAAzD,EAAmE,MAAnE,EAA2E,UAAU,UAArF,CAAV;AACA,OAAI,IAAJ,CAAU,GAAV;;AAEA,aAAU,QAAV;;AAEA;AACA;AACA,QAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,KAArB,EAA4B,GAA5B,EAAmC;;AAElC,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,QAArB,EAA+B,GAA/B,EAAsC;;AAErC,SAAK,QAAS,CAAT,CAAL,EAAqB,CAArB,EAAwB,UAAW,QAAS,CAAT,CAAX,EAA2B,CAA3B,CAAxB;AAEA;AAED;AAED;;AAED,SAAO,GAAP;AAEA,EAjf0B;;AAmf3B;;;;AAIA,oBAAmB,UAAW,QAAX,EAAsB;;AAExC;AACA;AACA;AACA,MAAI,MAAM,CAAV;AACA,OAAM,IAAI,IAAV,IAAkB,SAAS,UAA3B,EAAwC;;AAEvC,OAAI,OAAO,SAAS,YAAT,CAAuB,IAAvB,CAAX;AACA,UAAO,KAAK,KAAL,GAAa,KAAK,QAAlB,GAA6B,KAAK,KAAL,CAAW,iBAA/C;AAEA;;AAED,MAAI,UAAU,SAAS,QAAT,EAAd;AACA,SAAO,UAAU,QAAQ,KAAR,GAAgB,QAAQ,QAAxB,GAAmC,QAAQ,KAAR,CAAc,iBAA3D,GAA+E,CAAtF;AACA,SAAO,GAAP;AAEA,EAxgB0B;;AA0gB3B;;;;;AAKA,gBAAe,UAAW,QAAX,EAAqB,YAAY,IAAjC,EAAwC;;AAEtD,cAAY,KAAK,GAAL,CAAU,SAAV,EAAqB,OAAO,OAA5B,CAAZ;;AAEA;AACA;AACA,MAAI,cAAc,EAAlB;AACA,MAAI,UAAU,SAAS,QAAT,EAAd;AACA,MAAI,YAAY,SAAS,YAAT,CAAuB,UAAvB,CAAhB;AACA,MAAI,cAAc,UAAU,QAAQ,KAAlB,GAA0B,UAAU,KAAtD;;AAEA;AACA,MAAI,YAAY,CAAhB;;AAEA;AACA,MAAI,iBAAiB,OAAO,IAAP,CAAa,SAAS,UAAtB,CAArB;AACA,MAAI,aAAa,EAAjB;AACA,MAAI,mBAAmB,EAAvB;AACA,MAAI,aAAa,EAAjB;AACA,MAAI,UAAU,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,CAAd;;AAEA;AACA,OAAM,IAAI,IAAI,CAAR,EAAW,IAAI,eAAe,MAApC,EAA4C,IAAI,CAAhD,EAAmD,GAAnD,EAA0D;;AAEzD,OAAI,OAAO,eAAgB,CAAhB,CAAX;;AAEA,cAAY,IAAZ,IAAqB,EAArB;;AAEA,OAAI,YAAY,SAAS,eAAT,CAA0B,IAA1B,CAAhB;AACA,OAAK,SAAL,EAAiB;;AAEhB,qBAAkB,IAAlB,IAA2B,IAAI,KAAJ,CAAW,UAAU,MAArB,EAA8B,IAA9B,GAAqC,GAArC,CAA0C,MAAM,EAAhD,CAA3B;AAEA;AAED;;AAED;AACA,MAAI,eAAe,KAAK,KAAL,CAAY,IAAI,SAAhB,CAAnB;AACA,MAAI,kBAAkB,KAAK,GAAL,CAAU,EAAV,EAAc,YAAd,CAAtB;AACA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,WAArB,EAAkC,GAAlC,EAAyC;;AAExC,OAAI,QAAQ,UAAU,QAAQ,IAAR,CAAc,CAAd,CAAV,GAA8B,CAA1C;;AAEA;AACA,OAAI,OAAO,EAAX;AACA,QAAM,IAAI,IAAI,CAAR,EAAW,IAAI,eAAe,MAApC,EAA4C,IAAI,CAAhD,EAAmD,GAAnD,EAA0D;;AAEzD,QAAI,OAAO,eAAgB,CAAhB,CAAX;AACA,QAAI,YAAY,SAAS,YAAT,CAAuB,IAAvB,CAAhB;AACA,QAAI,WAAW,UAAU,QAAzB;;AAEA,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,QAArB,EAA+B,GAA/B,EAAsC;;AAErC;AACA,aAAS,GAAG,CAAE,EAAI,UAAW,QAAS,CAAT,CAAX,EAA2B,KAA3B,IAAqC,eAAzC,CAA4D,GAA1E;AAEA;AAED;;AAED;AACA;AACA,OAAK,QAAQ,WAAb,EAA2B;;AAE1B,eAAW,IAAX,CAAiB,YAAa,IAAb,CAAjB;AAEA,IAJD,MAIO;;AAEN;AACA,SAAM,IAAI,IAAI,CAAR,EAAW,IAAI,eAAe,MAApC,EAA4C,IAAI,CAAhD,EAAmD,GAAnD,EAA0D;;AAEzD,SAAI,OAAO,eAAgB,CAAhB,CAAX;AACA,SAAI,YAAY,SAAS,YAAT,CAAuB,IAAvB,CAAhB;AACA,SAAI,YAAY,SAAS,eAAT,CAA0B,IAA1B,CAAhB;AACA,SAAI,WAAW,UAAU,QAAzB;AACA,SAAI,WAAW,WAAY,IAAZ,CAAf;AACA,SAAI,iBAAiB,iBAAkB,IAAlB,CAArB;;AAEA,UAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,QAArB,EAA+B,GAA/B,EAAsC;;AAErC,UAAI,aAAa,QAAS,CAAT,CAAjB;AACA,eAAS,IAAT,CAAe,UAAW,UAAX,EAAyB,KAAzB,CAAf;;AAEA,UAAK,SAAL,EAAiB;;AAEhB,YAAM,IAAI,IAAI,CAAR,EAAW,KAAK,UAAU,MAAhC,EAAwC,IAAI,EAA5C,EAAgD,GAAhD,EAAuD;;AAEtD,uBAAgB,CAAhB,EAAoB,IAApB,CAA0B,UAAW,CAAX,EAAgB,UAAhB,EAA8B,KAA9B,CAA1B;AAEA;AAED;AAED;AAED;;AAED,gBAAa,IAAb,IAAsB,SAAtB;AACA,eAAW,IAAX,CAAiB,SAAjB;AACA;AAEA;AAED;;AAED;AACA;AACA,QAAM,SAAS,SAAS,KAAT,EAAf;AACA,OAAM,IAAI,IAAI,CAAR,EAAW,IAAI,eAAe,MAApC,EAA4C,IAAI,CAAhD,EAAmD,GAAnD,EAA0D;;AAEzD,OAAI,OAAO,eAAgB,CAAhB,CAAX;AACA,OAAI,eAAe,SAAS,YAAT,CAAuB,IAAvB,CAAnB;;AAEA,OAAI,SAAS,IAAI,aAAa,KAAb,CAAmB,WAAvB,CAAoC,WAAY,IAAZ,CAApC,CAAb;AACA,OAAI,YAAY,IAAI,MAAM,eAAV,CAA2B,MAA3B,EAAmC,aAAa,QAAhD,EAA0D,aAAa,UAAvE,CAAhB;;AAEA,UAAO,YAAP,CAAqB,IAArB,EAA2B,SAA3B;;AAEA;AACA,OAAK,QAAQ,gBAAb,EAAgC;;AAE/B,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,iBAAkB,IAAlB,EAAyB,MAA9C,EAAsD,GAAtD,EAA6D;;AAE5D,SAAI,oBAAoB,SAAS,eAAT,CAA0B,IAA1B,EAAkC,CAAlC,CAAxB;;AAEA,SAAI,SAAS,IAAI,kBAAkB,KAAlB,CAAwB,WAA5B,CAAyC,iBAAkB,IAAlB,EAA0B,CAA1B,CAAzC,CAAb;AACA,SAAI,iBAAiB,IAAI,MAAM,eAAV,CAA2B,MAA3B,EAAmC,kBAAkB,QAArD,EAA+D,kBAAkB,UAAjF,CAArB;AACA,YAAO,eAAP,CAAwB,IAAxB,EAAgC,CAAhC,IAAsC,cAAtC;AAEA;AAED;AAED;;AAED;;AAEA,SAAO,QAAP,CAAiB,UAAjB;;AAEA,SAAO,MAAP;AAEA,EA7pB0B;;AA+pB3B;;;;;AAKA,sBAAqB,UAAW,QAAX,EAAqB,QAArB,EAAgC;;AAEpD,MAAK,aAAa,MAAM,iBAAxB,EAA4C;;AAE3C,WAAQ,IAAR,CAAc,yFAAd;AACA,UAAO,QAAP;AAEA;;AAED,MAAK,aAAa,MAAM,mBAAnB,IAA0C,aAAa,MAAM,qBAAlE,EAA0F;;AAEzF,OAAI,QAAQ,SAAS,QAAT,EAAZ;;AAEA;;AAEA,OAAK,UAAU,IAAf,EAAsB;;AAErB,QAAI,UAAU,EAAd;;AAEA,QAAI,WAAW,SAAS,YAAT,CAAuB,UAAvB,CAAf;;AAEA,QAAK,aAAa,SAAlB,EAA8B;;AAE7B,UAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,SAAS,KAA9B,EAAqC,GAArC,EAA4C;;AAE3C,cAAQ,IAAR,CAAc,CAAd;AAEA;;AAED,cAAS,QAAT,CAAmB,OAAnB;AACA,aAAQ,SAAS,QAAT,EAAR;AAEA,KAXD,MAWO;;AAEN,aAAQ,KAAR,CAAe,yGAAf;AACA,YAAO,QAAP;AAEA;AAED;;AAED;;AAEA,OAAI,oBAAoB,MAAM,KAAN,GAAc,CAAtC;AACA,OAAI,aAAa,EAAjB;;AAEA,OAAK,aAAa,MAAM,mBAAxB,EAA8C;;AAE7C;;AAEA,SAAM,IAAI,IAAI,CAAd,EAAiB,KAAK,iBAAtB,EAAyC,GAAzC,EAAgD;;AAE/C,gBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,CAAZ,CAAjB;AACA,gBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,CAAZ,CAAjB;AACA,gBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,IAAI,CAAhB,CAAjB;AAEA;AAED,IAZD,MAYO;;AAEN;;AAEA,SAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,iBAArB,EAAwC,GAAxC,EAA+C;;AAE9C,SAAK,IAAI,CAAJ,KAAU,CAAf,EAAmB;;AAElB,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,CAAZ,CAAjB;AACA,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,IAAI,CAAhB,CAAjB;AACA,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,IAAI,CAAhB,CAAjB;AAGA,MAPD,MAOO;;AAEN,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,IAAI,CAAhB,CAAjB;AACA,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,IAAI,CAAhB,CAAjB;AACA,iBAAW,IAAX,CAAiB,MAAM,IAAN,CAAY,CAAZ,CAAjB;AAEA;AAED;AAED;;AAED,OAAO,WAAW,MAAX,GAAoB,CAAtB,KAA8B,iBAAnC,EAAuD;;AAEtD,YAAQ,KAAR,CAAe,kGAAf;AAEA;;AAED;;AAEA,OAAI,cAAc,SAAS,KAAT,EAAlB;AACA,eAAY,QAAZ,CAAsB,UAAtB;AACA,eAAY,WAAZ;;AAEA,UAAO,WAAP;AAEA,GAxFD,MAwFO;;AAEN,WAAQ,KAAR,CAAe,qEAAf,EAAsF,QAAtF;AACA,UAAO,QAAP;AAEA;AAED;;AA5wB0B,CAA5B","file":"BufferGeometryUtils-compiled.js","sourcesContent":["console.warn( \"THREE.BufferGeometryUtils: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\nTHREE.BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new THREE.BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new THREE.Vector3();\n\t\t\ttan2[ i ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tvar vA = new THREE.Vector3(),\n\t\t\tvB = new THREE.Vector3(),\n\t\t\tvC = new THREE.Vector3(),\n\n\t\t\tuvA = new THREE.Vector2(),\n\t\t\tuvB = new THREE.Vector2(),\n\t\t\tuvC = new THREE.Vector2(),\n\n\t\t\tsdir = new THREE.Vector3(),\n\t\t\ttdir = new THREE.Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<THREE.BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {THREE.BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new THREE.BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\t\t\tvar attributesCount = 0;\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t\tattributesCount ++;\n\n\t\t\t}\n\n\t\t\t// ensure geometries have the same number of attributes\n\n\t\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<THREE.BufferAttribute>} attributes\n\t * @return {THREE.BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<THREE.BufferAttribute>} attributes\n\t * @return {Array<THREE.InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new THREE.InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new THREE.InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<THREE.BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {THREE.BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new THREE.BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new THREE.BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {THREE.BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === THREE.TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === THREE.TriangleFanDrawMode || drawMode === THREE.TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === THREE.TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n"]}