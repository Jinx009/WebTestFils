{"version":3,"sources":["LineMaterial.js"],"names":[],"mappings":"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","file":"LineMaterial-compiled.js","sourcesContent":["console.warn( \"THREE.LineMaterial: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\n\nTHREE.UniformsLib.line = {\n\n\tlinewidth: { value: 1 },\n\tresolution: { value: new THREE.Vector2( 1, 1 ) },\n\tdashScale: { value: 1 },\n\tdashSize: { value: 1 },\n\tgapSize: { value: 1 }, // todo FIX - maybe change to totalSize\n\topacity: { value: 1 }\n\n};\n\nTHREE.ShaderLib[ 'line' ] = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\t\tTHREE.UniformsLib.common,\n\t\tTHREE.UniformsLib.fog,\n\t\tTHREE.UniformsLib.line\n\t] ),\n\n\tvertexShader:\n\t\t`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n\n\tfragmentShader:\n\t\t`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\nTHREE.LineMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, {\n\n\t\ttype: 'LineMaterial',\n\n\t\tuniforms: THREE.UniformsUtils.clone( THREE.ShaderLib[ 'line' ].uniforms ),\n\n\t\tvertexShader: THREE.ShaderLib[ 'line' ].vertexShader,\n\t\tfragmentShader: THREE.ShaderLib[ 'line' ].fragmentShader,\n\n\t\tclipping: true // required for clipping support\n\n\t} );\n\n\tthis.dashed = false;\n\n\tObject.defineProperties( this, {\n\n\t\tcolor: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.diffuse.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.diffuse.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tlinewidth: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.linewidth.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.linewidth.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdashScale: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.dashScale.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.dashScale.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdashSize: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.dashSize.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.dashSize.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgapSize: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.gapSize.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.gapSize.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\topacity: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.opacity.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.opacity.value = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tresolution: {\n\n\t\t\tenumerable: true,\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.uniforms.resolution.value;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.uniforms.resolution.value.copy( value );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.LineMaterial.prototype.constructor = THREE.LineMaterial;\n\nTHREE.LineMaterial.prototype.isLineMaterial = true;\n"]}