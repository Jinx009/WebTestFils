{"version":3,"sources":["NURBSSurface.js"],"names":[],"mappings":"AAAA,QAAQ,IAAR,CAAc,6SAAd;AACA;;;;;;AAMA,MAAM,YAAN,GAAqB,UAAW,OAAX,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,MAArC,CAA4C,qBAA5C,EAAmE,aAAnE,CAAiF,8BAAjF,EAAkH;;AAEtI,MAAK,OAAL,GAAe,OAAf;AACA,MAAK,OAAL,GAAe,OAAf;AACA,MAAK,MAAL,GAAc,MAAd;AACA,MAAK,MAAL,GAAc,MAAd;AACA,MAAK,aAAL,GAAqB,EAArB;;AAEA,KAAI,OAAO,OAAO,MAAP,GAAgB,OAAhB,GAA0B,CAArC;AACA,KAAI,OAAO,OAAO,MAAP,GAAgB,OAAhB,GAA0B,CAArC;;AAEA;AACA,MAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,IAArB,EAA2B,EAAG,CAA9B,EAAkC;;AAEjC,OAAK,aAAL,CAAoB,CAApB,IAA0B,EAA1B;AACA,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,IAArB,EAA2B,EAAG,CAA9B,EAAkC;;AAEjC,OAAI,QAAQ,cAAe,CAAf,EAAoB,CAApB,CAAZ;AACA,QAAK,aAAL,CAAoB,CAApB,EAAyB,CAAzB,IAA+B,IAAI,MAAM,OAAV,CAAmB,MAAM,CAAzB,EAA4B,MAAM,CAAlC,EAAqC,MAAM,CAA3C,EAA8C,MAAM,CAApD,CAA/B;AAEA;AAED;AAED,CAxBD;;AA2BA,MAAM,YAAN,CAAmB,SAAnB,GAA+B;;AAE9B,cAAa,MAAM,YAFW;;AAI9B,WAAU,UAAW,EAAX,EAAe,EAAf,EAAmB,MAAnB,EAA4B;;AAErC,MAAI,IAAI,KAAK,MAAL,CAAa,CAAb,IAAmB,MAAO,KAAK,MAAL,CAAa,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAlC,IAAwC,KAAK,MAAL,CAAa,CAAb,CAA/C,CAA3B,CAFqC,CAEyD;AAC9F,MAAI,IAAI,KAAK,MAAL,CAAa,CAAb,IAAmB,MAAO,KAAK,MAAL,CAAa,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAlC,IAAwC,KAAK,MAAL,CAAa,CAAb,CAA/C,CAA3B,CAHqC,CAGyD;;AAE9F,QAAM,UAAN,CAAiB,gBAAjB,CAAmC,KAAK,OAAxC,EAAiD,KAAK,OAAtD,EAA+D,KAAK,MAApE,EAA4E,KAAK,MAAjF,EAAyF,KAAK,aAA9F,EAA6G,CAA7G,EAAgH,CAAhH,EAAmH,MAAnH;AAEA;AAX6B,CAA/B","file":"NURBSSurface-compiled.js","sourcesContent":["console.warn( \"THREE.NURBSSurface: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n/**\n * NURBS surface object\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n **/\n\nTHREE.NURBSSurface = function ( degree1, degree2, knots1, knots2 /* arrays of reals */, controlPoints /* array^2 of Vector(2|3|4) */ ) {\n\n\tthis.degree1 = degree1;\n\tthis.degree2 = degree2;\n\tthis.knots1 = knots1;\n\tthis.knots2 = knots2;\n\tthis.controlPoints = [];\n\n\tvar len1 = knots1.length - degree1 - 1;\n\tvar len2 = knots2.length - degree2 - 1;\n\n\t// ensure Vector4 for control points\n\tfor ( var i = 0; i < len1; ++ i ) {\n\n\t\tthis.controlPoints[ i ] = [];\n\t\tfor ( var j = 0; j < len2; ++ j ) {\n\n\t\t\tvar point = controlPoints[ i ][ j ];\n\t\t\tthis.controlPoints[ i ][ j ] = new THREE.Vector4( point.x, point.y, point.z, point.w );\n\n\t\t}\n\n\t}\n\n};\n\n\nTHREE.NURBSSurface.prototype = {\n\n\tconstructor: THREE.NURBSSurface,\n\n\tgetPoint: function ( t1, t2, target ) {\n\n\t\tvar u = this.knots1[ 0 ] + t1 * ( this.knots1[ this.knots1.length - 1 ] - this.knots1[ 0 ] ); // linear mapping t1->u\n\t\tvar v = this.knots2[ 0 ] + t2 * ( this.knots2[ this.knots2.length - 1 ] - this.knots2[ 0 ] ); // linear mapping t2->u\n\n\t\tTHREE.NURBSUtils.calcSurfacePoint( this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target );\n\n\t}\n};\n"]}