{"version":3,"sources":["MTLLoader.js"],"names":[],"mappings":"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","file":"MTLLoader-compiled.js","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n\tconstructor: THREE.MTLLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetBaseUrl: function( value ) {\n\n\t\tthis.baseUrl = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\n\t},\n\n\t/**\n\t * Parses loaded MTL file\n\t * @param text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t */\n\tparse: function ( text ) {\n\n\t\tvar lines = text.split( \"\\n\" );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : \"\";\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === \"newmtl\" ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else if ( info ) {\n\n\t\t\t\tif ( key === \"ka\" || key === \"kd\" || key === \"ks\" ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.baseUrl, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n *                  invertTransparency: If transparency need to be inverted (inversion is needed if d = 0 is fully opaque)\n *                                      Default: false (d = 1 is fully opaque)\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl;\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 1 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\n\t\t\t\t\t\t// According to MTL format (http://paulbourke.net/dataformats/mtl/):\n\t\t\t\t\t\t//   d is dissolve for current material\n\t\t\t\t\t\t//   factor of 1.0 is fully opaque, a factor of 0 is fully dissolved (completely transparent)\n\n\t\t\t\t\t\tif ( this.options && this.options.invertTransparency ) {\n\n\t\t\t\t\t\t\tvalue = 1 - value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function() {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams[ 'color' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ka':\n\n\t\t\t\t\t// Ambient color (color under shadow) using RGB values\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams[ 'specular' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tparams[ 'map' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\tparams[ 'map' ].wrapS = this.wrap;\n\t\t\t\t\tparams[ 'map' ].wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams[ 'shininess' ] = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\n\t\t\t\t\t// According to MTL format (http://paulbourke.net/dataformats/mtl/):\n\t\t\t\t\t//   d is dissolve for current material\n\t\t\t\t\t//   factor of 1.0 is fully opaque, a factor of 0 is fully dissolved (completely transparent)\n\n\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\tparams[ 'transparent' ] = true;\n\t\t\t\t\t\tparams[ 'opacity' ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tif ( params[ 'bumpMap' ] ) break; // Avoid loading twice.\n\n\t\t\t\t\tparams[ 'bumpMap' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\tparams[ 'bumpMap' ].wrapS = this.wrap;\n\t\t\t\t\tparams[ 'bumpMap' ].wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\tif ( loader !== null ) {\n\n\t\t\ttexture = loader.load( url, onLoad );\n\n\t\t} else {\n\n\t\t\ttexture = new THREE.Texture();\n\n\t\t\tloader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = THREE.MTLLoader.ensurePowerOfTwo_( image );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n\nTHREE.MTLLoader.ensurePowerOfTwo_ = function ( image ) {\n\n\tif ( ! THREE.Math.isPowerOfTwo( image.width ) || ! THREE.Math.isPowerOfTwo( image.height ) ) {\n\n\t\tvar canvas = document.createElement( \"canvas\" );\n\t\tcanvas.width = THREE.MTLLoader.nextHighestPowerOfTwo_( image.width );\n\t\tcanvas.height = THREE.MTLLoader.nextHighestPowerOfTwo_( image.height );\n\n\t\tvar ctx = canvas.getContext( \"2d\" );\n\t\tctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\treturn canvas;\n\n\t}\n\n\treturn image;\n\n};\n\nTHREE.MTLLoader.nextHighestPowerOfTwo_ = function( x ) {\n\n\t-- x;\n\n\tfor ( var i = 1; i < 32; i <<= 1 ) {\n\n\t\tx = x | x >> i;\n\n\t}\n\n\treturn x + 1;\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.MTLLoader.prototype );\n"]}